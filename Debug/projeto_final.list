
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08001fd8  08001fd8  00002fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002228  08002228  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002228  08002228  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002228  08002228  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002228  08002228  00003228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800222c  0800222c  0000322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002230  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800228c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800228c  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a5a  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ad  00000000  00000000  00005adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00006390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001cc  00000000  00000000  00006618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012020  00000000  00000000  000067e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b02  00000000  00000000  00018804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a77e  00000000  00000000  0001b306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00075a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001248  00000000  00000000  00075ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00076d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001fc0 	.word	0x08001fc0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001fc0 	.word	0x08001fc0

08000170 <ADC_init>:
#include "ldr.h"

void ADC_init(void) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    // Habilita clock GPIOA e ADC1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_ADC1EN;
 8000176:	4b1a      	ldr	r3, [pc, #104]	@ (80001e0 <ADC_init+0x70>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a19      	ldr	r2, [pc, #100]	@ (80001e0 <ADC_init+0x70>)
 800017c:	f443 7301 	orr.w	r3, r3, #516	@ 0x204
 8000180:	6193      	str	r3, [r2, #24]

    // PA0 como entrada analogica (ADC_IN0)
    GPIOA->CRL &= ~GPIO_CRL_MODE0;
 8000182:	4b18      	ldr	r3, [pc, #96]	@ (80001e4 <ADC_init+0x74>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a17      	ldr	r2, [pc, #92]	@ (80001e4 <ADC_init+0x74>)
 8000188:	f023 0303 	bic.w	r3, r3, #3
 800018c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF0;
 800018e:	4b15      	ldr	r3, [pc, #84]	@ (80001e4 <ADC_init+0x74>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a14      	ldr	r2, [pc, #80]	@ (80001e4 <ADC_init+0x74>)
 8000194:	f023 030c 	bic.w	r3, r3, #12
 8000198:	6013      	str	r3, [r2, #0]

    // Ativa o ADC e calibra
    ADC1->CR2 |= ADC_CR2_ADON;      // Liga ADC
 800019a:	4b13      	ldr	r3, [pc, #76]	@ (80001e8 <ADC_init+0x78>)
 800019c:	689b      	ldr	r3, [r3, #8]
 800019e:	4a12      	ldr	r2, [pc, #72]	@ (80001e8 <ADC_init+0x78>)
 80001a0:	f043 0301 	orr.w	r3, r3, #1
 80001a4:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 1000; i++); // delay
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e002      	b.n	80001b2 <ADC_init+0x42>
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80001b8:	dbf8      	blt.n	80001ac <ADC_init+0x3c>

    ADC1->CR2 |= ADC_CR2_CAL;       // Inicia calibracao
 80001ba:	4b0b      	ldr	r3, [pc, #44]	@ (80001e8 <ADC_init+0x78>)
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	4a0a      	ldr	r2, [pc, #40]	@ (80001e8 <ADC_init+0x78>)
 80001c0:	f043 0304 	orr.w	r3, r3, #4
 80001c4:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC_CR2_CAL); // espera calibrar
 80001c6:	bf00      	nop
 80001c8:	4b07      	ldr	r3, [pc, #28]	@ (80001e8 <ADC_init+0x78>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	f003 0304 	and.w	r3, r3, #4
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d1f9      	bne.n	80001c8 <ADC_init+0x58>
}
 80001d4:	bf00      	nop
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010800 	.word	0x40010800
 80001e8:	40012400 	.word	0x40012400

080001ec <ADC_read>:

uint16_t ADC_read(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    ADC1->SQR3 = 0; // Canal 0 (PA0)
 80001f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000220 <ADC_read+0x34>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON; // Inicia conversao
 80001f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <ADC_read+0x34>)
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <ADC_read+0x34>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC)); // Espera terminar
 8000202:	bf00      	nop
 8000204:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <ADC_read+0x34>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f003 0302 	and.w	r3, r3, #2
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f9      	beq.n	8000204 <ADC_read+0x18>
    return ADC1->DR; // Retorna valor (0 a 4095)
 8000210:	4b03      	ldr	r3, [pc, #12]	@ (8000220 <ADC_read+0x34>)
 8000212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000214:	b29b      	uxth	r3, r3
}
 8000216:	4618      	mov	r0, r3
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40012400 	.word	0x40012400

08000224 <LED_init>:

void LED_init(void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000228:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <LED_init+0x3c>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a0c      	ldr	r2, [pc, #48]	@ (8000260 <LED_init+0x3c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	6193      	str	r3, [r2, #24]

    // PB9 como saida push-pull
    GPIOB->CRH &= ~GPIO_CRH_MODE9;
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <LED_init+0x40>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <LED_init+0x40>)
 800023a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800023e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF9;
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <LED_init+0x40>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <LED_init+0x40>)
 8000246:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800024a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE9_1; // saida 2MHz
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <LED_init+0x40>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <LED_init+0x40>)
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6053      	str	r3, [r2, #4]
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000
 8000264:	40010c00 	.word	0x40010c00

08000268 <SystemClock_Config>:
#include <string.h>
#include <stdio.h>
#include "ldr.h"

void SystemClock_Config(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSEON;
 800026c:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <SystemClock_Config+0x80>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1d      	ldr	r2, [pc, #116]	@ (80002e8 <SystemClock_Config+0x80>)
 8000272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000276:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY))
 8000278:	bf00      	nop
 800027a:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <SystemClock_Config+0x80>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <SystemClock_Config+0x12>
        ;

    RCC->CFGR |= RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9;
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <SystemClock_Config+0x80>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <SystemClock_Config+0x80>)
 800028c:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000290:	6053      	str	r3, [r2, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <SystemClock_Config+0x80>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <SystemClock_Config+0x80>)
 8000298:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800029c:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY))
 800029e:	bf00      	nop
 80002a0:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <SystemClock_Config+0x80>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f9      	beq.n	80002a0 <SystemClock_Config+0x38>
        ;

    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 80002ac:	4b0f      	ldr	r3, [pc, #60]	@ (80002ec <SystemClock_Config+0x84>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0e      	ldr	r2, [pc, #56]	@ (80002ec <SystemClock_Config+0x84>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6013      	str	r3, [r2, #0]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <SystemClock_Config+0x80>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <SystemClock_Config+0x80>)
 80002be:	f043 0302 	orr.w	r3, r3, #2
 80002c2:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 80002c4:	bf00      	nop
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <SystemClock_Config+0x80>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	f003 030c 	and.w	r3, r3, #12
 80002ce:	2b08      	cmp	r3, #8
 80002d0:	d1f9      	bne.n	80002c6 <SystemClock_Config+0x5e>
        ;

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 80002d2:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <SystemClock_Config+0x80>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	4a04      	ldr	r2, [pc, #16]	@ (80002e8 <SystemClock_Config+0x80>)
 80002d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002dc:	6053      	str	r3, [r2, #4]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40022000 	.word	0x40022000

080002f0 <led_init>:

//  (PC13)
void led_init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <led_init+0x30>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a09      	ldr	r2, [pc, #36]	@ (8000320 <led_init+0x30>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6193      	str	r3, [r2, #24]
    GPIOC->CRH &= ~(0xF << 20); // PC13
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <led_init+0x34>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a07      	ldr	r2, [pc, #28]	@ (8000324 <led_init+0x34>)
 8000306:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800030a:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= (0x3 << 20);  // Output 50MHz
 800030c:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <led_init+0x34>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a04      	ldr	r2, [pc, #16]	@ (8000324 <led_init+0x34>)
 8000312:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000316:	6053      	str	r3, [r2, #4]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000
 8000324:	40011000 	.word	0x40011000

08000328 <led_toggle>:
{
    GPIOC->BSRR = GPIO_BSRR_BS13;
}

void led_toggle(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
    GPIOC->ODR ^= GPIO_ODR_ODR13;
 800032c:	4b04      	ldr	r3, [pc, #16]	@ (8000340 <led_toggle+0x18>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a03      	ldr	r2, [pc, #12]	@ (8000340 <led_toggle+0x18>)
 8000332:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000336:	60d3      	str	r3, [r2, #12]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	40011000 	.word	0x40011000

08000344 <nrf_test_connection>:

// basic test  NRF24L01
uint8_t nrf_test_connection(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
    // tests writing and reading a register
    uint8_t test_value = 0x55;
 800034a:	2355      	movs	r3, #85	@ 0x55
 800034c:	71fb      	strb	r3, [r7, #7]
    nrf_write_reg(RF_CH, test_value);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4619      	mov	r1, r3
 8000352:	2005      	movs	r0, #5
 8000354:	f000 fa0a 	bl	800076c <nrf_write_reg>
    delay_ms(1);
 8000358:	2001      	movs	r0, #1
 800035a:	f000 f90b 	bl	8000574 <delay_ms>
    uint8_t read_value = nrf_read_reg(RF_CH);
 800035e:	2005      	movs	r0, #5
 8000360:	f000 fa26 	bl	80007b0 <nrf_read_reg>
 8000364:	4603      	mov	r3, r0
 8000366:	71bb      	strb	r3, [r7, #6]

    return (read_value == test_value);
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	429a      	cmp	r2, r3
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
}
 8000376:	4618      	mov	r0, r3
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <test_receiver>:
    }
}

// ==== RECEIVER MODE ====
void test_receiver(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0
    printf("Iniciando modo RECEPTOR...\r\n");
 8000386:	481b      	ldr	r0, [pc, #108]	@ (80003f4 <test_receiver+0x74>)
 8000388:	f000 fdd6 	bl	8000f38 <puts>

    // init NRF an receiver
    nrf_init(NRF_MODE_RX);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fa7d 	bl	800088c <nrf_init>

    // setup reception adress
    uint8_t addr2[5] = {0x05, 0xDD, 0xCC, 0xAA, 0x00};
 8000392:	4b19      	ldr	r3, [pc, #100]	@ (80003f8 <test_receiver+0x78>)
 8000394:	623b      	str	r3, [r7, #32]
 8000396:	2300      	movs	r3, #0
 8000398:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    nrf_set_rx_addr(0, addr2, 5);
 800039c:	f107 0320 	add.w	r3, r7, #32
 80003a0:	2205      	movs	r2, #5
 80003a2:	4619      	mov	r1, r3
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fb3d 	bl	8000a24 <nrf_set_rx_addr>

    printf("Receptor configurado!\r\n");
 80003aa:	4814      	ldr	r0, [pc, #80]	@ (80003fc <test_receiver+0x7c>)
 80003ac:	f000 fdc4 	bl	8000f38 <puts>
    printf("Aguardando dados...\r\n");
 80003b0:	4813      	ldr	r0, [pc, #76]	@ (8000400 <test_receiver+0x80>)
 80003b2:	f000 fdc1 	bl	8000f38 <puts>

    while (1)
    {
        uint8_t buffer[32];

        if (nrf_data_available())
 80003b6:	f000 fb64 	bl	8000a82 <nrf_data_available>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d015      	beq.n	80003ec <test_receiver+0x6c>
        {
            if (nrf_receive(buffer, 32))
 80003c0:	463b      	mov	r3, r7
 80003c2:	2120      	movs	r1, #32
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fae5 	bl	8000994 <nrf_receive>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00d      	beq.n	80003ec <test_receiver+0x6c>
            {
                buffer[31] = '\0';
 80003d0:	2300      	movs	r3, #0
 80003d2:	77fb      	strb	r3, [r7, #31]

                printf("Recebido: ");
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <test_receiver+0x84>)
 80003d6:	f000 fd47 	bl	8000e68 <iprintf>
                printf((char *)buffer);
 80003da:	463b      	mov	r3, r7
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fd43 	bl	8000e68 <iprintf>
                printf("\r\n");
 80003e2:	4809      	ldr	r0, [pc, #36]	@ (8000408 <test_receiver+0x88>)
 80003e4:	f000 fda8 	bl	8000f38 <puts>

                led_toggle();
 80003e8:	f7ff ff9e 	bl	8000328 <led_toggle>
            }
        }

        delay_ms(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f000 f8c1 	bl	8000574 <delay_ms>
    {
 80003f2:	e7e0      	b.n	80003b6 <test_receiver+0x36>
 80003f4:	08002064 	.word	0x08002064
 80003f8:	aaccdd05 	.word	0xaaccdd05
 80003fc:	08002080 	.word	0x08002080
 8000400:	08002098 	.word	0x08002098
 8000404:	080020b0 	.word	0x080020b0
 8000408:	0800202c 	.word	0x0800202c

0800040c <nrf_diagnostic>:
    }
}

// ==== DIAGNOSIS ====
void nrf_diagnostic(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b092      	sub	sp, #72	@ 0x48
 8000410:	af00      	add	r7, sp, #0
    printf("\n=== DIAGNÓSTICO NRF24L01 ===\r\n");
 8000412:	482c      	ldr	r0, [pc, #176]	@ (80004c4 <nrf_diagnostic+0xb8>)
 8000414:	f000 fd90 	bl	8000f38 <puts>

    // connection test
    if (nrf_test_connection())
 8000418:	f7ff ff94 	bl	8000344 <nrf_test_connection>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d04a      	beq.n	80004b8 <nrf_diagnostic+0xac>
    {
        printf("✓ Conexao SPI OK\r\n");
 8000422:	4829      	ldr	r0, [pc, #164]	@ (80004c8 <nrf_diagnostic+0xbc>)
 8000424:	f000 fd88 	bl	8000f38 <puts>
        printf("✗ ERRO na conexao SPI!\r\n");
        return;
    }

    // read important registers
    uint8_t config = nrf_read_reg(CONFIG);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f9c1 	bl	80007b0 <nrf_read_reg>
 800042e:	4603      	mov	r3, r0
 8000430:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t status = nrf_read_reg(STATUS);
 8000434:	2007      	movs	r0, #7
 8000436:	f000 f9bb 	bl	80007b0 <nrf_read_reg>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint8_t rf_ch = nrf_read_reg(RF_CH);
 8000440:	2005      	movs	r0, #5
 8000442:	f000 f9b5 	bl	80007b0 <nrf_read_reg>
 8000446:	4603      	mov	r3, r0
 8000448:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t rf_setup = nrf_read_reg(RF_SETUP);
 800044c:	2006      	movs	r0, #6
 800044e:	f000 f9af 	bl	80007b0 <nrf_read_reg>
 8000452:	4603      	mov	r3, r0
 8000454:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    char debug_msg[64];
    sprintf(debug_msg, "CONFIG: 0x%02X\r\n", config);
 8000458:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	491b      	ldr	r1, [pc, #108]	@ (80004cc <nrf_diagnostic+0xc0>)
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fd71 	bl	8000f48 <siprintf>
    printf(debug_msg);
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f000 fcfd 	bl	8000e68 <iprintf>

    sprintf(debug_msg, "STATUS: 0x%02X\r\n", status);
 800046e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4916      	ldr	r1, [pc, #88]	@ (80004d0 <nrf_diagnostic+0xc4>)
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fd66 	bl	8000f48 <siprintf>
    printf(debug_msg);
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fcf2 	bl	8000e68 <iprintf>

    sprintf(debug_msg, "RF_CH: %d\r\n", rf_ch);
 8000484:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4912      	ldr	r1, [pc, #72]	@ (80004d4 <nrf_diagnostic+0xc8>)
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fd5b 	bl	8000f48 <siprintf>
    printf(debug_msg);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fce7 	bl	8000e68 <iprintf>

    sprintf(debug_msg, "RF_SETUP: 0x%02X\r\n", rf_setup);
 800049a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	490d      	ldr	r1, [pc, #52]	@ (80004d8 <nrf_diagnostic+0xcc>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fd50 	bl	8000f48 <siprintf>
    printf(debug_msg);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fcdc 	bl	8000e68 <iprintf>

    printf("=========================\r\n");
 80004b0:	480a      	ldr	r0, [pc, #40]	@ (80004dc <nrf_diagnostic+0xd0>)
 80004b2:	f000 fd41 	bl	8000f38 <puts>
 80004b6:	e002      	b.n	80004be <nrf_diagnostic+0xb2>
        printf("✗ ERRO na conexao SPI!\r\n");
 80004b8:	4809      	ldr	r0, [pc, #36]	@ (80004e0 <nrf_diagnostic+0xd4>)
 80004ba:	f000 fd3d 	bl	8000f38 <puts>
}
 80004be:	3748      	adds	r7, #72	@ 0x48
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	08002118 	.word	0x08002118
 80004c8:	08002138 	.word	0x08002138
 80004cc:	08002168 	.word	0x08002168
 80004d0:	0800217c 	.word	0x0800217c
 80004d4:	08002190 	.word	0x08002190
 80004d8:	0800219c 	.word	0x0800219c
 80004dc:	080021b0 	.word	0x080021b0
 80004e0:	0800214c 	.word	0x0800214c

080004e4 <main>:

// ==== MAIN ====
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80004ea:	f7ff febd 	bl	8000268 <SystemClock_Config>
    led_init();
 80004ee:	f7ff feff 	bl	80002f0 <led_init>
    USART1_Init();
 80004f2:	f000 fb75 	bl	8000be0 <USART1_Init>
    nrf_gpio_init();
 80004f6:	f000 f85b 	bl	80005b0 <nrf_gpio_init>
    spi_init();
 80004fa:	f000 f8dd 	bl	80006b8 <spi_init>
    ADC_init();
 80004fe:	f7ff fe37 	bl	8000170 <ADC_init>
    LED_init();
 8000502:	f7ff fe8f 	bl	8000224 <LED_init>

    delay_ms(1000);
 8000506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050a:	f000 f833 	bl	8000574 <delay_ms>
    printf("\n*** TESTE NRF24L01 ***\r\n");
 800050e:	4816      	ldr	r0, [pc, #88]	@ (8000568 <main+0x84>)
 8000510:	f000 fd12 	bl	8000f38 <puts>

    // diagnostic
    nrf_diagnostic();
 8000514:	f7ff ff7a 	bl	800040c <nrf_diagnostic>

    // tester an transmitter
    // test_transmitter();

    // tester an receptor
    test_receiver();
 8000518:	f7ff ff32 	bl	8000380 <test_receiver>
    // ping-pong test
    // test_ping_pong();

    while (1)
    {
        led_toggle();
 800051c:	f7ff ff04 	bl	8000328 <led_toggle>
        delay_ms(500);
 8000520:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000524:	f000 f826 	bl	8000574 <delay_ms>

        uint16_t valor_adc = ADC_read(); // leitura do LDR
 8000528:	f7ff fe60 	bl	80001ec <ADC_read>
 800052c:	4603      	mov	r3, r0
 800052e:	80fb      	strh	r3, [r7, #6]

        if (valor_adc < 1000)
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000536:	d206      	bcs.n	8000546 <main+0x62>
        { // escuro: acende LED
            GPIOB->ODR |= (1 << 9);
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <main+0x88>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <main+0x88>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000542:	60d3      	str	r3, [r2, #12]
 8000544:	e005      	b.n	8000552 <main+0x6e>
        }
        else
        {
            GPIOB->ODR &= ~(1 << 9);
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <main+0x88>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	4a08      	ldr	r2, [pc, #32]	@ (800056c <main+0x88>)
 800054c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000550:	60d3      	str	r3, [r2, #12]
        }

        for (volatile int i = 0; i < 100000; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	e002      	b.n	800055e <main+0x7a>
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	4a03      	ldr	r2, [pc, #12]	@ (8000570 <main+0x8c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	ddf8      	ble.n	8000558 <main+0x74>
    {
 8000566:	e7d9      	b.n	800051c <main+0x38>
 8000568:	080021cc 	.word	0x080021cc
 800056c:	40010c00 	.word	0x40010c00
 8000570:	0001869f 	.word	0x0001869f

08000574 <delay_ms>:
#include "nrfl2401.h"

// delays
void delay_ms(uint32_t ms) {
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e00c      	b.n	800059c <delay_ms+0x28>
        for (volatile uint32_t j = 0; j < 8000; j++);
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	e002      	b.n	800058e <delay_ms+0x1a>
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3301      	adds	r3, #1
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000594:	d3f8      	bcc.n	8000588 <delay_ms+0x14>
    for (uint32_t i = 0; i < ms; i++) {
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d3ee      	bcc.n	8000582 <delay_ms+0xe>
    }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <nrf_gpio_init>:
    for (uint32_t i = 0; i < us; i++) {
        for (volatile uint32_t j = 0; j < 8; j++);
    }
}

void nrf_gpio_init(void){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    // Enable clocks
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80005b4:	4b3d      	ldr	r3, [pc, #244]	@ (80006ac <nrf_gpio_init+0xfc>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a3c      	ldr	r2, [pc, #240]	@ (80006ac <nrf_gpio_init+0xfc>)
 80005ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005be:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80005c0:	4b3a      	ldr	r3, [pc, #232]	@ (80006ac <nrf_gpio_init+0xfc>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a39      	ldr	r2, [pc, #228]	@ (80006ac <nrf_gpio_init+0xfc>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <nrf_gpio_init+0xfc>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a36      	ldr	r2, [pc, #216]	@ (80006ac <nrf_gpio_init+0xfc>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6193      	str	r3, [r2, #24]
    
    // SPI1 pins configuration
    // PA5 SCK - Alternate Function Output Push-Pull
    GPIOA->CRL |= GPIO_CRL_MODE5_0 | GPIO_CRL_MODE5_1; 
 80005d8:	4b35      	ldr	r3, [pc, #212]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a34      	ldr	r2, [pc, #208]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005de:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80005e2:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF5_1;                     
 80005e4:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a31      	ldr	r2, [pc, #196]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005ee:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(GPIO_CRL_CNF5_0);
 80005f0:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a2e      	ldr	r2, [pc, #184]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005f6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80005fa:	6013      	str	r3, [r2, #0]
    
    // PA7 MOSI - Alternate Function Output Push-Pull
    GPIOA->CRL |= GPIO_CRL_MODE7_0 | GPIO_CRL_MODE7_1; 
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <nrf_gpio_init+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a2b      	ldr	r2, [pc, #172]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000602:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000606:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF7_1;                     
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <nrf_gpio_init+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <nrf_gpio_init+0x100>)
 800060e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000612:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(GPIO_CRL_CNF7_0);
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a25      	ldr	r2, [pc, #148]	@ (80006b0 <nrf_gpio_init+0x100>)
 800061a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800061e:	6013      	str	r3, [r2, #0]
    
    // PA6 MISO - Input Floating
    GPIOA->CRL &= ~(GPIO_CRL_MODE6_0 | GPIO_CRL_MODE6_1); 
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000626:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800062a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF6_1;                       
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <nrf_gpio_init+0x100>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1f      	ldr	r2, [pc, #124]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000632:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000636:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_CNF6_0);
 8000638:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <nrf_gpio_init+0x100>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1c      	ldr	r2, [pc, #112]	@ (80006b0 <nrf_gpio_init+0x100>)
 800063e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000642:	6013      	str	r3, [r2, #0]
    
    // NRF24L01 control pins
    // CE pin (PB0) - Output Push-Pull
    GPIOB->CRL &= ~(0xF << (4 * 0));
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <nrf_gpio_init+0x104>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1a      	ldr	r2, [pc, #104]	@ (80006b4 <nrf_gpio_init+0x104>)
 800064a:	f023 030f 	bic.w	r3, r3, #15
 800064e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (0x3 << (4 * 0));
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <nrf_gpio_init+0x104>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	@ (80006b4 <nrf_gpio_init+0x104>)
 8000656:	f043 0303 	orr.w	r3, r3, #3
 800065a:	6013      	str	r3, [r2, #0]
    
    // CSN pin (PA1) - Output Push-Pull  
    GPIOA->CRL &= ~(0xF << (4 * 1));
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <nrf_gpio_init+0x100>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000666:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x3 << (4 * 1));
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <nrf_gpio_init+0x100>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a10      	ldr	r2, [pc, #64]	@ (80006b0 <nrf_gpio_init+0x100>)
 800066e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000672:	6013      	str	r3, [r2, #0]
    
    // IRQ pin (PA2) - Input Pull-up
    GPIOA->CRL &= ~(0xF << (4 * 2));
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <nrf_gpio_init+0x100>)
 800067a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800067e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8 << (4 * 2));
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000686:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800068a:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= NRF_IRQ_PIN;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <nrf_gpio_init+0x100>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <nrf_gpio_init+0x100>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	60d3      	str	r3, [r2, #12]
    
    // Initial states
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <nrf_gpio_init+0x100>)
 800069a:	2202      	movs	r2, #2
 800069c:	611a      	str	r2, [r3, #16]
    NRF_CE_PORT->BRR = NRF_CE_PIN;    // CE low
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <nrf_gpio_init+0x104>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <spi_init>:

// init spi
void spi_init(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    SPI1->CR1 &= ~((1 << 0) | (1 << 1)); // CPOL=0, CPHA=0
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <spi_init+0x70>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <spi_init+0x70>)
 80006c2:	f023 0303 	bic.w	r3, r3, #3
 80006c6:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 2);             // Master Mode
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <spi_init+0x70>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <spi_init+0x70>)
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (2 << 3);             // BR[2:0] = 010: fPCLK/8
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <spi_init+0x70>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a13      	ldr	r2, [pc, #76]	@ (8000728 <spi_init+0x70>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 7);            // MSB first
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <spi_init+0x70>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a10      	ldr	r2, [pc, #64]	@ (8000728 <spi_init+0x70>)
 80006e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006ea:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 8) | (1 << 9);  // Software Slave Management
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <spi_init+0x70>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <spi_init+0x70>)
 80006f2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80006f6:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 10);           // Full-duplex
 80006f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <spi_init+0x70>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <spi_init+0x70>)
 80006fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000702:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 11);           // 8 bit data
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <spi_init+0x70>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <spi_init+0x70>)
 800070a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800070e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 6);             // Enable SPI
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <spi_init+0x70>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <spi_init+0x70>)
 8000716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071a:	6013      	str	r3, [r2, #0]
    delay_ms(10);
 800071c:	200a      	movs	r0, #10
 800071e:	f7ff ff29 	bl	8000574 <delay_ms>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40013000 	.word	0x40013000

0800072c <spi_transfer>:

// basic spi transfer 
uint8_t spi_transfer(uint8_t data){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));   
 8000736:	bf00      	nop
 8000738:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <spi_transfer+0x3c>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	f003 0302 	and.w	r3, r3, #2
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f9      	beq.n	8000738 <spi_transfer+0xc>
    SPI1->DR = data;
 8000744:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <spi_transfer+0x3c>)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	60d3      	str	r3, [r2, #12]
    while (!(SPI1->SR & SPI_SR_RXNE));  
 800074a:	bf00      	nop
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <spi_transfer+0x3c>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0f9      	beq.n	800074c <spi_transfer+0x20>
    return SPI1->DR;
 8000758:	4b03      	ldr	r3, [pc, #12]	@ (8000768 <spi_transfer+0x3c>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	b2db      	uxtb	r3, r3
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40013000 	.word	0x40013000

0800076c <nrf_write_reg>:

// write in registers
void nrf_write_reg(uint8_t reg, uint8_t value){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    NRF_CSN_PORT->BRR = NRF_CSN_PIN; // CSN low
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <nrf_write_reg+0x40>)
 800077e:	2202      	movs	r2, #2
 8000780:	615a      	str	r2, [r3, #20]
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 031f 	and.w	r3, r3, #31
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ffcb 	bl	800072c <spi_transfer>
    spi_transfer(value);
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffc7 	bl	800072c <spi_transfer>
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high 
 800079e:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <nrf_write_reg+0x40>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	611a      	str	r2, [r3, #16]
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40010800 	.word	0x40010800

080007b0 <nrf_read_reg>:

// read registers
uint8_t nrf_read_reg(uint8_t reg){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
    NRF_CSN_PORT->BRR = NRF_CSN_PIN; // CSN low
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <nrf_read_reg+0x38>)
 80007bc:	2202      	movs	r2, #2
 80007be:	615a      	str	r2, [r3, #20]
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 031f 	and.w	r3, r3, #31
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffaf 	bl	800072c <spi_transfer>
    uint8_t value = spi_transfer(0xFF);
 80007ce:	20ff      	movs	r0, #255	@ 0xff
 80007d0:	f7ff ffac 	bl	800072c <spi_transfer>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <nrf_read_reg+0x38>)
 80007da:	2202      	movs	r2, #2
 80007dc:	611a      	str	r2, [r3, #16]
    return value;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40010800 	.word	0x40010800

080007ec <nrf_write_buf>:

// buffer write
void nrf_write_buf(uint8_t reg, uint8_t *buf, uint8_t len){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
    NRF_CSN_PORT->BRR = NRF_CSN_PIN; // CSN low
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <nrf_write_buf+0x5c>)
 80007fe:	2202      	movs	r2, #2
 8000800:	615a      	str	r2, [r3, #20]
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff8b 	bl	800072c <spi_transfer>
    for (uint8_t i = 0; i < len; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e009      	b.n	8000830 <nrf_write_buf+0x44>
        spi_transfer(buf[i]);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff81 	bl	800072c <spi_transfer>
    for (uint8_t i = 0; i < len; i++) {
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	3301      	adds	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3f1      	bcc.n	800081c <nrf_write_buf+0x30>
    }
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <nrf_write_buf+0x5c>)
 800083a:	2202      	movs	r2, #2
 800083c:	611a      	str	r2, [r3, #16]
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010800 	.word	0x40010800

0800084c <nrf_flush_tx>:
    }
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
}

// FUNÇÃO CORRIGIDA PARA FLUSH
void nrf_flush_tx(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    NRF_CSN_PORT->BRR = NRF_CSN_PIN;
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <nrf_flush_tx+0x1c>)
 8000852:	2202      	movs	r2, #2
 8000854:	615a      	str	r2, [r3, #20]
    spi_transfer(FLUSH_TX);
 8000856:	20e1      	movs	r0, #225	@ 0xe1
 8000858:	f7ff ff68 	bl	800072c <spi_transfer>
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN;
 800085c:	4b02      	ldr	r3, [pc, #8]	@ (8000868 <nrf_flush_tx+0x1c>)
 800085e:	2202      	movs	r2, #2
 8000860:	611a      	str	r2, [r3, #16]
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010800 	.word	0x40010800

0800086c <nrf_flush_rx>:

void nrf_flush_rx(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    NRF_CSN_PORT->BRR = NRF_CSN_PIN;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <nrf_flush_rx+0x1c>)
 8000872:	2202      	movs	r2, #2
 8000874:	615a      	str	r2, [r3, #20]
    spi_transfer(FLUSH_RX);
 8000876:	20e2      	movs	r0, #226	@ 0xe2
 8000878:	f7ff ff58 	bl	800072c <spi_transfer>
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN;
 800087c:	4b02      	ldr	r3, [pc, #8]	@ (8000888 <nrf_flush_rx+0x1c>)
 800087e:	2202      	movs	r2, #2
 8000880:	611a      	str	r2, [r3, #16]
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010800 	.word	0x40010800

0800088c <nrf_init>:

// init module
void nrf_init(uint8_t mode){
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
    nrf_gpio_init();
 8000896:	f7ff fe8b 	bl	80005b0 <nrf_gpio_init>
    spi_init();
 800089a:	f7ff ff0d 	bl	80006b8 <spi_init>
    
    // power down and wait
    nrf_write_reg(CONFIG, 0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ff63 	bl	800076c <nrf_write_reg>
    delay_ms(5);
 80008a6:	2005      	movs	r0, #5
 80008a8:	f7ff fe64 	bl	8000574 <delay_ms>
    
    // basic setup
    nrf_write_reg(EN_AA, ENAA_P0);       
 80008ac:	2101      	movs	r1, #1
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff ff5c 	bl	800076c <nrf_write_reg>
    nrf_write_reg(EN_RXADDR, ERX_P0);    
 80008b4:	2101      	movs	r1, #1
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff ff58 	bl	800076c <nrf_write_reg>
    nrf_write_reg(SETUP_AW, AW_5BYTES);  
 80008bc:	2103      	movs	r1, #3
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff ff54 	bl	800076c <nrf_write_reg>
    nrf_write_reg(SETUP_RETR, (ARD_250US<<4) | ARC_15RET); 
 80008c4:	210f      	movs	r1, #15
 80008c6:	2004      	movs	r0, #4
 80008c8:	f7ff ff50 	bl	800076c <nrf_write_reg>
    nrf_write_reg(RF_CH, RF_CH_10);      
 80008cc:	210a      	movs	r1, #10
 80008ce:	2005      	movs	r0, #5
 80008d0:	f7ff ff4c 	bl	800076c <nrf_write_reg>
    nrf_write_reg(RF_SETUP, RF_DR_2MBPS | RF_PWR_0DBM); 
 80008d4:	210e      	movs	r1, #14
 80008d6:	2006      	movs	r0, #6
 80008d8:	f7ff ff48 	bl	800076c <nrf_write_reg>
    
    // enable CRC (2 bytes)
    uint8_t config = EN_CRC | CRCO;
 80008dc:	230c      	movs	r3, #12
 80008de:	75fb      	strb	r3, [r7, #23]
    nrf_write_reg(CONFIG, config);
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	4619      	mov	r1, r3
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff41 	bl	800076c <nrf_write_reg>
    
    // default addresses
    uint8_t tx_addr[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80008ea:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <nrf_init+0xfc>)
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f4:	6018      	str	r0, [r3, #0]
 80008f6:	3304      	adds	r3, #4
 80008f8:	7019      	strb	r1, [r3, #0]
    uint8_t rx_addr[5] = {0xD7, 0xD7, 0xD7, 0xD7, 0xD7};
 80008fa:	4a24      	ldr	r2, [pc, #144]	@ (800098c <nrf_init+0x100>)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000904:	6018      	str	r0, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	7019      	strb	r1, [r3, #0]
    
    nrf_set_tx_addr(tx_addr, 5);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2105      	movs	r1, #5
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f877 	bl	8000a04 <nrf_set_tx_addr>
    nrf_set_rx_addr(0, rx_addr, 5);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2205      	movs	r2, #5
 800091c:	4619      	mov	r1, r3
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f880 	bl	8000a24 <nrf_set_rx_addr>
    
    // payload length
    nrf_write_reg(RX_PW_P0, 32);
 8000924:	2120      	movs	r1, #32
 8000926:	2011      	movs	r0, #17
 8000928:	f7ff ff20 	bl	800076c <nrf_write_reg>
    
    // enable features
    nrf_write_reg(FEATURE, EN_DPL | EN_ACK_PAY);
 800092c:	2106      	movs	r1, #6
 800092e:	201d      	movs	r0, #29
 8000930:	f7ff ff1c 	bl	800076c <nrf_write_reg>
    nrf_write_reg(DYNPD, (1<<DPL_P0));
 8000934:	2102      	movs	r1, #2
 8000936:	201c      	movs	r0, #28
 8000938:	f7ff ff18 	bl	800076c <nrf_write_reg>
    
    // clear FIFOs and status - CORRIGIDO
    nrf_flush_tx();
 800093c:	f7ff ff86 	bl	800084c <nrf_flush_tx>
    nrf_flush_rx();
 8000940:	f7ff ff94 	bl	800086c <nrf_flush_rx>
    nrf_write_reg(STATUS, RX_DR | TX_DS | MAX_RT);
 8000944:	2170      	movs	r1, #112	@ 0x70
 8000946:	2007      	movs	r0, #7
 8000948:	f7ff ff10 	bl	800076c <nrf_write_reg>
    
    // setup mode
    if (mode == NRF_MODE_TX) {
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d108      	bne.n	8000964 <nrf_init+0xd8>
        nrf_write_reg(CONFIG, config | PWR_UP);
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4619      	mov	r1, r3
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff ff05 	bl	800076c <nrf_write_reg>
 8000962:	e00a      	b.n	800097a <nrf_init+0xee>
    } else {
        nrf_write_reg(CONFIG, config | PWR_UP | PRIM_RX);
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	f043 0303 	orr.w	r3, r3, #3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fefc 	bl	800076c <nrf_write_reg>
        NRF_CE_PORT->BSRR = NRF_CE_PIN; // start receive
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <nrf_init+0x104>)
 8000976:	2201      	movs	r2, #1
 8000978:	611a      	str	r2, [r3, #16]
    }
    delay_ms(5);
 800097a:	2005      	movs	r0, #5
 800097c:	f7ff fdfa 	bl	8000574 <delay_ms>
}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	080021e8 	.word	0x080021e8
 800098c:	080021f0 	.word	0x080021f0
 8000990:	40010c00 	.word	0x40010c00

08000994 <nrf_receive>:
    
    return (status & TX_DS) ? 1 : 0;
}

// data reception
uint8_t nrf_receive(uint8_t *data, uint8_t len){
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
    uint8_t status = nrf_read_reg(STATUS);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f7ff ff05 	bl	80007b0 <nrf_read_reg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73bb      	strb	r3, [r7, #14]
    
    if (status & RX_DR) {
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d020      	beq.n	80009f6 <nrf_receive+0x62>
        NRF_CSN_PORT->BRR = NRF_CSN_PIN;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <nrf_receive+0x6c>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	615a      	str	r2, [r3, #20]
        spi_transfer(R_RX_PAYLOAD);
 80009ba:	2061      	movs	r0, #97	@ 0x61
 80009bc:	f7ff feb6 	bl	800072c <spi_transfer>
        for (uint8_t i = 0; i < len; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e00a      	b.n	80009dc <nrf_receive+0x48>
            data[i] = spi_transfer(0xFF);
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	18d4      	adds	r4, r2, r3
 80009cc:	20ff      	movs	r0, #255	@ 0xff
 80009ce:	f7ff fead 	bl	800072c <spi_transfer>
 80009d2:	4603      	mov	r3, r0
 80009d4:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < len; i++) {
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfa      	ldrb	r2, [r7, #15]
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3f0      	bcc.n	80009c6 <nrf_receive+0x32>
        }
        NRF_CSN_PORT->BSRR = NRF_CSN_PIN;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <nrf_receive+0x6c>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	611a      	str	r2, [r3, #16]
        
        nrf_write_reg(STATUS, RX_DR);
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	2007      	movs	r0, #7
 80009ee:	f7ff febd 	bl	800076c <nrf_write_reg>
        return 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <nrf_receive+0x64>
    }
    return 0;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40010800 	.word	0x40010800

08000a04 <nrf_set_tx_addr>:

// setup transmission address
void nrf_set_tx_addr(uint8_t *addr, uint8_t len){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
    nrf_write_buf(TX_ADDR, addr, len);
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	461a      	mov	r2, r3
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	2010      	movs	r0, #16
 8000a18:	f7ff fee8 	bl	80007ec <nrf_write_buf>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <nrf_set_rx_addr>:

// setup reception address - CORRIGIDO
void nrf_set_rx_addr(uint8_t pipe, uint8_t *addr, uint8_t len){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
    if (pipe == 0) {
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d106      	bne.n	8000a48 <nrf_set_rx_addr+0x24>
        nrf_write_buf(RX_ADDR_P0, addr, len);
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	200a      	movs	r0, #10
 8000a42:	f7ff fed3 	bl	80007ec <nrf_write_buf>
        nrf_write_buf(RX_ADDR_P1, addr, len);
    } else if (pipe >= 2 && pipe <= 5) {
        // pipes 2-5 use only LSB
        nrf_write_reg(RX_ADDR_P2 + (pipe-2), addr[0]);
    }
}
 8000a46:	e018      	b.n	8000a7a <nrf_set_rx_addr+0x56>
    } else if (pipe == 1) {
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d106      	bne.n	8000a5c <nrf_set_rx_addr+0x38>
        nrf_write_buf(RX_ADDR_P1, addr, len);
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	461a      	mov	r2, r3
 8000a52:	6839      	ldr	r1, [r7, #0]
 8000a54:	200b      	movs	r0, #11
 8000a56:	f7ff fec9 	bl	80007ec <nrf_write_buf>
}
 8000a5a:	e00e      	b.n	8000a7a <nrf_set_rx_addr+0x56>
    } else if (pipe >= 2 && pipe <= 5) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d90b      	bls.n	8000a7a <nrf_set_rx_addr+0x56>
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d808      	bhi.n	8000a7a <nrf_set_rx_addr+0x56>
        nrf_write_reg(RX_ADDR_P2 + (pipe-2), addr[0]);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	330a      	adds	r3, #10
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4610      	mov	r0, r2
 8000a76:	f7ff fe79 	bl	800076c <nrf_write_reg>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <nrf_data_available>:
    uint8_t config = nrf_read_reg(CONFIG);
    nrf_write_reg(CONFIG, config & ~PWR_UP);
}

// status functions
uint8_t nrf_data_available(void){
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
    uint8_t status = nrf_read_reg(STATUS);
 8000a88:	2007      	movs	r0, #7
 8000a8a:	f7ff fe91 	bl	80007b0 <nrf_read_reg>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
    return (status & RX_DR);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a98:	b2db      	uxtb	r3, r3
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e00a      	b.n	8000aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab4:	f3af 8000 	nop.w
 8000ab8:	4601      	mov	r1, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	60ba      	str	r2, [r7, #8]
 8000ac0:	b2ca      	uxtb	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	dbf0      	blt.n	8000ab4 <_read+0x12>
  }

  return len;
 8000ad2:	687b      	ldr	r3, [r7, #4]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e009      	b.n	8000b02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	60ba      	str	r2, [r7, #8]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f8bc 	bl	8000c74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbf1      	blt.n	8000aee <_write+0x12>
  }
  return len;
 8000b0a:	687b      	ldr	r3, [r7, #4]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_close>:

int _close(int file)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <_isatty>:

int _isatty(int file)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f000 fb18 	bl	80011d8 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20005000 	.word	0x20005000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	20000078 	.word	0x20000078
 8000bdc:	200001c8 	.word	0x200001c8

08000be0 <USART1_Init>:
#include "uart.h"

void USART1_Init(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN;
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <USART1_Init+0x5c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <USART1_Init+0x5c>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]

    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <USART1_Init+0x60>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a11      	ldr	r2, [pc, #68]	@ (8000c40 <USART1_Init+0x60>)
 8000bfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000bfe:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0) | GPIO_CRH_CNF9_1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <USART1_Init+0x60>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4a0e      	ldr	r2, [pc, #56]	@ (8000c40 <USART1_Init+0x60>)
 8000c06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000c0a:	6053      	str	r3, [r2, #4]

    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <USART1_Init+0x60>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <USART1_Init+0x60>)
 8000c12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000c16:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  GPIO_CRH_CNF10_0;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <USART1_Init+0x60>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <USART1_Init+0x60>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c22:	6053      	str	r3, [r2, #4]

    USART1->BRR = 72000000UL / 9600UL;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <USART1_Init+0x64>)
 8000c26:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8000c2a:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <USART1_Init+0x64>)
 8000c2e:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000c32:	60da      	str	r2, [r3, #12]
}   
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40013800 	.word	0x40013800

08000c48 <USART1_SendChar>:
    while (!(USART1->SR & USART_SR_RXNE));
    return (char)USART1->DR;
}

void USART1_SendChar(char c)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 8000c52:	bf00      	nop
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <USART1_SendChar+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f9      	beq.n	8000c54 <USART1_SendChar+0xc>
    USART1->DR = (uint16_t)c;
 8000c60:	4a03      	ldr	r2, [pc, #12]	@ (8000c70 <USART1_SendChar+0x28>)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	6053      	str	r3, [r2, #4]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40013800 	.word	0x40013800

08000c74 <__io_putchar>:

int __io_putchar(int ch)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    USART1_SendChar((char)ch);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffe1 	bl	8000c48 <USART1_SendChar>
    return ch;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cbe:	f000 fa91 	bl	80011e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff fc0f 	bl	80004e4 <main>

08000cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd4:	08002230 	.word	0x08002230
  ldr r2, =_sbss
 8000cd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cdc:	200001c8 	.word	0x200001c8

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <std>:
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	b510      	push	{r4, lr}
 8000ce8:	4604      	mov	r4, r0
 8000cea:	e9c0 3300 	strd	r3, r3, [r0]
 8000cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cf2:	6083      	str	r3, [r0, #8]
 8000cf4:	8181      	strh	r1, [r0, #12]
 8000cf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000cf8:	81c2      	strh	r2, [r0, #14]
 8000cfa:	6183      	str	r3, [r0, #24]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2208      	movs	r2, #8
 8000d00:	305c      	adds	r0, #92	@ 0x5c
 8000d02:	f000 fa1b 	bl	800113c <memset>
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <std+0x58>)
 8000d08:	6224      	str	r4, [r4, #32]
 8000d0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <std+0x5c>)
 8000d0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <std+0x60>)
 8000d12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <std+0x64>)
 8000d16:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <std+0x68>)
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	d006      	beq.n	8000d2c <std+0x48>
 8000d1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d22:	4294      	cmp	r4, r2
 8000d24:	d002      	beq.n	8000d2c <std+0x48>
 8000d26:	33d0      	adds	r3, #208	@ 0xd0
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d105      	bne.n	8000d38 <std+0x54>
 8000d2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d34:	f000 ba7a 	b.w	800122c <__retarget_lock_init_recursive>
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08000f8d 	.word	0x08000f8d
 8000d40:	08000faf 	.word	0x08000faf
 8000d44:	08000fe7 	.word	0x08000fe7
 8000d48:	0800100b 	.word	0x0800100b
 8000d4c:	2000007c 	.word	0x2000007c

08000d50 <stdio_exit_handler>:
 8000d50:	4a02      	ldr	r2, [pc, #8]	@ (8000d5c <stdio_exit_handler+0xc>)
 8000d52:	4903      	ldr	r1, [pc, #12]	@ (8000d60 <stdio_exit_handler+0x10>)
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <stdio_exit_handler+0x14>)
 8000d56:	f000 b869 	b.w	8000e2c <_fwalk_sglue>
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	08001d71 	.word	0x08001d71
 8000d64:	20000010 	.word	0x20000010

08000d68 <cleanup_stdio>:
 8000d68:	6841      	ldr	r1, [r0, #4]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <cleanup_stdio+0x34>)
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	4604      	mov	r4, r0
 8000d72:	d001      	beq.n	8000d78 <cleanup_stdio+0x10>
 8000d74:	f000 fffc 	bl	8001d70 <_fflush_r>
 8000d78:	68a1      	ldr	r1, [r4, #8]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <cleanup_stdio+0x38>)
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d002      	beq.n	8000d86 <cleanup_stdio+0x1e>
 8000d80:	4620      	mov	r0, r4
 8000d82:	f000 fff5 	bl	8001d70 <_fflush_r>
 8000d86:	68e1      	ldr	r1, [r4, #12]
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <cleanup_stdio+0x3c>)
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d004      	beq.n	8000d98 <cleanup_stdio+0x30>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d94:	f000 bfec 	b.w	8001d70 <_fflush_r>
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000007c 	.word	0x2000007c
 8000da0:	200000e4 	.word	0x200000e4
 8000da4:	2000014c 	.word	0x2000014c

08000da8 <global_stdio_init.part.0>:
 8000da8:	b510      	push	{r4, lr}
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <global_stdio_init.part.0+0x30>)
 8000dac:	4c0b      	ldr	r4, [pc, #44]	@ (8000ddc <global_stdio_init.part.0+0x34>)
 8000dae:	4a0c      	ldr	r2, [pc, #48]	@ (8000de0 <global_stdio_init.part.0+0x38>)
 8000db0:	4620      	mov	r0, r4
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	2104      	movs	r1, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff ff94 	bl	8000ce4 <std>
 8000dbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2109      	movs	r1, #9
 8000dc4:	f7ff ff8e 	bl	8000ce4 <std>
 8000dc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000dcc:	2202      	movs	r2, #2
 8000dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dd2:	2112      	movs	r1, #18
 8000dd4:	f7ff bf86 	b.w	8000ce4 <std>
 8000dd8:	200001b4 	.word	0x200001b4
 8000ddc:	2000007c 	.word	0x2000007c
 8000de0:	08000d51 	.word	0x08000d51

08000de4 <__sfp_lock_acquire>:
 8000de4:	4801      	ldr	r0, [pc, #4]	@ (8000dec <__sfp_lock_acquire+0x8>)
 8000de6:	f000 ba22 	b.w	800122e <__retarget_lock_acquire_recursive>
 8000dea:	bf00      	nop
 8000dec:	200001bd 	.word	0x200001bd

08000df0 <__sfp_lock_release>:
 8000df0:	4801      	ldr	r0, [pc, #4]	@ (8000df8 <__sfp_lock_release+0x8>)
 8000df2:	f000 ba1d 	b.w	8001230 <__retarget_lock_release_recursive>
 8000df6:	bf00      	nop
 8000df8:	200001bd 	.word	0x200001bd

08000dfc <__sinit>:
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	4604      	mov	r4, r0
 8000e00:	f7ff fff0 	bl	8000de4 <__sfp_lock_acquire>
 8000e04:	6a23      	ldr	r3, [r4, #32]
 8000e06:	b11b      	cbz	r3, 8000e10 <__sinit+0x14>
 8000e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e0c:	f7ff bff0 	b.w	8000df0 <__sfp_lock_release>
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__sinit+0x28>)
 8000e12:	6223      	str	r3, [r4, #32]
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__sinit+0x2c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f5      	bne.n	8000e08 <__sinit+0xc>
 8000e1c:	f7ff ffc4 	bl	8000da8 <global_stdio_init.part.0>
 8000e20:	e7f2      	b.n	8000e08 <__sinit+0xc>
 8000e22:	bf00      	nop
 8000e24:	08000d69 	.word	0x08000d69
 8000e28:	200001b4 	.word	0x200001b4

08000e2c <_fwalk_sglue>:
 8000e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e30:	4607      	mov	r7, r0
 8000e32:	4688      	mov	r8, r1
 8000e34:	4614      	mov	r4, r2
 8000e36:	2600      	movs	r6, #0
 8000e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8000e40:	d505      	bpl.n	8000e4e <_fwalk_sglue+0x22>
 8000e42:	6824      	ldr	r4, [r4, #0]
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d1f7      	bne.n	8000e38 <_fwalk_sglue+0xc>
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e4e:	89ab      	ldrh	r3, [r5, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d907      	bls.n	8000e64 <_fwalk_sglue+0x38>
 8000e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	d003      	beq.n	8000e64 <_fwalk_sglue+0x38>
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	4638      	mov	r0, r7
 8000e60:	47c0      	blx	r8
 8000e62:	4306      	orrs	r6, r0
 8000e64:	3568      	adds	r5, #104	@ 0x68
 8000e66:	e7e9      	b.n	8000e3c <_fwalk_sglue+0x10>

08000e68 <iprintf>:
 8000e68:	b40f      	push	{r0, r1, r2, r3}
 8000e6a:	b507      	push	{r0, r1, r2, lr}
 8000e6c:	4906      	ldr	r1, [pc, #24]	@ (8000e88 <iprintf+0x20>)
 8000e6e:	ab04      	add	r3, sp, #16
 8000e70:	6808      	ldr	r0, [r1, #0]
 8000e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e76:	6881      	ldr	r1, [r0, #8]
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f000 fc51 	bl	8001720 <_vfiprintf_r>
 8000e7e:	b003      	add	sp, #12
 8000e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e84:	b004      	add	sp, #16
 8000e86:	4770      	bx	lr
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <_puts_r>:
 8000e8c:	6a03      	ldr	r3, [r0, #32]
 8000e8e:	b570      	push	{r4, r5, r6, lr}
 8000e90:	4605      	mov	r5, r0
 8000e92:	460e      	mov	r6, r1
 8000e94:	6884      	ldr	r4, [r0, #8]
 8000e96:	b90b      	cbnz	r3, 8000e9c <_puts_r+0x10>
 8000e98:	f7ff ffb0 	bl	8000dfc <__sinit>
 8000e9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e9e:	07db      	lsls	r3, r3, #31
 8000ea0:	d405      	bmi.n	8000eae <_puts_r+0x22>
 8000ea2:	89a3      	ldrh	r3, [r4, #12]
 8000ea4:	0598      	lsls	r0, r3, #22
 8000ea6:	d402      	bmi.n	8000eae <_puts_r+0x22>
 8000ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000eaa:	f000 f9c0 	bl	800122e <__retarget_lock_acquire_recursive>
 8000eae:	89a3      	ldrh	r3, [r4, #12]
 8000eb0:	0719      	lsls	r1, r3, #28
 8000eb2:	d502      	bpl.n	8000eba <_puts_r+0x2e>
 8000eb4:	6923      	ldr	r3, [r4, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d135      	bne.n	8000f26 <_puts_r+0x9a>
 8000eba:	4621      	mov	r1, r4
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	f000 f8e7 	bl	8001090 <__swsetup_r>
 8000ec2:	b380      	cbz	r0, 8000f26 <_puts_r+0x9a>
 8000ec4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000ec8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000eca:	07da      	lsls	r2, r3, #31
 8000ecc:	d405      	bmi.n	8000eda <_puts_r+0x4e>
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	059b      	lsls	r3, r3, #22
 8000ed2:	d402      	bmi.n	8000eda <_puts_r+0x4e>
 8000ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ed6:	f000 f9ab 	bl	8001230 <__retarget_lock_release_recursive>
 8000eda:	4628      	mov	r0, r5
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da04      	bge.n	8000eec <_puts_r+0x60>
 8000ee2:	69a2      	ldr	r2, [r4, #24]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dc17      	bgt.n	8000f18 <_puts_r+0x8c>
 8000ee8:	290a      	cmp	r1, #10
 8000eea:	d015      	beq.n	8000f18 <_puts_r+0x8c>
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	6022      	str	r2, [r4, #0]
 8000ef2:	7019      	strb	r1, [r3, #0]
 8000ef4:	68a3      	ldr	r3, [r4, #8]
 8000ef6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000efa:	3b01      	subs	r3, #1
 8000efc:	60a3      	str	r3, [r4, #8]
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d1ed      	bne.n	8000ede <_puts_r+0x52>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da11      	bge.n	8000f2a <_puts_r+0x9e>
 8000f06:	4622      	mov	r2, r4
 8000f08:	210a      	movs	r1, #10
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f000 f881 	bl	8001012 <__swbuf_r>
 8000f10:	3001      	adds	r0, #1
 8000f12:	d0d7      	beq.n	8000ec4 <_puts_r+0x38>
 8000f14:	250a      	movs	r5, #10
 8000f16:	e7d7      	b.n	8000ec8 <_puts_r+0x3c>
 8000f18:	4622      	mov	r2, r4
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	f000 f879 	bl	8001012 <__swbuf_r>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d1e7      	bne.n	8000ef4 <_puts_r+0x68>
 8000f24:	e7ce      	b.n	8000ec4 <_puts_r+0x38>
 8000f26:	3e01      	subs	r6, #1
 8000f28:	e7e4      	b.n	8000ef4 <_puts_r+0x68>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	6022      	str	r2, [r4, #0]
 8000f30:	220a      	movs	r2, #10
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e7ee      	b.n	8000f14 <_puts_r+0x88>
	...

08000f38 <puts>:
 8000f38:	4b02      	ldr	r3, [pc, #8]	@ (8000f44 <puts+0xc>)
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	f7ff bfa5 	b.w	8000e8c <_puts_r>
 8000f42:	bf00      	nop
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <siprintf>:
 8000f48:	b40e      	push	{r1, r2, r3}
 8000f4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000f4e:	b510      	push	{r4, lr}
 8000f50:	2400      	movs	r4, #0
 8000f52:	b09d      	sub	sp, #116	@ 0x74
 8000f54:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000f56:	9002      	str	r0, [sp, #8]
 8000f58:	9006      	str	r0, [sp, #24]
 8000f5a:	9107      	str	r1, [sp, #28]
 8000f5c:	9104      	str	r1, [sp, #16]
 8000f5e:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <siprintf+0x3c>)
 8000f60:	4909      	ldr	r1, [pc, #36]	@ (8000f88 <siprintf+0x40>)
 8000f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f66:	9105      	str	r1, [sp, #20]
 8000f68:	6800      	ldr	r0, [r0, #0]
 8000f6a:	a902      	add	r1, sp, #8
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000f70:	f000 fab2 	bl	80014d8 <_svfiprintf_r>
 8000f74:	9b02      	ldr	r3, [sp, #8]
 8000f76:	701c      	strb	r4, [r3, #0]
 8000f78:	b01d      	add	sp, #116	@ 0x74
 8000f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f7e:	b003      	add	sp, #12
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	ffff0208 	.word	0xffff0208

08000f8c <__sread>:
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	460c      	mov	r4, r1
 8000f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f94:	f000 f8fc 	bl	8001190 <_read_r>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	bfab      	itete	ge
 8000f9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8000fa0:	181b      	addge	r3, r3, r0
 8000fa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000fa6:	bfac      	ite	ge
 8000fa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000faa:	81a3      	strhlt	r3, [r4, #12]
 8000fac:	bd10      	pop	{r4, pc}

08000fae <__swrite>:
 8000fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb2:	461f      	mov	r7, r3
 8000fb4:	898b      	ldrh	r3, [r1, #12]
 8000fb6:	4605      	mov	r5, r0
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	460c      	mov	r4, r1
 8000fbc:	4616      	mov	r6, r2
 8000fbe:	d505      	bpl.n	8000fcc <__swrite+0x1e>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	f000 f8d0 	bl	800116c <_lseek_r>
 8000fcc:	89a3      	ldrh	r3, [r4, #12]
 8000fce:	4632      	mov	r2, r6
 8000fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fd4:	81a3      	strh	r3, [r4, #12]
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	463b      	mov	r3, r7
 8000fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe2:	f000 b8e7 	b.w	80011b4 <_write_r>

08000fe6 <__sseek>:
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	460c      	mov	r4, r1
 8000fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fee:	f000 f8bd 	bl	800116c <_lseek_r>
 8000ff2:	1c43      	adds	r3, r0, #1
 8000ff4:	89a3      	ldrh	r3, [r4, #12]
 8000ff6:	bf15      	itete	ne
 8000ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001002:	81a3      	strheq	r3, [r4, #12]
 8001004:	bf18      	it	ne
 8001006:	81a3      	strhne	r3, [r4, #12]
 8001008:	bd10      	pop	{r4, pc}

0800100a <__sclose>:
 800100a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800100e:	f000 b89d 	b.w	800114c <_close_r>

08001012 <__swbuf_r>:
 8001012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001014:	460e      	mov	r6, r1
 8001016:	4614      	mov	r4, r2
 8001018:	4605      	mov	r5, r0
 800101a:	b118      	cbz	r0, 8001024 <__swbuf_r+0x12>
 800101c:	6a03      	ldr	r3, [r0, #32]
 800101e:	b90b      	cbnz	r3, 8001024 <__swbuf_r+0x12>
 8001020:	f7ff feec 	bl	8000dfc <__sinit>
 8001024:	69a3      	ldr	r3, [r4, #24]
 8001026:	60a3      	str	r3, [r4, #8]
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	071a      	lsls	r2, r3, #28
 800102c:	d501      	bpl.n	8001032 <__swbuf_r+0x20>
 800102e:	6923      	ldr	r3, [r4, #16]
 8001030:	b943      	cbnz	r3, 8001044 <__swbuf_r+0x32>
 8001032:	4621      	mov	r1, r4
 8001034:	4628      	mov	r0, r5
 8001036:	f000 f82b 	bl	8001090 <__swsetup_r>
 800103a:	b118      	cbz	r0, 8001044 <__swbuf_r+0x32>
 800103c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001040:	4638      	mov	r0, r7
 8001042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	6922      	ldr	r2, [r4, #16]
 8001048:	b2f6      	uxtb	r6, r6
 800104a:	1a98      	subs	r0, r3, r2
 800104c:	6963      	ldr	r3, [r4, #20]
 800104e:	4637      	mov	r7, r6
 8001050:	4283      	cmp	r3, r0
 8001052:	dc05      	bgt.n	8001060 <__swbuf_r+0x4e>
 8001054:	4621      	mov	r1, r4
 8001056:	4628      	mov	r0, r5
 8001058:	f000 fe8a 	bl	8001d70 <_fflush_r>
 800105c:	2800      	cmp	r0, #0
 800105e:	d1ed      	bne.n	800103c <__swbuf_r+0x2a>
 8001060:	68a3      	ldr	r3, [r4, #8]
 8001062:	3b01      	subs	r3, #1
 8001064:	60a3      	str	r3, [r4, #8]
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	6022      	str	r2, [r4, #0]
 800106c:	701e      	strb	r6, [r3, #0]
 800106e:	6962      	ldr	r2, [r4, #20]
 8001070:	1c43      	adds	r3, r0, #1
 8001072:	429a      	cmp	r2, r3
 8001074:	d004      	beq.n	8001080 <__swbuf_r+0x6e>
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	07db      	lsls	r3, r3, #31
 800107a:	d5e1      	bpl.n	8001040 <__swbuf_r+0x2e>
 800107c:	2e0a      	cmp	r6, #10
 800107e:	d1df      	bne.n	8001040 <__swbuf_r+0x2e>
 8001080:	4621      	mov	r1, r4
 8001082:	4628      	mov	r0, r5
 8001084:	f000 fe74 	bl	8001d70 <_fflush_r>
 8001088:	2800      	cmp	r0, #0
 800108a:	d0d9      	beq.n	8001040 <__swbuf_r+0x2e>
 800108c:	e7d6      	b.n	800103c <__swbuf_r+0x2a>
	...

08001090 <__swsetup_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <__swsetup_r+0xa8>)
 8001094:	4605      	mov	r5, r0
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	460c      	mov	r4, r1
 800109a:	b118      	cbz	r0, 80010a4 <__swsetup_r+0x14>
 800109c:	6a03      	ldr	r3, [r0, #32]
 800109e:	b90b      	cbnz	r3, 80010a4 <__swsetup_r+0x14>
 80010a0:	f7ff feac 	bl	8000dfc <__sinit>
 80010a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a8:	0719      	lsls	r1, r3, #28
 80010aa:	d422      	bmi.n	80010f2 <__swsetup_r+0x62>
 80010ac:	06da      	lsls	r2, r3, #27
 80010ae:	d407      	bmi.n	80010c0 <__swsetup_r+0x30>
 80010b0:	2209      	movs	r2, #9
 80010b2:	602a      	str	r2, [r5, #0]
 80010b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010bc:	81a3      	strh	r3, [r4, #12]
 80010be:	e033      	b.n	8001128 <__swsetup_r+0x98>
 80010c0:	0758      	lsls	r0, r3, #29
 80010c2:	d512      	bpl.n	80010ea <__swsetup_r+0x5a>
 80010c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010c6:	b141      	cbz	r1, 80010da <__swsetup_r+0x4a>
 80010c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d002      	beq.n	80010d6 <__swsetup_r+0x46>
 80010d0:	4628      	mov	r0, r5
 80010d2:	f000 f8af 	bl	8001234 <_free_r>
 80010d6:	2300      	movs	r3, #0
 80010d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80010da:	89a3      	ldrh	r3, [r4, #12]
 80010dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80010e0:	81a3      	strh	r3, [r4, #12]
 80010e2:	2300      	movs	r3, #0
 80010e4:	6063      	str	r3, [r4, #4]
 80010e6:	6923      	ldr	r3, [r4, #16]
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	81a3      	strh	r3, [r4, #12]
 80010f2:	6923      	ldr	r3, [r4, #16]
 80010f4:	b94b      	cbnz	r3, 800110a <__swsetup_r+0x7a>
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001100:	d003      	beq.n	800110a <__swsetup_r+0x7a>
 8001102:	4621      	mov	r1, r4
 8001104:	4628      	mov	r0, r5
 8001106:	f000 fe80 	bl	8001e0a <__smakebuf_r>
 800110a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800110e:	f013 0201 	ands.w	r2, r3, #1
 8001112:	d00a      	beq.n	800112a <__swsetup_r+0x9a>
 8001114:	2200      	movs	r2, #0
 8001116:	60a2      	str	r2, [r4, #8]
 8001118:	6962      	ldr	r2, [r4, #20]
 800111a:	4252      	negs	r2, r2
 800111c:	61a2      	str	r2, [r4, #24]
 800111e:	6922      	ldr	r2, [r4, #16]
 8001120:	b942      	cbnz	r2, 8001134 <__swsetup_r+0xa4>
 8001122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001126:	d1c5      	bne.n	80010b4 <__swsetup_r+0x24>
 8001128:	bd38      	pop	{r3, r4, r5, pc}
 800112a:	0799      	lsls	r1, r3, #30
 800112c:	bf58      	it	pl
 800112e:	6962      	ldrpl	r2, [r4, #20]
 8001130:	60a2      	str	r2, [r4, #8]
 8001132:	e7f4      	b.n	800111e <__swsetup_r+0x8e>
 8001134:	2000      	movs	r0, #0
 8001136:	e7f7      	b.n	8001128 <__swsetup_r+0x98>
 8001138:	2000000c 	.word	0x2000000c

0800113c <memset>:
 800113c:	4603      	mov	r3, r0
 800113e:	4402      	add	r2, r0
 8001140:	4293      	cmp	r3, r2
 8001142:	d100      	bne.n	8001146 <memset+0xa>
 8001144:	4770      	bx	lr
 8001146:	f803 1b01 	strb.w	r1, [r3], #1
 800114a:	e7f9      	b.n	8001140 <memset+0x4>

0800114c <_close_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	2300      	movs	r3, #0
 8001150:	4d05      	ldr	r5, [pc, #20]	@ (8001168 <_close_r+0x1c>)
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	602b      	str	r3, [r5, #0]
 8001158:	f7ff fcdc 	bl	8000b14 <_close>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_close_r+0x1a>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	b103      	cbz	r3, 8001166 <_close_r+0x1a>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	200001b8 	.word	0x200001b8

0800116c <_lseek_r>:
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	2200      	movs	r2, #0
 8001176:	4d05      	ldr	r5, [pc, #20]	@ (800118c <_lseek_r+0x20>)
 8001178:	602a      	str	r2, [r5, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	f7ff fcee 	bl	8000b5c <_lseek>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_lseek_r+0x1e>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_lseek_r+0x1e>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	200001b8 	.word	0x200001b8

08001190 <_read_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	2200      	movs	r2, #0
 800119a:	4d05      	ldr	r5, [pc, #20]	@ (80011b0 <_read_r+0x20>)
 800119c:	602a      	str	r2, [r5, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	f7ff fc7f 	bl	8000aa2 <_read>
 80011a4:	1c43      	adds	r3, r0, #1
 80011a6:	d102      	bne.n	80011ae <_read_r+0x1e>
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	b103      	cbz	r3, 80011ae <_read_r+0x1e>
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	200001b8 	.word	0x200001b8

080011b4 <_write_r>:
 80011b4:	b538      	push	{r3, r4, r5, lr}
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	2200      	movs	r2, #0
 80011be:	4d05      	ldr	r5, [pc, #20]	@ (80011d4 <_write_r+0x20>)
 80011c0:	602a      	str	r2, [r5, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	f7ff fc8a 	bl	8000adc <_write>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d102      	bne.n	80011d2 <_write_r+0x1e>
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	b103      	cbz	r3, 80011d2 <_write_r+0x1e>
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200001b8 	.word	0x200001b8

080011d8 <__errno>:
 80011d8:	4b01      	ldr	r3, [pc, #4]	@ (80011e0 <__errno+0x8>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <__libc_init_array>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	2600      	movs	r6, #0
 80011e8:	4d0c      	ldr	r5, [pc, #48]	@ (800121c <__libc_init_array+0x38>)
 80011ea:	4c0d      	ldr	r4, [pc, #52]	@ (8001220 <__libc_init_array+0x3c>)
 80011ec:	1b64      	subs	r4, r4, r5
 80011ee:	10a4      	asrs	r4, r4, #2
 80011f0:	42a6      	cmp	r6, r4
 80011f2:	d109      	bne.n	8001208 <__libc_init_array+0x24>
 80011f4:	f000 fee4 	bl	8001fc0 <_init>
 80011f8:	2600      	movs	r6, #0
 80011fa:	4d0a      	ldr	r5, [pc, #40]	@ (8001224 <__libc_init_array+0x40>)
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <__libc_init_array+0x44>)
 80011fe:	1b64      	subs	r4, r4, r5
 8001200:	10a4      	asrs	r4, r4, #2
 8001202:	42a6      	cmp	r6, r4
 8001204:	d105      	bne.n	8001212 <__libc_init_array+0x2e>
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f855 3b04 	ldr.w	r3, [r5], #4
 800120c:	4798      	blx	r3
 800120e:	3601      	adds	r6, #1
 8001210:	e7ee      	b.n	80011f0 <__libc_init_array+0xc>
 8001212:	f855 3b04 	ldr.w	r3, [r5], #4
 8001216:	4798      	blx	r3
 8001218:	3601      	adds	r6, #1
 800121a:	e7f2      	b.n	8001202 <__libc_init_array+0x1e>
 800121c:	08002228 	.word	0x08002228
 8001220:	08002228 	.word	0x08002228
 8001224:	08002228 	.word	0x08002228
 8001228:	0800222c 	.word	0x0800222c

0800122c <__retarget_lock_init_recursive>:
 800122c:	4770      	bx	lr

0800122e <__retarget_lock_acquire_recursive>:
 800122e:	4770      	bx	lr

08001230 <__retarget_lock_release_recursive>:
 8001230:	4770      	bx	lr
	...

08001234 <_free_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4605      	mov	r5, r0
 8001238:	2900      	cmp	r1, #0
 800123a:	d040      	beq.n	80012be <_free_r+0x8a>
 800123c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001240:	1f0c      	subs	r4, r1, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	bfb8      	it	lt
 8001246:	18e4      	addlt	r4, r4, r3
 8001248:	f000 f8de 	bl	8001408 <__malloc_lock>
 800124c:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <_free_r+0x8c>)
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	b933      	cbnz	r3, 8001260 <_free_r+0x2c>
 8001252:	6063      	str	r3, [r4, #4]
 8001254:	6014      	str	r4, [r2, #0]
 8001256:	4628      	mov	r0, r5
 8001258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800125c:	f000 b8da 	b.w	8001414 <__malloc_unlock>
 8001260:	42a3      	cmp	r3, r4
 8001262:	d908      	bls.n	8001276 <_free_r+0x42>
 8001264:	6820      	ldr	r0, [r4, #0]
 8001266:	1821      	adds	r1, r4, r0
 8001268:	428b      	cmp	r3, r1
 800126a:	bf01      	itttt	eq
 800126c:	6819      	ldreq	r1, [r3, #0]
 800126e:	685b      	ldreq	r3, [r3, #4]
 8001270:	1809      	addeq	r1, r1, r0
 8001272:	6021      	streq	r1, [r4, #0]
 8001274:	e7ed      	b.n	8001252 <_free_r+0x1e>
 8001276:	461a      	mov	r2, r3
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	b10b      	cbz	r3, 8001280 <_free_r+0x4c>
 800127c:	42a3      	cmp	r3, r4
 800127e:	d9fa      	bls.n	8001276 <_free_r+0x42>
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	1850      	adds	r0, r2, r1
 8001284:	42a0      	cmp	r0, r4
 8001286:	d10b      	bne.n	80012a0 <_free_r+0x6c>
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	4401      	add	r1, r0
 800128c:	1850      	adds	r0, r2, r1
 800128e:	4283      	cmp	r3, r0
 8001290:	6011      	str	r1, [r2, #0]
 8001292:	d1e0      	bne.n	8001256 <_free_r+0x22>
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4408      	add	r0, r1
 800129a:	6010      	str	r0, [r2, #0]
 800129c:	6053      	str	r3, [r2, #4]
 800129e:	e7da      	b.n	8001256 <_free_r+0x22>
 80012a0:	d902      	bls.n	80012a8 <_free_r+0x74>
 80012a2:	230c      	movs	r3, #12
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	e7d6      	b.n	8001256 <_free_r+0x22>
 80012a8:	6820      	ldr	r0, [r4, #0]
 80012aa:	1821      	adds	r1, r4, r0
 80012ac:	428b      	cmp	r3, r1
 80012ae:	bf01      	itttt	eq
 80012b0:	6819      	ldreq	r1, [r3, #0]
 80012b2:	685b      	ldreq	r3, [r3, #4]
 80012b4:	1809      	addeq	r1, r1, r0
 80012b6:	6021      	streq	r1, [r4, #0]
 80012b8:	6063      	str	r3, [r4, #4]
 80012ba:	6054      	str	r4, [r2, #4]
 80012bc:	e7cb      	b.n	8001256 <_free_r+0x22>
 80012be:	bd38      	pop	{r3, r4, r5, pc}
 80012c0:	200001c4 	.word	0x200001c4

080012c4 <sbrk_aligned>:
 80012c4:	b570      	push	{r4, r5, r6, lr}
 80012c6:	4e0f      	ldr	r6, [pc, #60]	@ (8001304 <sbrk_aligned+0x40>)
 80012c8:	460c      	mov	r4, r1
 80012ca:	6831      	ldr	r1, [r6, #0]
 80012cc:	4605      	mov	r5, r0
 80012ce:	b911      	cbnz	r1, 80012d6 <sbrk_aligned+0x12>
 80012d0:	f000 fe14 	bl	8001efc <_sbrk_r>
 80012d4:	6030      	str	r0, [r6, #0]
 80012d6:	4621      	mov	r1, r4
 80012d8:	4628      	mov	r0, r5
 80012da:	f000 fe0f 	bl	8001efc <_sbrk_r>
 80012de:	1c43      	adds	r3, r0, #1
 80012e0:	d103      	bne.n	80012ea <sbrk_aligned+0x26>
 80012e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80012e6:	4620      	mov	r0, r4
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
 80012ea:	1cc4      	adds	r4, r0, #3
 80012ec:	f024 0403 	bic.w	r4, r4, #3
 80012f0:	42a0      	cmp	r0, r4
 80012f2:	d0f8      	beq.n	80012e6 <sbrk_aligned+0x22>
 80012f4:	1a21      	subs	r1, r4, r0
 80012f6:	4628      	mov	r0, r5
 80012f8:	f000 fe00 	bl	8001efc <_sbrk_r>
 80012fc:	3001      	adds	r0, #1
 80012fe:	d1f2      	bne.n	80012e6 <sbrk_aligned+0x22>
 8001300:	e7ef      	b.n	80012e2 <sbrk_aligned+0x1e>
 8001302:	bf00      	nop
 8001304:	200001c0 	.word	0x200001c0

08001308 <_malloc_r>:
 8001308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800130c:	1ccd      	adds	r5, r1, #3
 800130e:	f025 0503 	bic.w	r5, r5, #3
 8001312:	3508      	adds	r5, #8
 8001314:	2d0c      	cmp	r5, #12
 8001316:	bf38      	it	cc
 8001318:	250c      	movcc	r5, #12
 800131a:	2d00      	cmp	r5, #0
 800131c:	4606      	mov	r6, r0
 800131e:	db01      	blt.n	8001324 <_malloc_r+0x1c>
 8001320:	42a9      	cmp	r1, r5
 8001322:	d904      	bls.n	800132e <_malloc_r+0x26>
 8001324:	230c      	movs	r3, #12
 8001326:	6033      	str	r3, [r6, #0]
 8001328:	2000      	movs	r0, #0
 800132a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800132e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001404 <_malloc_r+0xfc>
 8001332:	f000 f869 	bl	8001408 <__malloc_lock>
 8001336:	f8d8 3000 	ldr.w	r3, [r8]
 800133a:	461c      	mov	r4, r3
 800133c:	bb44      	cbnz	r4, 8001390 <_malloc_r+0x88>
 800133e:	4629      	mov	r1, r5
 8001340:	4630      	mov	r0, r6
 8001342:	f7ff ffbf 	bl	80012c4 <sbrk_aligned>
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	4604      	mov	r4, r0
 800134a:	d158      	bne.n	80013fe <_malloc_r+0xf6>
 800134c:	f8d8 4000 	ldr.w	r4, [r8]
 8001350:	4627      	mov	r7, r4
 8001352:	2f00      	cmp	r7, #0
 8001354:	d143      	bne.n	80013de <_malloc_r+0xd6>
 8001356:	2c00      	cmp	r4, #0
 8001358:	d04b      	beq.n	80013f2 <_malloc_r+0xea>
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	4639      	mov	r1, r7
 800135e:	4630      	mov	r0, r6
 8001360:	eb04 0903 	add.w	r9, r4, r3
 8001364:	f000 fdca 	bl	8001efc <_sbrk_r>
 8001368:	4581      	cmp	r9, r0
 800136a:	d142      	bne.n	80013f2 <_malloc_r+0xea>
 800136c:	6821      	ldr	r1, [r4, #0]
 800136e:	4630      	mov	r0, r6
 8001370:	1a6d      	subs	r5, r5, r1
 8001372:	4629      	mov	r1, r5
 8001374:	f7ff ffa6 	bl	80012c4 <sbrk_aligned>
 8001378:	3001      	adds	r0, #1
 800137a:	d03a      	beq.n	80013f2 <_malloc_r+0xea>
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	442b      	add	r3, r5
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	f8d8 3000 	ldr.w	r3, [r8]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	bb62      	cbnz	r2, 80013e4 <_malloc_r+0xdc>
 800138a:	f8c8 7000 	str.w	r7, [r8]
 800138e:	e00f      	b.n	80013b0 <_malloc_r+0xa8>
 8001390:	6822      	ldr	r2, [r4, #0]
 8001392:	1b52      	subs	r2, r2, r5
 8001394:	d420      	bmi.n	80013d8 <_malloc_r+0xd0>
 8001396:	2a0b      	cmp	r2, #11
 8001398:	d917      	bls.n	80013ca <_malloc_r+0xc2>
 800139a:	1961      	adds	r1, r4, r5
 800139c:	42a3      	cmp	r3, r4
 800139e:	6025      	str	r5, [r4, #0]
 80013a0:	bf18      	it	ne
 80013a2:	6059      	strne	r1, [r3, #4]
 80013a4:	6863      	ldr	r3, [r4, #4]
 80013a6:	bf08      	it	eq
 80013a8:	f8c8 1000 	streq.w	r1, [r8]
 80013ac:	5162      	str	r2, [r4, r5]
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	4630      	mov	r0, r6
 80013b2:	f000 f82f 	bl	8001414 <__malloc_unlock>
 80013b6:	f104 000b 	add.w	r0, r4, #11
 80013ba:	1d23      	adds	r3, r4, #4
 80013bc:	f020 0007 	bic.w	r0, r0, #7
 80013c0:	1ac2      	subs	r2, r0, r3
 80013c2:	bf1c      	itt	ne
 80013c4:	1a1b      	subne	r3, r3, r0
 80013c6:	50a3      	strne	r3, [r4, r2]
 80013c8:	e7af      	b.n	800132a <_malloc_r+0x22>
 80013ca:	6862      	ldr	r2, [r4, #4]
 80013cc:	42a3      	cmp	r3, r4
 80013ce:	bf0c      	ite	eq
 80013d0:	f8c8 2000 	streq.w	r2, [r8]
 80013d4:	605a      	strne	r2, [r3, #4]
 80013d6:	e7eb      	b.n	80013b0 <_malloc_r+0xa8>
 80013d8:	4623      	mov	r3, r4
 80013da:	6864      	ldr	r4, [r4, #4]
 80013dc:	e7ae      	b.n	800133c <_malloc_r+0x34>
 80013de:	463c      	mov	r4, r7
 80013e0:	687f      	ldr	r7, [r7, #4]
 80013e2:	e7b6      	b.n	8001352 <_malloc_r+0x4a>
 80013e4:	461a      	mov	r2, r3
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	42a3      	cmp	r3, r4
 80013ea:	d1fb      	bne.n	80013e4 <_malloc_r+0xdc>
 80013ec:	2300      	movs	r3, #0
 80013ee:	6053      	str	r3, [r2, #4]
 80013f0:	e7de      	b.n	80013b0 <_malloc_r+0xa8>
 80013f2:	230c      	movs	r3, #12
 80013f4:	4630      	mov	r0, r6
 80013f6:	6033      	str	r3, [r6, #0]
 80013f8:	f000 f80c 	bl	8001414 <__malloc_unlock>
 80013fc:	e794      	b.n	8001328 <_malloc_r+0x20>
 80013fe:	6005      	str	r5, [r0, #0]
 8001400:	e7d6      	b.n	80013b0 <_malloc_r+0xa8>
 8001402:	bf00      	nop
 8001404:	200001c4 	.word	0x200001c4

08001408 <__malloc_lock>:
 8001408:	4801      	ldr	r0, [pc, #4]	@ (8001410 <__malloc_lock+0x8>)
 800140a:	f7ff bf10 	b.w	800122e <__retarget_lock_acquire_recursive>
 800140e:	bf00      	nop
 8001410:	200001bc 	.word	0x200001bc

08001414 <__malloc_unlock>:
 8001414:	4801      	ldr	r0, [pc, #4]	@ (800141c <__malloc_unlock+0x8>)
 8001416:	f7ff bf0b 	b.w	8001230 <__retarget_lock_release_recursive>
 800141a:	bf00      	nop
 800141c:	200001bc 	.word	0x200001bc

08001420 <__ssputs_r>:
 8001420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001424:	461f      	mov	r7, r3
 8001426:	688e      	ldr	r6, [r1, #8]
 8001428:	4682      	mov	sl, r0
 800142a:	42be      	cmp	r6, r7
 800142c:	460c      	mov	r4, r1
 800142e:	4690      	mov	r8, r2
 8001430:	680b      	ldr	r3, [r1, #0]
 8001432:	d82d      	bhi.n	8001490 <__ssputs_r+0x70>
 8001434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001438:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800143c:	d026      	beq.n	800148c <__ssputs_r+0x6c>
 800143e:	6965      	ldr	r5, [r4, #20]
 8001440:	6909      	ldr	r1, [r1, #16]
 8001442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001446:	eba3 0901 	sub.w	r9, r3, r1
 800144a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800144e:	1c7b      	adds	r3, r7, #1
 8001450:	444b      	add	r3, r9
 8001452:	106d      	asrs	r5, r5, #1
 8001454:	429d      	cmp	r5, r3
 8001456:	bf38      	it	cc
 8001458:	461d      	movcc	r5, r3
 800145a:	0553      	lsls	r3, r2, #21
 800145c:	d527      	bpl.n	80014ae <__ssputs_r+0x8e>
 800145e:	4629      	mov	r1, r5
 8001460:	f7ff ff52 	bl	8001308 <_malloc_r>
 8001464:	4606      	mov	r6, r0
 8001466:	b360      	cbz	r0, 80014c2 <__ssputs_r+0xa2>
 8001468:	464a      	mov	r2, r9
 800146a:	6921      	ldr	r1, [r4, #16]
 800146c:	f000 fd64 	bl	8001f38 <memcpy>
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	6126      	str	r6, [r4, #16]
 800147e:	444e      	add	r6, r9
 8001480:	6026      	str	r6, [r4, #0]
 8001482:	463e      	mov	r6, r7
 8001484:	6165      	str	r5, [r4, #20]
 8001486:	eba5 0509 	sub.w	r5, r5, r9
 800148a:	60a5      	str	r5, [r4, #8]
 800148c:	42be      	cmp	r6, r7
 800148e:	d900      	bls.n	8001492 <__ssputs_r+0x72>
 8001490:	463e      	mov	r6, r7
 8001492:	4632      	mov	r2, r6
 8001494:	4641      	mov	r1, r8
 8001496:	6820      	ldr	r0, [r4, #0]
 8001498:	f000 fcf3 	bl	8001e82 <memmove>
 800149c:	2000      	movs	r0, #0
 800149e:	68a3      	ldr	r3, [r4, #8]
 80014a0:	1b9b      	subs	r3, r3, r6
 80014a2:	60a3      	str	r3, [r4, #8]
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	4433      	add	r3, r6
 80014a8:	6023      	str	r3, [r4, #0]
 80014aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ae:	462a      	mov	r2, r5
 80014b0:	f000 fd50 	bl	8001f54 <_realloc_r>
 80014b4:	4606      	mov	r6, r0
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1e0      	bne.n	800147c <__ssputs_r+0x5c>
 80014ba:	4650      	mov	r0, sl
 80014bc:	6921      	ldr	r1, [r4, #16]
 80014be:	f7ff feb9 	bl	8001234 <_free_r>
 80014c2:	230c      	movs	r3, #12
 80014c4:	f8ca 3000 	str.w	r3, [sl]
 80014c8:	89a3      	ldrh	r3, [r4, #12]
 80014ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d2:	81a3      	strh	r3, [r4, #12]
 80014d4:	e7e9      	b.n	80014aa <__ssputs_r+0x8a>
	...

080014d8 <_svfiprintf_r>:
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014dc:	4698      	mov	r8, r3
 80014de:	898b      	ldrh	r3, [r1, #12]
 80014e0:	4607      	mov	r7, r0
 80014e2:	061b      	lsls	r3, r3, #24
 80014e4:	460d      	mov	r5, r1
 80014e6:	4614      	mov	r4, r2
 80014e8:	b09d      	sub	sp, #116	@ 0x74
 80014ea:	d510      	bpl.n	800150e <_svfiprintf_r+0x36>
 80014ec:	690b      	ldr	r3, [r1, #16]
 80014ee:	b973      	cbnz	r3, 800150e <_svfiprintf_r+0x36>
 80014f0:	2140      	movs	r1, #64	@ 0x40
 80014f2:	f7ff ff09 	bl	8001308 <_malloc_r>
 80014f6:	6028      	str	r0, [r5, #0]
 80014f8:	6128      	str	r0, [r5, #16]
 80014fa:	b930      	cbnz	r0, 800150a <_svfiprintf_r+0x32>
 80014fc:	230c      	movs	r3, #12
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001504:	b01d      	add	sp, #116	@ 0x74
 8001506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800150a:	2340      	movs	r3, #64	@ 0x40
 800150c:	616b      	str	r3, [r5, #20]
 800150e:	2300      	movs	r3, #0
 8001510:	9309      	str	r3, [sp, #36]	@ 0x24
 8001512:	2320      	movs	r3, #32
 8001514:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001518:	2330      	movs	r3, #48	@ 0x30
 800151a:	f04f 0901 	mov.w	r9, #1
 800151e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001522:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80016bc <_svfiprintf_r+0x1e4>
 8001526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800152a:	4623      	mov	r3, r4
 800152c:	469a      	mov	sl, r3
 800152e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001532:	b10a      	cbz	r2, 8001538 <_svfiprintf_r+0x60>
 8001534:	2a25      	cmp	r2, #37	@ 0x25
 8001536:	d1f9      	bne.n	800152c <_svfiprintf_r+0x54>
 8001538:	ebba 0b04 	subs.w	fp, sl, r4
 800153c:	d00b      	beq.n	8001556 <_svfiprintf_r+0x7e>
 800153e:	465b      	mov	r3, fp
 8001540:	4622      	mov	r2, r4
 8001542:	4629      	mov	r1, r5
 8001544:	4638      	mov	r0, r7
 8001546:	f7ff ff6b 	bl	8001420 <__ssputs_r>
 800154a:	3001      	adds	r0, #1
 800154c:	f000 80a7 	beq.w	800169e <_svfiprintf_r+0x1c6>
 8001550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001552:	445a      	add	r2, fp
 8001554:	9209      	str	r2, [sp, #36]	@ 0x24
 8001556:	f89a 3000 	ldrb.w	r3, [sl]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 809f 	beq.w	800169e <_svfiprintf_r+0x1c6>
 8001560:	2300      	movs	r3, #0
 8001562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800156a:	f10a 0a01 	add.w	sl, sl, #1
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	9307      	str	r3, [sp, #28]
 8001572:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001576:	931a      	str	r3, [sp, #104]	@ 0x68
 8001578:	4654      	mov	r4, sl
 800157a:	2205      	movs	r2, #5
 800157c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001580:	484e      	ldr	r0, [pc, #312]	@ (80016bc <_svfiprintf_r+0x1e4>)
 8001582:	f000 fccb 	bl	8001f1c <memchr>
 8001586:	9a04      	ldr	r2, [sp, #16]
 8001588:	b9d8      	cbnz	r0, 80015c2 <_svfiprintf_r+0xea>
 800158a:	06d0      	lsls	r0, r2, #27
 800158c:	bf44      	itt	mi
 800158e:	2320      	movmi	r3, #32
 8001590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001594:	0711      	lsls	r1, r2, #28
 8001596:	bf44      	itt	mi
 8001598:	232b      	movmi	r3, #43	@ 0x2b
 800159a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800159e:	f89a 3000 	ldrb.w	r3, [sl]
 80015a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80015a4:	d015      	beq.n	80015d2 <_svfiprintf_r+0xfa>
 80015a6:	4654      	mov	r4, sl
 80015a8:	2000      	movs	r0, #0
 80015aa:	f04f 0c0a 	mov.w	ip, #10
 80015ae:	9a07      	ldr	r2, [sp, #28]
 80015b0:	4621      	mov	r1, r4
 80015b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015b6:	3b30      	subs	r3, #48	@ 0x30
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d94b      	bls.n	8001654 <_svfiprintf_r+0x17c>
 80015bc:	b1b0      	cbz	r0, 80015ec <_svfiprintf_r+0x114>
 80015be:	9207      	str	r2, [sp, #28]
 80015c0:	e014      	b.n	80015ec <_svfiprintf_r+0x114>
 80015c2:	eba0 0308 	sub.w	r3, r0, r8
 80015c6:	fa09 f303 	lsl.w	r3, r9, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	46a2      	mov	sl, r4
 80015ce:	9304      	str	r3, [sp, #16]
 80015d0:	e7d2      	b.n	8001578 <_svfiprintf_r+0xa0>
 80015d2:	9b03      	ldr	r3, [sp, #12]
 80015d4:	1d19      	adds	r1, r3, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	9103      	str	r1, [sp, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfbb      	ittet	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	f042 0202 	orrlt.w	r2, r2, #2
 80015e4:	9307      	strge	r3, [sp, #28]
 80015e6:	9307      	strlt	r3, [sp, #28]
 80015e8:	bfb8      	it	lt
 80015ea:	9204      	strlt	r2, [sp, #16]
 80015ec:	7823      	ldrb	r3, [r4, #0]
 80015ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80015f0:	d10a      	bne.n	8001608 <_svfiprintf_r+0x130>
 80015f2:	7863      	ldrb	r3, [r4, #1]
 80015f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80015f6:	d132      	bne.n	800165e <_svfiprintf_r+0x186>
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	3402      	adds	r4, #2
 80015fc:	1d1a      	adds	r2, r3, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	9203      	str	r2, [sp, #12]
 8001602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001606:	9305      	str	r3, [sp, #20]
 8001608:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80016c0 <_svfiprintf_r+0x1e8>
 800160c:	2203      	movs	r2, #3
 800160e:	4650      	mov	r0, sl
 8001610:	7821      	ldrb	r1, [r4, #0]
 8001612:	f000 fc83 	bl	8001f1c <memchr>
 8001616:	b138      	cbz	r0, 8001628 <_svfiprintf_r+0x150>
 8001618:	2240      	movs	r2, #64	@ 0x40
 800161a:	9b04      	ldr	r3, [sp, #16]
 800161c:	eba0 000a 	sub.w	r0, r0, sl
 8001620:	4082      	lsls	r2, r0
 8001622:	4313      	orrs	r3, r2
 8001624:	3401      	adds	r4, #1
 8001626:	9304      	str	r3, [sp, #16]
 8001628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800162c:	2206      	movs	r2, #6
 800162e:	4825      	ldr	r0, [pc, #148]	@ (80016c4 <_svfiprintf_r+0x1ec>)
 8001630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001634:	f000 fc72 	bl	8001f1c <memchr>
 8001638:	2800      	cmp	r0, #0
 800163a:	d036      	beq.n	80016aa <_svfiprintf_r+0x1d2>
 800163c:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <_svfiprintf_r+0x1f0>)
 800163e:	bb1b      	cbnz	r3, 8001688 <_svfiprintf_r+0x1b0>
 8001640:	9b03      	ldr	r3, [sp, #12]
 8001642:	3307      	adds	r3, #7
 8001644:	f023 0307 	bic.w	r3, r3, #7
 8001648:	3308      	adds	r3, #8
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800164e:	4433      	add	r3, r6
 8001650:	9309      	str	r3, [sp, #36]	@ 0x24
 8001652:	e76a      	b.n	800152a <_svfiprintf_r+0x52>
 8001654:	460c      	mov	r4, r1
 8001656:	2001      	movs	r0, #1
 8001658:	fb0c 3202 	mla	r2, ip, r2, r3
 800165c:	e7a8      	b.n	80015b0 <_svfiprintf_r+0xd8>
 800165e:	2300      	movs	r3, #0
 8001660:	f04f 0c0a 	mov.w	ip, #10
 8001664:	4619      	mov	r1, r3
 8001666:	3401      	adds	r4, #1
 8001668:	9305      	str	r3, [sp, #20]
 800166a:	4620      	mov	r0, r4
 800166c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001670:	3a30      	subs	r2, #48	@ 0x30
 8001672:	2a09      	cmp	r2, #9
 8001674:	d903      	bls.n	800167e <_svfiprintf_r+0x1a6>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0c6      	beq.n	8001608 <_svfiprintf_r+0x130>
 800167a:	9105      	str	r1, [sp, #20]
 800167c:	e7c4      	b.n	8001608 <_svfiprintf_r+0x130>
 800167e:	4604      	mov	r4, r0
 8001680:	2301      	movs	r3, #1
 8001682:	fb0c 2101 	mla	r1, ip, r1, r2
 8001686:	e7f0      	b.n	800166a <_svfiprintf_r+0x192>
 8001688:	ab03      	add	r3, sp, #12
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	462a      	mov	r2, r5
 800168e:	4638      	mov	r0, r7
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <_svfiprintf_r+0x1f4>)
 8001692:	a904      	add	r1, sp, #16
 8001694:	f3af 8000 	nop.w
 8001698:	1c42      	adds	r2, r0, #1
 800169a:	4606      	mov	r6, r0
 800169c:	d1d6      	bne.n	800164c <_svfiprintf_r+0x174>
 800169e:	89ab      	ldrh	r3, [r5, #12]
 80016a0:	065b      	lsls	r3, r3, #25
 80016a2:	f53f af2d 	bmi.w	8001500 <_svfiprintf_r+0x28>
 80016a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80016a8:	e72c      	b.n	8001504 <_svfiprintf_r+0x2c>
 80016aa:	ab03      	add	r3, sp, #12
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	462a      	mov	r2, r5
 80016b0:	4638      	mov	r0, r7
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <_svfiprintf_r+0x1f4>)
 80016b4:	a904      	add	r1, sp, #16
 80016b6:	f000 f9bd 	bl	8001a34 <_printf_i>
 80016ba:	e7ed      	b.n	8001698 <_svfiprintf_r+0x1c0>
 80016bc:	080021f5 	.word	0x080021f5
 80016c0:	080021fb 	.word	0x080021fb
 80016c4:	080021ff 	.word	0x080021ff
 80016c8:	00000000 	.word	0x00000000
 80016cc:	08001421 	.word	0x08001421

080016d0 <__sfputc_r>:
 80016d0:	6893      	ldr	r3, [r2, #8]
 80016d2:	b410      	push	{r4}
 80016d4:	3b01      	subs	r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	6093      	str	r3, [r2, #8]
 80016da:	da07      	bge.n	80016ec <__sfputc_r+0x1c>
 80016dc:	6994      	ldr	r4, [r2, #24]
 80016de:	42a3      	cmp	r3, r4
 80016e0:	db01      	blt.n	80016e6 <__sfputc_r+0x16>
 80016e2:	290a      	cmp	r1, #10
 80016e4:	d102      	bne.n	80016ec <__sfputc_r+0x1c>
 80016e6:	bc10      	pop	{r4}
 80016e8:	f7ff bc93 	b.w	8001012 <__swbuf_r>
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	1c58      	adds	r0, r3, #1
 80016f0:	6010      	str	r0, [r2, #0]
 80016f2:	7019      	strb	r1, [r3, #0]
 80016f4:	4608      	mov	r0, r1
 80016f6:	bc10      	pop	{r4}
 80016f8:	4770      	bx	lr

080016fa <__sfputs_r>:
 80016fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fc:	4606      	mov	r6, r0
 80016fe:	460f      	mov	r7, r1
 8001700:	4614      	mov	r4, r2
 8001702:	18d5      	adds	r5, r2, r3
 8001704:	42ac      	cmp	r4, r5
 8001706:	d101      	bne.n	800170c <__sfputs_r+0x12>
 8001708:	2000      	movs	r0, #0
 800170a:	e007      	b.n	800171c <__sfputs_r+0x22>
 800170c:	463a      	mov	r2, r7
 800170e:	4630      	mov	r0, r6
 8001710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001714:	f7ff ffdc 	bl	80016d0 <__sfputc_r>
 8001718:	1c43      	adds	r3, r0, #1
 800171a:	d1f3      	bne.n	8001704 <__sfputs_r+0xa>
 800171c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001720 <_vfiprintf_r>:
 8001720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001724:	460d      	mov	r5, r1
 8001726:	4614      	mov	r4, r2
 8001728:	4698      	mov	r8, r3
 800172a:	4606      	mov	r6, r0
 800172c:	b09d      	sub	sp, #116	@ 0x74
 800172e:	b118      	cbz	r0, 8001738 <_vfiprintf_r+0x18>
 8001730:	6a03      	ldr	r3, [r0, #32]
 8001732:	b90b      	cbnz	r3, 8001738 <_vfiprintf_r+0x18>
 8001734:	f7ff fb62 	bl	8000dfc <__sinit>
 8001738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800173a:	07d9      	lsls	r1, r3, #31
 800173c:	d405      	bmi.n	800174a <_vfiprintf_r+0x2a>
 800173e:	89ab      	ldrh	r3, [r5, #12]
 8001740:	059a      	lsls	r2, r3, #22
 8001742:	d402      	bmi.n	800174a <_vfiprintf_r+0x2a>
 8001744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001746:	f7ff fd72 	bl	800122e <__retarget_lock_acquire_recursive>
 800174a:	89ab      	ldrh	r3, [r5, #12]
 800174c:	071b      	lsls	r3, r3, #28
 800174e:	d501      	bpl.n	8001754 <_vfiprintf_r+0x34>
 8001750:	692b      	ldr	r3, [r5, #16]
 8001752:	b99b      	cbnz	r3, 800177c <_vfiprintf_r+0x5c>
 8001754:	4629      	mov	r1, r5
 8001756:	4630      	mov	r0, r6
 8001758:	f7ff fc9a 	bl	8001090 <__swsetup_r>
 800175c:	b170      	cbz	r0, 800177c <_vfiprintf_r+0x5c>
 800175e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001760:	07dc      	lsls	r4, r3, #31
 8001762:	d504      	bpl.n	800176e <_vfiprintf_r+0x4e>
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001768:	b01d      	add	sp, #116	@ 0x74
 800176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176e:	89ab      	ldrh	r3, [r5, #12]
 8001770:	0598      	lsls	r0, r3, #22
 8001772:	d4f7      	bmi.n	8001764 <_vfiprintf_r+0x44>
 8001774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001776:	f7ff fd5b 	bl	8001230 <__retarget_lock_release_recursive>
 800177a:	e7f3      	b.n	8001764 <_vfiprintf_r+0x44>
 800177c:	2300      	movs	r3, #0
 800177e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001780:	2320      	movs	r3, #32
 8001782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001786:	2330      	movs	r3, #48	@ 0x30
 8001788:	f04f 0901 	mov.w	r9, #1
 800178c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001790:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800193c <_vfiprintf_r+0x21c>
 8001794:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001798:	4623      	mov	r3, r4
 800179a:	469a      	mov	sl, r3
 800179c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a0:	b10a      	cbz	r2, 80017a6 <_vfiprintf_r+0x86>
 80017a2:	2a25      	cmp	r2, #37	@ 0x25
 80017a4:	d1f9      	bne.n	800179a <_vfiprintf_r+0x7a>
 80017a6:	ebba 0b04 	subs.w	fp, sl, r4
 80017aa:	d00b      	beq.n	80017c4 <_vfiprintf_r+0xa4>
 80017ac:	465b      	mov	r3, fp
 80017ae:	4622      	mov	r2, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	4630      	mov	r0, r6
 80017b4:	f7ff ffa1 	bl	80016fa <__sfputs_r>
 80017b8:	3001      	adds	r0, #1
 80017ba:	f000 80a7 	beq.w	800190c <_vfiprintf_r+0x1ec>
 80017be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017c0:	445a      	add	r2, fp
 80017c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80017c4:	f89a 3000 	ldrb.w	r3, [sl]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 809f 	beq.w	800190c <_vfiprintf_r+0x1ec>
 80017ce:	2300      	movs	r3, #0
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017d8:	f10a 0a01 	add.w	sl, sl, #1
 80017dc:	9304      	str	r3, [sp, #16]
 80017de:	9307      	str	r3, [sp, #28]
 80017e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80017e6:	4654      	mov	r4, sl
 80017e8:	2205      	movs	r2, #5
 80017ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ee:	4853      	ldr	r0, [pc, #332]	@ (800193c <_vfiprintf_r+0x21c>)
 80017f0:	f000 fb94 	bl	8001f1c <memchr>
 80017f4:	9a04      	ldr	r2, [sp, #16]
 80017f6:	b9d8      	cbnz	r0, 8001830 <_vfiprintf_r+0x110>
 80017f8:	06d1      	lsls	r1, r2, #27
 80017fa:	bf44      	itt	mi
 80017fc:	2320      	movmi	r3, #32
 80017fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001802:	0713      	lsls	r3, r2, #28
 8001804:	bf44      	itt	mi
 8001806:	232b      	movmi	r3, #43	@ 0x2b
 8001808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800180c:	f89a 3000 	ldrb.w	r3, [sl]
 8001810:	2b2a      	cmp	r3, #42	@ 0x2a
 8001812:	d015      	beq.n	8001840 <_vfiprintf_r+0x120>
 8001814:	4654      	mov	r4, sl
 8001816:	2000      	movs	r0, #0
 8001818:	f04f 0c0a 	mov.w	ip, #10
 800181c:	9a07      	ldr	r2, [sp, #28]
 800181e:	4621      	mov	r1, r4
 8001820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001824:	3b30      	subs	r3, #48	@ 0x30
 8001826:	2b09      	cmp	r3, #9
 8001828:	d94b      	bls.n	80018c2 <_vfiprintf_r+0x1a2>
 800182a:	b1b0      	cbz	r0, 800185a <_vfiprintf_r+0x13a>
 800182c:	9207      	str	r2, [sp, #28]
 800182e:	e014      	b.n	800185a <_vfiprintf_r+0x13a>
 8001830:	eba0 0308 	sub.w	r3, r0, r8
 8001834:	fa09 f303 	lsl.w	r3, r9, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	46a2      	mov	sl, r4
 800183c:	9304      	str	r3, [sp, #16]
 800183e:	e7d2      	b.n	80017e6 <_vfiprintf_r+0xc6>
 8001840:	9b03      	ldr	r3, [sp, #12]
 8001842:	1d19      	adds	r1, r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	9103      	str	r1, [sp, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfbb      	ittet	lt
 800184c:	425b      	neglt	r3, r3
 800184e:	f042 0202 	orrlt.w	r2, r2, #2
 8001852:	9307      	strge	r3, [sp, #28]
 8001854:	9307      	strlt	r3, [sp, #28]
 8001856:	bfb8      	it	lt
 8001858:	9204      	strlt	r2, [sp, #16]
 800185a:	7823      	ldrb	r3, [r4, #0]
 800185c:	2b2e      	cmp	r3, #46	@ 0x2e
 800185e:	d10a      	bne.n	8001876 <_vfiprintf_r+0x156>
 8001860:	7863      	ldrb	r3, [r4, #1]
 8001862:	2b2a      	cmp	r3, #42	@ 0x2a
 8001864:	d132      	bne.n	80018cc <_vfiprintf_r+0x1ac>
 8001866:	9b03      	ldr	r3, [sp, #12]
 8001868:	3402      	adds	r4, #2
 800186a:	1d1a      	adds	r2, r3, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	9203      	str	r2, [sp, #12]
 8001870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001940 <_vfiprintf_r+0x220>
 800187a:	2203      	movs	r2, #3
 800187c:	4650      	mov	r0, sl
 800187e:	7821      	ldrb	r1, [r4, #0]
 8001880:	f000 fb4c 	bl	8001f1c <memchr>
 8001884:	b138      	cbz	r0, 8001896 <_vfiprintf_r+0x176>
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	9b04      	ldr	r3, [sp, #16]
 800188a:	eba0 000a 	sub.w	r0, r0, sl
 800188e:	4082      	lsls	r2, r0
 8001890:	4313      	orrs	r3, r2
 8001892:	3401      	adds	r4, #1
 8001894:	9304      	str	r3, [sp, #16]
 8001896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800189a:	2206      	movs	r2, #6
 800189c:	4829      	ldr	r0, [pc, #164]	@ (8001944 <_vfiprintf_r+0x224>)
 800189e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80018a2:	f000 fb3b 	bl	8001f1c <memchr>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d03f      	beq.n	800192a <_vfiprintf_r+0x20a>
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <_vfiprintf_r+0x228>)
 80018ac:	bb1b      	cbnz	r3, 80018f6 <_vfiprintf_r+0x1d6>
 80018ae:	9b03      	ldr	r3, [sp, #12]
 80018b0:	3307      	adds	r3, #7
 80018b2:	f023 0307 	bic.w	r3, r3, #7
 80018b6:	3308      	adds	r3, #8
 80018b8:	9303      	str	r3, [sp, #12]
 80018ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018bc:	443b      	add	r3, r7
 80018be:	9309      	str	r3, [sp, #36]	@ 0x24
 80018c0:	e76a      	b.n	8001798 <_vfiprintf_r+0x78>
 80018c2:	460c      	mov	r4, r1
 80018c4:	2001      	movs	r0, #1
 80018c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80018ca:	e7a8      	b.n	800181e <_vfiprintf_r+0xfe>
 80018cc:	2300      	movs	r3, #0
 80018ce:	f04f 0c0a 	mov.w	ip, #10
 80018d2:	4619      	mov	r1, r3
 80018d4:	3401      	adds	r4, #1
 80018d6:	9305      	str	r3, [sp, #20]
 80018d8:	4620      	mov	r0, r4
 80018da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018de:	3a30      	subs	r2, #48	@ 0x30
 80018e0:	2a09      	cmp	r2, #9
 80018e2:	d903      	bls.n	80018ec <_vfiprintf_r+0x1cc>
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0c6      	beq.n	8001876 <_vfiprintf_r+0x156>
 80018e8:	9105      	str	r1, [sp, #20]
 80018ea:	e7c4      	b.n	8001876 <_vfiprintf_r+0x156>
 80018ec:	4604      	mov	r4, r0
 80018ee:	2301      	movs	r3, #1
 80018f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80018f4:	e7f0      	b.n	80018d8 <_vfiprintf_r+0x1b8>
 80018f6:	ab03      	add	r3, sp, #12
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	462a      	mov	r2, r5
 80018fc:	4630      	mov	r0, r6
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <_vfiprintf_r+0x22c>)
 8001900:	a904      	add	r1, sp, #16
 8001902:	f3af 8000 	nop.w
 8001906:	4607      	mov	r7, r0
 8001908:	1c78      	adds	r0, r7, #1
 800190a:	d1d6      	bne.n	80018ba <_vfiprintf_r+0x19a>
 800190c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800190e:	07d9      	lsls	r1, r3, #31
 8001910:	d405      	bmi.n	800191e <_vfiprintf_r+0x1fe>
 8001912:	89ab      	ldrh	r3, [r5, #12]
 8001914:	059a      	lsls	r2, r3, #22
 8001916:	d402      	bmi.n	800191e <_vfiprintf_r+0x1fe>
 8001918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800191a:	f7ff fc89 	bl	8001230 <__retarget_lock_release_recursive>
 800191e:	89ab      	ldrh	r3, [r5, #12]
 8001920:	065b      	lsls	r3, r3, #25
 8001922:	f53f af1f 	bmi.w	8001764 <_vfiprintf_r+0x44>
 8001926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001928:	e71e      	b.n	8001768 <_vfiprintf_r+0x48>
 800192a:	ab03      	add	r3, sp, #12
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	462a      	mov	r2, r5
 8001930:	4630      	mov	r0, r6
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <_vfiprintf_r+0x22c>)
 8001934:	a904      	add	r1, sp, #16
 8001936:	f000 f87d 	bl	8001a34 <_printf_i>
 800193a:	e7e4      	b.n	8001906 <_vfiprintf_r+0x1e6>
 800193c:	080021f5 	.word	0x080021f5
 8001940:	080021fb 	.word	0x080021fb
 8001944:	080021ff 	.word	0x080021ff
 8001948:	00000000 	.word	0x00000000
 800194c:	080016fb 	.word	0x080016fb

08001950 <_printf_common>:
 8001950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001954:	4616      	mov	r6, r2
 8001956:	4698      	mov	r8, r3
 8001958:	688a      	ldr	r2, [r1, #8]
 800195a:	690b      	ldr	r3, [r1, #16]
 800195c:	4607      	mov	r7, r0
 800195e:	4293      	cmp	r3, r2
 8001960:	bfb8      	it	lt
 8001962:	4613      	movlt	r3, r2
 8001964:	6033      	str	r3, [r6, #0]
 8001966:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800196a:	460c      	mov	r4, r1
 800196c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001970:	b10a      	cbz	r2, 8001976 <_printf_common+0x26>
 8001972:	3301      	adds	r3, #1
 8001974:	6033      	str	r3, [r6, #0]
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	0699      	lsls	r1, r3, #26
 800197a:	bf42      	ittt	mi
 800197c:	6833      	ldrmi	r3, [r6, #0]
 800197e:	3302      	addmi	r3, #2
 8001980:	6033      	strmi	r3, [r6, #0]
 8001982:	6825      	ldr	r5, [r4, #0]
 8001984:	f015 0506 	ands.w	r5, r5, #6
 8001988:	d106      	bne.n	8001998 <_printf_common+0x48>
 800198a:	f104 0a19 	add.w	sl, r4, #25
 800198e:	68e3      	ldr	r3, [r4, #12]
 8001990:	6832      	ldr	r2, [r6, #0]
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	42ab      	cmp	r3, r5
 8001996:	dc2b      	bgt.n	80019f0 <_printf_common+0xa0>
 8001998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	3b00      	subs	r3, #0
 80019a0:	bf18      	it	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	0692      	lsls	r2, r2, #26
 80019a6:	d430      	bmi.n	8001a0a <_printf_common+0xba>
 80019a8:	4641      	mov	r1, r8
 80019aa:	4638      	mov	r0, r7
 80019ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019b0:	47c8      	blx	r9
 80019b2:	3001      	adds	r0, #1
 80019b4:	d023      	beq.n	80019fe <_printf_common+0xae>
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	6922      	ldr	r2, [r4, #16]
 80019ba:	f003 0306 	and.w	r3, r3, #6
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf14      	ite	ne
 80019c2:	2500      	movne	r5, #0
 80019c4:	6833      	ldreq	r3, [r6, #0]
 80019c6:	f04f 0600 	mov.w	r6, #0
 80019ca:	bf08      	it	eq
 80019cc:	68e5      	ldreq	r5, [r4, #12]
 80019ce:	f104 041a 	add.w	r4, r4, #26
 80019d2:	bf08      	it	eq
 80019d4:	1aed      	subeq	r5, r5, r3
 80019d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80019da:	bf08      	it	eq
 80019dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bfc4      	itt	gt
 80019e4:	1a9b      	subgt	r3, r3, r2
 80019e6:	18ed      	addgt	r5, r5, r3
 80019e8:	42b5      	cmp	r5, r6
 80019ea:	d11a      	bne.n	8001a22 <_printf_common+0xd2>
 80019ec:	2000      	movs	r0, #0
 80019ee:	e008      	b.n	8001a02 <_printf_common+0xb2>
 80019f0:	2301      	movs	r3, #1
 80019f2:	4652      	mov	r2, sl
 80019f4:	4641      	mov	r1, r8
 80019f6:	4638      	mov	r0, r7
 80019f8:	47c8      	blx	r9
 80019fa:	3001      	adds	r0, #1
 80019fc:	d103      	bne.n	8001a06 <_printf_common+0xb6>
 80019fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a06:	3501      	adds	r5, #1
 8001a08:	e7c1      	b.n	800198e <_printf_common+0x3e>
 8001a0a:	2030      	movs	r0, #48	@ 0x30
 8001a0c:	18e1      	adds	r1, r4, r3
 8001a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a18:	4422      	add	r2, r4
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a20:	e7c2      	b.n	80019a8 <_printf_common+0x58>
 8001a22:	2301      	movs	r3, #1
 8001a24:	4622      	mov	r2, r4
 8001a26:	4641      	mov	r1, r8
 8001a28:	4638      	mov	r0, r7
 8001a2a:	47c8      	blx	r9
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d0e6      	beq.n	80019fe <_printf_common+0xae>
 8001a30:	3601      	adds	r6, #1
 8001a32:	e7d9      	b.n	80019e8 <_printf_common+0x98>

08001a34 <_printf_i>:
 8001a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a38:	7e0f      	ldrb	r7, [r1, #24]
 8001a3a:	4691      	mov	r9, r2
 8001a3c:	2f78      	cmp	r7, #120	@ 0x78
 8001a3e:	4680      	mov	r8, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	469a      	mov	sl, r3
 8001a44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a4a:	d807      	bhi.n	8001a5c <_printf_i+0x28>
 8001a4c:	2f62      	cmp	r7, #98	@ 0x62
 8001a4e:	d80a      	bhi.n	8001a66 <_printf_i+0x32>
 8001a50:	2f00      	cmp	r7, #0
 8001a52:	f000 80d1 	beq.w	8001bf8 <_printf_i+0x1c4>
 8001a56:	2f58      	cmp	r7, #88	@ 0x58
 8001a58:	f000 80b8 	beq.w	8001bcc <_printf_i+0x198>
 8001a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a64:	e03a      	b.n	8001adc <_printf_i+0xa8>
 8001a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a6a:	2b15      	cmp	r3, #21
 8001a6c:	d8f6      	bhi.n	8001a5c <_printf_i+0x28>
 8001a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8001a74 <_printf_i+0x40>)
 8001a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a74:	08001acd 	.word	0x08001acd
 8001a78:	08001ae1 	.word	0x08001ae1
 8001a7c:	08001a5d 	.word	0x08001a5d
 8001a80:	08001a5d 	.word	0x08001a5d
 8001a84:	08001a5d 	.word	0x08001a5d
 8001a88:	08001a5d 	.word	0x08001a5d
 8001a8c:	08001ae1 	.word	0x08001ae1
 8001a90:	08001a5d 	.word	0x08001a5d
 8001a94:	08001a5d 	.word	0x08001a5d
 8001a98:	08001a5d 	.word	0x08001a5d
 8001a9c:	08001a5d 	.word	0x08001a5d
 8001aa0:	08001bdf 	.word	0x08001bdf
 8001aa4:	08001b0b 	.word	0x08001b0b
 8001aa8:	08001b99 	.word	0x08001b99
 8001aac:	08001a5d 	.word	0x08001a5d
 8001ab0:	08001a5d 	.word	0x08001a5d
 8001ab4:	08001c01 	.word	0x08001c01
 8001ab8:	08001a5d 	.word	0x08001a5d
 8001abc:	08001b0b 	.word	0x08001b0b
 8001ac0:	08001a5d 	.word	0x08001a5d
 8001ac4:	08001a5d 	.word	0x08001a5d
 8001ac8:	08001ba1 	.word	0x08001ba1
 8001acc:	6833      	ldr	r3, [r6, #0]
 8001ace:	1d1a      	adds	r2, r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6032      	str	r2, [r6, #0]
 8001ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001adc:	2301      	movs	r3, #1
 8001ade:	e09c      	b.n	8001c1a <_printf_i+0x1e6>
 8001ae0:	6833      	ldr	r3, [r6, #0]
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	1d19      	adds	r1, r3, #4
 8001ae6:	6031      	str	r1, [r6, #0]
 8001ae8:	0606      	lsls	r6, r0, #24
 8001aea:	d501      	bpl.n	8001af0 <_printf_i+0xbc>
 8001aec:	681d      	ldr	r5, [r3, #0]
 8001aee:	e003      	b.n	8001af8 <_printf_i+0xc4>
 8001af0:	0645      	lsls	r5, r0, #25
 8001af2:	d5fb      	bpl.n	8001aec <_printf_i+0xb8>
 8001af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001af8:	2d00      	cmp	r5, #0
 8001afa:	da03      	bge.n	8001b04 <_printf_i+0xd0>
 8001afc:	232d      	movs	r3, #45	@ 0x2d
 8001afe:	426d      	negs	r5, r5
 8001b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b04:	230a      	movs	r3, #10
 8001b06:	4858      	ldr	r0, [pc, #352]	@ (8001c68 <_printf_i+0x234>)
 8001b08:	e011      	b.n	8001b2e <_printf_i+0xfa>
 8001b0a:	6821      	ldr	r1, [r4, #0]
 8001b0c:	6833      	ldr	r3, [r6, #0]
 8001b0e:	0608      	lsls	r0, r1, #24
 8001b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b14:	d402      	bmi.n	8001b1c <_printf_i+0xe8>
 8001b16:	0649      	lsls	r1, r1, #25
 8001b18:	bf48      	it	mi
 8001b1a:	b2ad      	uxthmi	r5, r5
 8001b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b1e:	6033      	str	r3, [r6, #0]
 8001b20:	bf14      	ite	ne
 8001b22:	230a      	movne	r3, #10
 8001b24:	2308      	moveq	r3, #8
 8001b26:	4850      	ldr	r0, [pc, #320]	@ (8001c68 <_printf_i+0x234>)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b2e:	6866      	ldr	r6, [r4, #4]
 8001b30:	2e00      	cmp	r6, #0
 8001b32:	60a6      	str	r6, [r4, #8]
 8001b34:	db05      	blt.n	8001b42 <_printf_i+0x10e>
 8001b36:	6821      	ldr	r1, [r4, #0]
 8001b38:	432e      	orrs	r6, r5
 8001b3a:	f021 0104 	bic.w	r1, r1, #4
 8001b3e:	6021      	str	r1, [r4, #0]
 8001b40:	d04b      	beq.n	8001bda <_printf_i+0x1a6>
 8001b42:	4616      	mov	r6, r2
 8001b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b48:	fb03 5711 	mls	r7, r3, r1, r5
 8001b4c:	5dc7      	ldrb	r7, [r0, r7]
 8001b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b52:	462f      	mov	r7, r5
 8001b54:	42bb      	cmp	r3, r7
 8001b56:	460d      	mov	r5, r1
 8001b58:	d9f4      	bls.n	8001b44 <_printf_i+0x110>
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d10b      	bne.n	8001b76 <_printf_i+0x142>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	07df      	lsls	r7, r3, #31
 8001b62:	d508      	bpl.n	8001b76 <_printf_i+0x142>
 8001b64:	6923      	ldr	r3, [r4, #16]
 8001b66:	6861      	ldr	r1, [r4, #4]
 8001b68:	4299      	cmp	r1, r3
 8001b6a:	bfde      	ittt	le
 8001b6c:	2330      	movle	r3, #48	@ 0x30
 8001b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001b76:	1b92      	subs	r2, r2, r6
 8001b78:	6122      	str	r2, [r4, #16]
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	4640      	mov	r0, r8
 8001b80:	f8cd a000 	str.w	sl, [sp]
 8001b84:	aa03      	add	r2, sp, #12
 8001b86:	f7ff fee3 	bl	8001950 <_printf_common>
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d14a      	bne.n	8001c24 <_printf_i+0x1f0>
 8001b8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b92:	b004      	add	sp, #16
 8001b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	6023      	str	r3, [r4, #0]
 8001ba0:	2778      	movs	r7, #120	@ 0x78
 8001ba2:	4832      	ldr	r0, [pc, #200]	@ (8001c6c <_printf_i+0x238>)
 8001ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	6831      	ldr	r1, [r6, #0]
 8001bac:	061f      	lsls	r7, r3, #24
 8001bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bb2:	d402      	bmi.n	8001bba <_printf_i+0x186>
 8001bb4:	065f      	lsls	r7, r3, #25
 8001bb6:	bf48      	it	mi
 8001bb8:	b2ad      	uxthmi	r5, r5
 8001bba:	6031      	str	r1, [r6, #0]
 8001bbc:	07d9      	lsls	r1, r3, #31
 8001bbe:	bf44      	itt	mi
 8001bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8001bc4:	6023      	strmi	r3, [r4, #0]
 8001bc6:	b11d      	cbz	r5, 8001bd0 <_printf_i+0x19c>
 8001bc8:	2310      	movs	r3, #16
 8001bca:	e7ad      	b.n	8001b28 <_printf_i+0xf4>
 8001bcc:	4826      	ldr	r0, [pc, #152]	@ (8001c68 <_printf_i+0x234>)
 8001bce:	e7e9      	b.n	8001ba4 <_printf_i+0x170>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	f023 0320 	bic.w	r3, r3, #32
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	e7f6      	b.n	8001bc8 <_printf_i+0x194>
 8001bda:	4616      	mov	r6, r2
 8001bdc:	e7bd      	b.n	8001b5a <_printf_i+0x126>
 8001bde:	6833      	ldr	r3, [r6, #0]
 8001be0:	6825      	ldr	r5, [r4, #0]
 8001be2:	1d18      	adds	r0, r3, #4
 8001be4:	6961      	ldr	r1, [r4, #20]
 8001be6:	6030      	str	r0, [r6, #0]
 8001be8:	062e      	lsls	r6, r5, #24
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	d501      	bpl.n	8001bf2 <_printf_i+0x1be>
 8001bee:	6019      	str	r1, [r3, #0]
 8001bf0:	e002      	b.n	8001bf8 <_printf_i+0x1c4>
 8001bf2:	0668      	lsls	r0, r5, #25
 8001bf4:	d5fb      	bpl.n	8001bee <_printf_i+0x1ba>
 8001bf6:	8019      	strh	r1, [r3, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4616      	mov	r6, r2
 8001bfc:	6123      	str	r3, [r4, #16]
 8001bfe:	e7bc      	b.n	8001b7a <_printf_i+0x146>
 8001c00:	6833      	ldr	r3, [r6, #0]
 8001c02:	2100      	movs	r1, #0
 8001c04:	1d1a      	adds	r2, r3, #4
 8001c06:	6032      	str	r2, [r6, #0]
 8001c08:	681e      	ldr	r6, [r3, #0]
 8001c0a:	6862      	ldr	r2, [r4, #4]
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f000 f985 	bl	8001f1c <memchr>
 8001c12:	b108      	cbz	r0, 8001c18 <_printf_i+0x1e4>
 8001c14:	1b80      	subs	r0, r0, r6
 8001c16:	6060      	str	r0, [r4, #4]
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	6123      	str	r3, [r4, #16]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c22:	e7aa      	b.n	8001b7a <_printf_i+0x146>
 8001c24:	4632      	mov	r2, r6
 8001c26:	4649      	mov	r1, r9
 8001c28:	4640      	mov	r0, r8
 8001c2a:	6923      	ldr	r3, [r4, #16]
 8001c2c:	47d0      	blx	sl
 8001c2e:	3001      	adds	r0, #1
 8001c30:	d0ad      	beq.n	8001b8e <_printf_i+0x15a>
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	079b      	lsls	r3, r3, #30
 8001c36:	d413      	bmi.n	8001c60 <_printf_i+0x22c>
 8001c38:	68e0      	ldr	r0, [r4, #12]
 8001c3a:	9b03      	ldr	r3, [sp, #12]
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	bfb8      	it	lt
 8001c40:	4618      	movlt	r0, r3
 8001c42:	e7a6      	b.n	8001b92 <_printf_i+0x15e>
 8001c44:	2301      	movs	r3, #1
 8001c46:	4632      	mov	r2, r6
 8001c48:	4649      	mov	r1, r9
 8001c4a:	4640      	mov	r0, r8
 8001c4c:	47d0      	blx	sl
 8001c4e:	3001      	adds	r0, #1
 8001c50:	d09d      	beq.n	8001b8e <_printf_i+0x15a>
 8001c52:	3501      	adds	r5, #1
 8001c54:	68e3      	ldr	r3, [r4, #12]
 8001c56:	9903      	ldr	r1, [sp, #12]
 8001c58:	1a5b      	subs	r3, r3, r1
 8001c5a:	42ab      	cmp	r3, r5
 8001c5c:	dcf2      	bgt.n	8001c44 <_printf_i+0x210>
 8001c5e:	e7eb      	b.n	8001c38 <_printf_i+0x204>
 8001c60:	2500      	movs	r5, #0
 8001c62:	f104 0619 	add.w	r6, r4, #25
 8001c66:	e7f5      	b.n	8001c54 <_printf_i+0x220>
 8001c68:	08002206 	.word	0x08002206
 8001c6c:	08002217 	.word	0x08002217

08001c70 <__sflush_r>:
 8001c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	0716      	lsls	r6, r2, #28
 8001c78:	4605      	mov	r5, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	d454      	bmi.n	8001d28 <__sflush_r+0xb8>
 8001c7e:	684b      	ldr	r3, [r1, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dc02      	bgt.n	8001c8a <__sflush_r+0x1a>
 8001c84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	dd48      	ble.n	8001d1c <__sflush_r+0xac>
 8001c8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c8c:	2e00      	cmp	r6, #0
 8001c8e:	d045      	beq.n	8001d1c <__sflush_r+0xac>
 8001c90:	2300      	movs	r3, #0
 8001c92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c96:	682f      	ldr	r7, [r5, #0]
 8001c98:	6a21      	ldr	r1, [r4, #32]
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	d030      	beq.n	8001d00 <__sflush_r+0x90>
 8001c9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ca0:	89a3      	ldrh	r3, [r4, #12]
 8001ca2:	0759      	lsls	r1, r3, #29
 8001ca4:	d505      	bpl.n	8001cb2 <__sflush_r+0x42>
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001cac:	b10b      	cbz	r3, 8001cb2 <__sflush_r+0x42>
 8001cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cb0:	1ad2      	subs	r2, r2, r3
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001cb8:	6a21      	ldr	r1, [r4, #32]
 8001cba:	47b0      	blx	r6
 8001cbc:	1c43      	adds	r3, r0, #1
 8001cbe:	89a3      	ldrh	r3, [r4, #12]
 8001cc0:	d106      	bne.n	8001cd0 <__sflush_r+0x60>
 8001cc2:	6829      	ldr	r1, [r5, #0]
 8001cc4:	291d      	cmp	r1, #29
 8001cc6:	d82b      	bhi.n	8001d20 <__sflush_r+0xb0>
 8001cc8:	4a28      	ldr	r2, [pc, #160]	@ (8001d6c <__sflush_r+0xfc>)
 8001cca:	40ca      	lsrs	r2, r1
 8001ccc:	07d6      	lsls	r6, r2, #31
 8001cce:	d527      	bpl.n	8001d20 <__sflush_r+0xb0>
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6062      	str	r2, [r4, #4]
 8001cd4:	6922      	ldr	r2, [r4, #16]
 8001cd6:	04d9      	lsls	r1, r3, #19
 8001cd8:	6022      	str	r2, [r4, #0]
 8001cda:	d504      	bpl.n	8001ce6 <__sflush_r+0x76>
 8001cdc:	1c42      	adds	r2, r0, #1
 8001cde:	d101      	bne.n	8001ce4 <__sflush_r+0x74>
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	b903      	cbnz	r3, 8001ce6 <__sflush_r+0x76>
 8001ce4:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ce6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ce8:	602f      	str	r7, [r5, #0]
 8001cea:	b1b9      	cbz	r1, 8001d1c <__sflush_r+0xac>
 8001cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cf0:	4299      	cmp	r1, r3
 8001cf2:	d002      	beq.n	8001cfa <__sflush_r+0x8a>
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7ff fa9d 	bl	8001234 <_free_r>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cfe:	e00d      	b.n	8001d1c <__sflush_r+0xac>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4628      	mov	r0, r5
 8001d04:	47b0      	blx	r6
 8001d06:	4602      	mov	r2, r0
 8001d08:	1c50      	adds	r0, r2, #1
 8001d0a:	d1c9      	bne.n	8001ca0 <__sflush_r+0x30>
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0c6      	beq.n	8001ca0 <__sflush_r+0x30>
 8001d12:	2b1d      	cmp	r3, #29
 8001d14:	d001      	beq.n	8001d1a <__sflush_r+0xaa>
 8001d16:	2b16      	cmp	r3, #22
 8001d18:	d11d      	bne.n	8001d56 <__sflush_r+0xe6>
 8001d1a:	602f      	str	r7, [r5, #0]
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	e021      	b.n	8001d64 <__sflush_r+0xf4>
 8001d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	e01a      	b.n	8001d5e <__sflush_r+0xee>
 8001d28:	690f      	ldr	r7, [r1, #16]
 8001d2a:	2f00      	cmp	r7, #0
 8001d2c:	d0f6      	beq.n	8001d1c <__sflush_r+0xac>
 8001d2e:	0793      	lsls	r3, r2, #30
 8001d30:	bf18      	it	ne
 8001d32:	2300      	movne	r3, #0
 8001d34:	680e      	ldr	r6, [r1, #0]
 8001d36:	bf08      	it	eq
 8001d38:	694b      	ldreq	r3, [r1, #20]
 8001d3a:	1bf6      	subs	r6, r6, r7
 8001d3c:	600f      	str	r7, [r1, #0]
 8001d3e:	608b      	str	r3, [r1, #8]
 8001d40:	2e00      	cmp	r6, #0
 8001d42:	ddeb      	ble.n	8001d1c <__sflush_r+0xac>
 8001d44:	4633      	mov	r3, r6
 8001d46:	463a      	mov	r2, r7
 8001d48:	4628      	mov	r0, r5
 8001d4a:	6a21      	ldr	r1, [r4, #32]
 8001d4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001d50:	47e0      	blx	ip
 8001d52:	2800      	cmp	r0, #0
 8001d54:	dc07      	bgt.n	8001d66 <__sflush_r+0xf6>
 8001d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d62:	81a3      	strh	r3, [r4, #12]
 8001d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d66:	4407      	add	r7, r0
 8001d68:	1a36      	subs	r6, r6, r0
 8001d6a:	e7e9      	b.n	8001d40 <__sflush_r+0xd0>
 8001d6c:	20400001 	.word	0x20400001

08001d70 <_fflush_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	690b      	ldr	r3, [r1, #16]
 8001d74:	4605      	mov	r5, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	b913      	cbnz	r3, 8001d80 <_fflush_r+0x10>
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	bd38      	pop	{r3, r4, r5, pc}
 8001d80:	b118      	cbz	r0, 8001d8a <_fflush_r+0x1a>
 8001d82:	6a03      	ldr	r3, [r0, #32]
 8001d84:	b90b      	cbnz	r3, 8001d8a <_fflush_r+0x1a>
 8001d86:	f7ff f839 	bl	8000dfc <__sinit>
 8001d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f3      	beq.n	8001d7a <_fflush_r+0xa>
 8001d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d94:	07d0      	lsls	r0, r2, #31
 8001d96:	d404      	bmi.n	8001da2 <_fflush_r+0x32>
 8001d98:	0599      	lsls	r1, r3, #22
 8001d9a:	d402      	bmi.n	8001da2 <_fflush_r+0x32>
 8001d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d9e:	f7ff fa46 	bl	800122e <__retarget_lock_acquire_recursive>
 8001da2:	4628      	mov	r0, r5
 8001da4:	4621      	mov	r1, r4
 8001da6:	f7ff ff63 	bl	8001c70 <__sflush_r>
 8001daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001dac:	4605      	mov	r5, r0
 8001dae:	07da      	lsls	r2, r3, #31
 8001db0:	d4e4      	bmi.n	8001d7c <_fflush_r+0xc>
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	059b      	lsls	r3, r3, #22
 8001db6:	d4e1      	bmi.n	8001d7c <_fflush_r+0xc>
 8001db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dba:	f7ff fa39 	bl	8001230 <__retarget_lock_release_recursive>
 8001dbe:	e7dd      	b.n	8001d7c <_fflush_r+0xc>

08001dc0 <__swhatbuf_r>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dc8:	4615      	mov	r5, r2
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	461e      	mov	r6, r3
 8001dce:	b096      	sub	sp, #88	@ 0x58
 8001dd0:	da0c      	bge.n	8001dec <__swhatbuf_r+0x2c>
 8001dd2:	89a3      	ldrh	r3, [r4, #12]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001dda:	bf14      	ite	ne
 8001ddc:	2340      	movne	r3, #64	@ 0x40
 8001dde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001de2:	2000      	movs	r0, #0
 8001de4:	6031      	str	r1, [r6, #0]
 8001de6:	602b      	str	r3, [r5, #0]
 8001de8:	b016      	add	sp, #88	@ 0x58
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	466a      	mov	r2, sp
 8001dee:	f000 f863 	bl	8001eb8 <_fstat_r>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	dbed      	blt.n	8001dd2 <__swhatbuf_r+0x12>
 8001df6:	9901      	ldr	r1, [sp, #4]
 8001df8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001dfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e00:	4259      	negs	r1, r3
 8001e02:	4159      	adcs	r1, r3
 8001e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e08:	e7eb      	b.n	8001de2 <__swhatbuf_r+0x22>

08001e0a <__smakebuf_r>:
 8001e0a:	898b      	ldrh	r3, [r1, #12]
 8001e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e0e:	079d      	lsls	r5, r3, #30
 8001e10:	4606      	mov	r6, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	d507      	bpl.n	8001e26 <__smakebuf_r+0x1c>
 8001e16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e1a:	6023      	str	r3, [r4, #0]
 8001e1c:	6123      	str	r3, [r4, #16]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	6163      	str	r3, [r4, #20]
 8001e22:	b003      	add	sp, #12
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e26:	466a      	mov	r2, sp
 8001e28:	ab01      	add	r3, sp, #4
 8001e2a:	f7ff ffc9 	bl	8001dc0 <__swhatbuf_r>
 8001e2e:	9f00      	ldr	r7, [sp, #0]
 8001e30:	4605      	mov	r5, r0
 8001e32:	4639      	mov	r1, r7
 8001e34:	4630      	mov	r0, r6
 8001e36:	f7ff fa67 	bl	8001308 <_malloc_r>
 8001e3a:	b948      	cbnz	r0, 8001e50 <__smakebuf_r+0x46>
 8001e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e40:	059a      	lsls	r2, r3, #22
 8001e42:	d4ee      	bmi.n	8001e22 <__smakebuf_r+0x18>
 8001e44:	f023 0303 	bic.w	r3, r3, #3
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	81a3      	strh	r3, [r4, #12]
 8001e4e:	e7e2      	b.n	8001e16 <__smakebuf_r+0xc>
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5a:	81a3      	strh	r3, [r4, #12]
 8001e5c:	9b01      	ldr	r3, [sp, #4]
 8001e5e:	6020      	str	r0, [r4, #0]
 8001e60:	b15b      	cbz	r3, 8001e7a <__smakebuf_r+0x70>
 8001e62:	4630      	mov	r0, r6
 8001e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e68:	f000 f838 	bl	8001edc <_isatty_r>
 8001e6c:	b128      	cbz	r0, 8001e7a <__smakebuf_r+0x70>
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	f023 0303 	bic.w	r3, r3, #3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	81a3      	strh	r3, [r4, #12]
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	431d      	orrs	r5, r3
 8001e7e:	81a5      	strh	r5, [r4, #12]
 8001e80:	e7cf      	b.n	8001e22 <__smakebuf_r+0x18>

08001e82 <memmove>:
 8001e82:	4288      	cmp	r0, r1
 8001e84:	b510      	push	{r4, lr}
 8001e86:	eb01 0402 	add.w	r4, r1, r2
 8001e8a:	d902      	bls.n	8001e92 <memmove+0x10>
 8001e8c:	4284      	cmp	r4, r0
 8001e8e:	4623      	mov	r3, r4
 8001e90:	d807      	bhi.n	8001ea2 <memmove+0x20>
 8001e92:	1e43      	subs	r3, r0, #1
 8001e94:	42a1      	cmp	r1, r4
 8001e96:	d008      	beq.n	8001eaa <memmove+0x28>
 8001e98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ea0:	e7f8      	b.n	8001e94 <memmove+0x12>
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	4402      	add	r2, r0
 8001ea6:	428a      	cmp	r2, r1
 8001ea8:	d100      	bne.n	8001eac <memmove+0x2a>
 8001eaa:	bd10      	pop	{r4, pc}
 8001eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001eb4:	e7f7      	b.n	8001ea6 <memmove+0x24>
	...

08001eb8 <_fstat_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	2300      	movs	r3, #0
 8001ebc:	4d06      	ldr	r5, [pc, #24]	@ (8001ed8 <_fstat_r+0x20>)
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	602b      	str	r3, [r5, #0]
 8001ec6:	f7fe fe30 	bl	8000b2a <_fstat>
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	d102      	bne.n	8001ed4 <_fstat_r+0x1c>
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	b103      	cbz	r3, 8001ed4 <_fstat_r+0x1c>
 8001ed2:	6023      	str	r3, [r4, #0]
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200001b8 	.word	0x200001b8

08001edc <_isatty_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	2300      	movs	r3, #0
 8001ee0:	4d05      	ldr	r5, [pc, #20]	@ (8001ef8 <_isatty_r+0x1c>)
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	602b      	str	r3, [r5, #0]
 8001ee8:	f7fe fe2e 	bl	8000b48 <_isatty>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_isatty_r+0x1a>
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_isatty_r+0x1a>
 8001ef4:	6023      	str	r3, [r4, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	200001b8 	.word	0x200001b8

08001efc <_sbrk_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	2300      	movs	r3, #0
 8001f00:	4d05      	ldr	r5, [pc, #20]	@ (8001f18 <_sbrk_r+0x1c>)
 8001f02:	4604      	mov	r4, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	602b      	str	r3, [r5, #0]
 8001f08:	f7fe fe34 	bl	8000b74 <_sbrk>
 8001f0c:	1c43      	adds	r3, r0, #1
 8001f0e:	d102      	bne.n	8001f16 <_sbrk_r+0x1a>
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	b103      	cbz	r3, 8001f16 <_sbrk_r+0x1a>
 8001f14:	6023      	str	r3, [r4, #0]
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
 8001f18:	200001b8 	.word	0x200001b8

08001f1c <memchr>:
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b510      	push	{r4, lr}
 8001f20:	b2c9      	uxtb	r1, r1
 8001f22:	4402      	add	r2, r0
 8001f24:	4293      	cmp	r3, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	d101      	bne.n	8001f2e <memchr+0x12>
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	e003      	b.n	8001f36 <memchr+0x1a>
 8001f2e:	7804      	ldrb	r4, [r0, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d1f6      	bne.n	8001f24 <memchr+0x8>
 8001f36:	bd10      	pop	{r4, pc}

08001f38 <memcpy>:
 8001f38:	440a      	add	r2, r1
 8001f3a:	4291      	cmp	r1, r2
 8001f3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001f40:	d100      	bne.n	8001f44 <memcpy+0xc>
 8001f42:	4770      	bx	lr
 8001f44:	b510      	push	{r4, lr}
 8001f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f4a:	4291      	cmp	r1, r2
 8001f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f50:	d1f9      	bne.n	8001f46 <memcpy+0xe>
 8001f52:	bd10      	pop	{r4, pc}

08001f54 <_realloc_r>:
 8001f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f58:	4607      	mov	r7, r0
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	460d      	mov	r5, r1
 8001f5e:	b921      	cbnz	r1, 8001f6a <_realloc_r+0x16>
 8001f60:	4611      	mov	r1, r2
 8001f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f66:	f7ff b9cf 	b.w	8001308 <_malloc_r>
 8001f6a:	b92a      	cbnz	r2, 8001f78 <_realloc_r+0x24>
 8001f6c:	f7ff f962 	bl	8001234 <_free_r>
 8001f70:	4625      	mov	r5, r4
 8001f72:	4628      	mov	r0, r5
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f78:	f000 f81a 	bl	8001fb0 <_malloc_usable_size_r>
 8001f7c:	4284      	cmp	r4, r0
 8001f7e:	4606      	mov	r6, r0
 8001f80:	d802      	bhi.n	8001f88 <_realloc_r+0x34>
 8001f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f86:	d8f4      	bhi.n	8001f72 <_realloc_r+0x1e>
 8001f88:	4621      	mov	r1, r4
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	f7ff f9bc 	bl	8001308 <_malloc_r>
 8001f90:	4680      	mov	r8, r0
 8001f92:	b908      	cbnz	r0, 8001f98 <_realloc_r+0x44>
 8001f94:	4645      	mov	r5, r8
 8001f96:	e7ec      	b.n	8001f72 <_realloc_r+0x1e>
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	bf28      	it	cs
 8001fa0:	4632      	movcs	r2, r6
 8001fa2:	f7ff ffc9 	bl	8001f38 <memcpy>
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	4638      	mov	r0, r7
 8001faa:	f7ff f943 	bl	8001234 <_free_r>
 8001fae:	e7f1      	b.n	8001f94 <_realloc_r+0x40>

08001fb0 <_malloc_usable_size_r>:
 8001fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fb4:	1f18      	subs	r0, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bfbc      	itt	lt
 8001fba:	580b      	ldrlt	r3, [r1, r0]
 8001fbc:	18c0      	addlt	r0, r0, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_init>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	bf00      	nop
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr

08001fcc <_fini>:
 8001fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fce:	bf00      	nop
 8001fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd2:	bc08      	pop	{r3}
 8001fd4:	469e      	mov	lr, r3
 8001fd6:	4770      	bx	lr
