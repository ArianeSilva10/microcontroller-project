
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08002c04  08002c04  00003c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e7c  08002e7c  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e7c  08002e7c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002e84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000005c  08002ee0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002ee0  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fd9  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a80  00000000  00000000  0000605e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  00006ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000021c  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000121c3  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000033c7  00000000  00000000  000191b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a88e  00000000  00000000  0001c57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00076e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001598  00000000  00000000  00076e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000783e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002bec 	.word	0x08002bec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08002bec 	.word	0x08002bec

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_frsub>:
 80004e8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004ec:	e002      	b.n	80004f4 <__addsf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_fsub>:
 80004f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004f4 <__addsf3>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	bf1f      	itttt	ne
 80004f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004fc:	ea92 0f03 	teqne	r2, r3
 8000500:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000504:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000508:	d06a      	beq.n	80005e0 <__addsf3+0xec>
 800050a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800050e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000512:	bfc1      	itttt	gt
 8000514:	18d2      	addgt	r2, r2, r3
 8000516:	4041      	eorgt	r1, r0
 8000518:	4048      	eorgt	r0, r1
 800051a:	4041      	eorgt	r1, r0
 800051c:	bfb8      	it	lt
 800051e:	425b      	neglt	r3, r3
 8000520:	2b19      	cmp	r3, #25
 8000522:	bf88      	it	hi
 8000524:	4770      	bxhi	lr
 8000526:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800052a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800052e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000532:	bf18      	it	ne
 8000534:	4240      	negne	r0, r0
 8000536:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800053e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000542:	bf18      	it	ne
 8000544:	4249      	negne	r1, r1
 8000546:	ea92 0f03 	teq	r2, r3
 800054a:	d03f      	beq.n	80005cc <__addsf3+0xd8>
 800054c:	f1a2 0201 	sub.w	r2, r2, #1
 8000550:	fa41 fc03 	asr.w	ip, r1, r3
 8000554:	eb10 000c 	adds.w	r0, r0, ip
 8000558:	f1c3 0320 	rsb	r3, r3, #32
 800055c:	fa01 f103 	lsl.w	r1, r1, r3
 8000560:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000564:	d502      	bpl.n	800056c <__addsf3+0x78>
 8000566:	4249      	negs	r1, r1
 8000568:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800056c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000570:	d313      	bcc.n	800059a <__addsf3+0xa6>
 8000572:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000576:	d306      	bcc.n	8000586 <__addsf3+0x92>
 8000578:	0840      	lsrs	r0, r0, #1
 800057a:	ea4f 0131 	mov.w	r1, r1, rrx
 800057e:	f102 0201 	add.w	r2, r2, #1
 8000582:	2afe      	cmp	r2, #254	@ 0xfe
 8000584:	d251      	bcs.n	800062a <__addsf3+0x136>
 8000586:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800058a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800058e:	bf08      	it	eq
 8000590:	f020 0001 	biceq.w	r0, r0, #1
 8000594:	ea40 0003 	orr.w	r0, r0, r3
 8000598:	4770      	bx	lr
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	eb40 0000 	adc.w	r0, r0, r0
 80005a0:	3a01      	subs	r2, #1
 80005a2:	bf28      	it	cs
 80005a4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005a8:	d2ed      	bcs.n	8000586 <__addsf3+0x92>
 80005aa:	fab0 fc80 	clz	ip, r0
 80005ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80005b2:	ebb2 020c 	subs.w	r2, r2, ip
 80005b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005ba:	bfaa      	itet	ge
 80005bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005c0:	4252      	neglt	r2, r2
 80005c2:	4318      	orrge	r0, r3
 80005c4:	bfbc      	itt	lt
 80005c6:	40d0      	lsrlt	r0, r2
 80005c8:	4318      	orrlt	r0, r3
 80005ca:	4770      	bx	lr
 80005cc:	f092 0f00 	teq	r2, #0
 80005d0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005d4:	bf06      	itte	eq
 80005d6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005da:	3201      	addeq	r2, #1
 80005dc:	3b01      	subne	r3, #1
 80005de:	e7b5      	b.n	800054c <__addsf3+0x58>
 80005e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005e8:	bf18      	it	ne
 80005ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ee:	d021      	beq.n	8000634 <__addsf3+0x140>
 80005f0:	ea92 0f03 	teq	r2, r3
 80005f4:	d004      	beq.n	8000600 <__addsf3+0x10c>
 80005f6:	f092 0f00 	teq	r2, #0
 80005fa:	bf08      	it	eq
 80005fc:	4608      	moveq	r0, r1
 80005fe:	4770      	bx	lr
 8000600:	ea90 0f01 	teq	r0, r1
 8000604:	bf1c      	itt	ne
 8000606:	2000      	movne	r0, #0
 8000608:	4770      	bxne	lr
 800060a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800060e:	d104      	bne.n	800061a <__addsf3+0x126>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	bf28      	it	cs
 8000614:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000618:	4770      	bx	lr
 800061a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800061e:	bf3c      	itt	cc
 8000620:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000624:	4770      	bxcc	lr
 8000626:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800062a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800062e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000632:	4770      	bx	lr
 8000634:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000638:	bf16      	itet	ne
 800063a:	4608      	movne	r0, r1
 800063c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000640:	4601      	movne	r1, r0
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	bf06      	itte	eq
 8000646:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800064a:	ea90 0f01 	teqeq	r0, r1
 800064e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000652:	4770      	bx	lr

08000654 <__aeabi_ui2f>:
 8000654:	f04f 0300 	mov.w	r3, #0
 8000658:	e004      	b.n	8000664 <__aeabi_i2f+0x8>
 800065a:	bf00      	nop

0800065c <__aeabi_i2f>:
 800065c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	ea5f 0c00 	movs.w	ip, r0
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000670:	4601      	mov	r1, r0
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	e01c      	b.n	80006b2 <__aeabi_l2f+0x2a>

08000678 <__aeabi_ul2f>:
 8000678:	ea50 0201 	orrs.w	r2, r0, r1
 800067c:	bf08      	it	eq
 800067e:	4770      	bxeq	lr
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e00a      	b.n	800069c <__aeabi_l2f+0x14>
 8000686:	bf00      	nop

08000688 <__aeabi_l2f>:
 8000688:	ea50 0201 	orrs.w	r2, r0, r1
 800068c:	bf08      	it	eq
 800068e:	4770      	bxeq	lr
 8000690:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000694:	d502      	bpl.n	800069c <__aeabi_l2f+0x14>
 8000696:	4240      	negs	r0, r0
 8000698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069c:	ea5f 0c01 	movs.w	ip, r1
 80006a0:	bf02      	ittt	eq
 80006a2:	4684      	moveq	ip, r0
 80006a4:	4601      	moveq	r1, r0
 80006a6:	2000      	moveq	r0, #0
 80006a8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006ac:	bf08      	it	eq
 80006ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006b6:	fabc f28c 	clz	r2, ip
 80006ba:	3a08      	subs	r2, #8
 80006bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006c0:	db10      	blt.n	80006e4 <__aeabi_l2f+0x5c>
 80006c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c6:	4463      	add	r3, ip
 80006c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006cc:	f1c2 0220 	rsb	r2, r2, #32
 80006d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006d4:	fa20 f202 	lsr.w	r2, r0, r2
 80006d8:	eb43 0002 	adc.w	r0, r3, r2
 80006dc:	bf08      	it	eq
 80006de:	f020 0001 	biceq.w	r0, r0, #1
 80006e2:	4770      	bx	lr
 80006e4:	f102 0220 	add.w	r2, r2, #32
 80006e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006ec:	f1c2 0220 	rsb	r2, r2, #32
 80006f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006f4:	fa21 f202 	lsr.w	r2, r1, r2
 80006f8:	eb43 0002 	adc.w	r0, r3, r2
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000702:	4770      	bx	lr

08000704 <__aeabi_fmul>:
 8000704:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000708:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800070c:	bf1e      	ittt	ne
 800070e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000712:	ea92 0f0c 	teqne	r2, ip
 8000716:	ea93 0f0c 	teqne	r3, ip
 800071a:	d06f      	beq.n	80007fc <__aeabi_fmul+0xf8>
 800071c:	441a      	add	r2, r3
 800071e:	ea80 0c01 	eor.w	ip, r0, r1
 8000722:	0240      	lsls	r0, r0, #9
 8000724:	bf18      	it	ne
 8000726:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800072a:	d01e      	beq.n	800076a <__aeabi_fmul+0x66>
 800072c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000730:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000734:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000738:	fba0 3101 	umull	r3, r1, r0, r1
 800073c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000740:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000744:	bf3e      	ittt	cc
 8000746:	0049      	lslcc	r1, r1, #1
 8000748:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800074c:	005b      	lslcc	r3, r3, #1
 800074e:	ea40 0001 	orr.w	r0, r0, r1
 8000752:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000756:	2afd      	cmp	r2, #253	@ 0xfd
 8000758:	d81d      	bhi.n	8000796 <__aeabi_fmul+0x92>
 800075a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800075e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000762:	bf08      	it	eq
 8000764:	f020 0001 	biceq.w	r0, r0, #1
 8000768:	4770      	bx	lr
 800076a:	f090 0f00 	teq	r0, #0
 800076e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	0249      	lsleq	r1, r1, #9
 8000776:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800077a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800077e:	3a7f      	subs	r2, #127	@ 0x7f
 8000780:	bfc2      	ittt	gt
 8000782:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000786:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800078a:	4770      	bxgt	lr
 800078c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	3a01      	subs	r2, #1
 8000796:	dc5d      	bgt.n	8000854 <__aeabi_fmul+0x150>
 8000798:	f112 0f19 	cmn.w	r2, #25
 800079c:	bfdc      	itt	le
 800079e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007a2:	4770      	bxle	lr
 80007a4:	f1c2 0200 	rsb	r2, r2, #0
 80007a8:	0041      	lsls	r1, r0, #1
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	f1c2 0220 	rsb	r2, r2, #32
 80007b2:	fa00 fc02 	lsl.w	ip, r0, r2
 80007b6:	ea5f 0031 	movs.w	r0, r1, rrx
 80007ba:	f140 0000 	adc.w	r0, r0, #0
 80007be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007c2:	bf08      	it	eq
 80007c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007c8:	4770      	bx	lr
 80007ca:	f092 0f00 	teq	r2, #0
 80007ce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007d2:	bf02      	ittt	eq
 80007d4:	0040      	lsleq	r0, r0, #1
 80007d6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007da:	3a01      	subeq	r2, #1
 80007dc:	d0f9      	beq.n	80007d2 <__aeabi_fmul+0xce>
 80007de:	ea40 000c 	orr.w	r0, r0, ip
 80007e2:	f093 0f00 	teq	r3, #0
 80007e6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ea:	bf02      	ittt	eq
 80007ec:	0049      	lsleq	r1, r1, #1
 80007ee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007f2:	3b01      	subeq	r3, #1
 80007f4:	d0f9      	beq.n	80007ea <__aeabi_fmul+0xe6>
 80007f6:	ea41 010c 	orr.w	r1, r1, ip
 80007fa:	e78f      	b.n	800071c <__aeabi_fmul+0x18>
 80007fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000800:	ea92 0f0c 	teq	r2, ip
 8000804:	bf18      	it	ne
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d00a      	beq.n	8000822 <__aeabi_fmul+0x11e>
 800080c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000810:	bf18      	it	ne
 8000812:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000816:	d1d8      	bne.n	80007ca <__aeabi_fmul+0xc6>
 8000818:	ea80 0001 	eor.w	r0, r0, r1
 800081c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000820:	4770      	bx	lr
 8000822:	f090 0f00 	teq	r0, #0
 8000826:	bf17      	itett	ne
 8000828:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800082c:	4608      	moveq	r0, r1
 800082e:	f091 0f00 	teqne	r1, #0
 8000832:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000836:	d014      	beq.n	8000862 <__aeabi_fmul+0x15e>
 8000838:	ea92 0f0c 	teq	r2, ip
 800083c:	d101      	bne.n	8000842 <__aeabi_fmul+0x13e>
 800083e:	0242      	lsls	r2, r0, #9
 8000840:	d10f      	bne.n	8000862 <__aeabi_fmul+0x15e>
 8000842:	ea93 0f0c 	teq	r3, ip
 8000846:	d103      	bne.n	8000850 <__aeabi_fmul+0x14c>
 8000848:	024b      	lsls	r3, r1, #9
 800084a:	bf18      	it	ne
 800084c:	4608      	movne	r0, r1
 800084e:	d108      	bne.n	8000862 <__aeabi_fmul+0x15e>
 8000850:	ea80 0001 	eor.w	r0, r0, r1
 8000854:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800085c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000860:	4770      	bx	lr
 8000862:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000866:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800086a:	4770      	bx	lr

0800086c <__aeabi_fdiv>:
 800086c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000870:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000874:	bf1e      	ittt	ne
 8000876:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800087a:	ea92 0f0c 	teqne	r2, ip
 800087e:	ea93 0f0c 	teqne	r3, ip
 8000882:	d069      	beq.n	8000958 <__aeabi_fdiv+0xec>
 8000884:	eba2 0203 	sub.w	r2, r2, r3
 8000888:	ea80 0c01 	eor.w	ip, r0, r1
 800088c:	0249      	lsls	r1, r1, #9
 800088e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000892:	d037      	beq.n	8000904 <__aeabi_fdiv+0x98>
 8000894:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000898:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800089c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008a4:	428b      	cmp	r3, r1
 80008a6:	bf38      	it	cc
 80008a8:	005b      	lslcc	r3, r3, #1
 80008aa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008ae:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008b2:	428b      	cmp	r3, r1
 80008b4:	bf24      	itt	cs
 80008b6:	1a5b      	subcs	r3, r3, r1
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008c0:	bf24      	itt	cs
 80008c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ce:	bf24      	itt	cs
 80008d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008dc:	bf24      	itt	cs
 80008de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	bf18      	it	ne
 80008ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ee:	d1e0      	bne.n	80008b2 <__aeabi_fdiv+0x46>
 80008f0:	2afd      	cmp	r2, #253	@ 0xfd
 80008f2:	f63f af50 	bhi.w	8000796 <__aeabi_fmul+0x92>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000908:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090c:	327f      	adds	r2, #127	@ 0x7f
 800090e:	bfc2      	ittt	gt
 8000910:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000914:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000918:	4770      	bxgt	lr
 800091a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	3a01      	subs	r2, #1
 8000924:	e737      	b.n	8000796 <__aeabi_fmul+0x92>
 8000926:	f092 0f00 	teq	r2, #0
 800092a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800092e:	bf02      	ittt	eq
 8000930:	0040      	lsleq	r0, r0, #1
 8000932:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000936:	3a01      	subeq	r2, #1
 8000938:	d0f9      	beq.n	800092e <__aeabi_fdiv+0xc2>
 800093a:	ea40 000c 	orr.w	r0, r0, ip
 800093e:	f093 0f00 	teq	r3, #0
 8000942:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000946:	bf02      	ittt	eq
 8000948:	0049      	lsleq	r1, r1, #1
 800094a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800094e:	3b01      	subeq	r3, #1
 8000950:	d0f9      	beq.n	8000946 <__aeabi_fdiv+0xda>
 8000952:	ea41 010c 	orr.w	r1, r1, ip
 8000956:	e795      	b.n	8000884 <__aeabi_fdiv+0x18>
 8000958:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800095c:	ea92 0f0c 	teq	r2, ip
 8000960:	d108      	bne.n	8000974 <__aeabi_fdiv+0x108>
 8000962:	0242      	lsls	r2, r0, #9
 8000964:	f47f af7d 	bne.w	8000862 <__aeabi_fmul+0x15e>
 8000968:	ea93 0f0c 	teq	r3, ip
 800096c:	f47f af70 	bne.w	8000850 <__aeabi_fmul+0x14c>
 8000970:	4608      	mov	r0, r1
 8000972:	e776      	b.n	8000862 <__aeabi_fmul+0x15e>
 8000974:	ea93 0f0c 	teq	r3, ip
 8000978:	d104      	bne.n	8000984 <__aeabi_fdiv+0x118>
 800097a:	024b      	lsls	r3, r1, #9
 800097c:	f43f af4c 	beq.w	8000818 <__aeabi_fmul+0x114>
 8000980:	4608      	mov	r0, r1
 8000982:	e76e      	b.n	8000862 <__aeabi_fmul+0x15e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1ca      	bne.n	8000926 <__aeabi_fdiv+0xba>
 8000990:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000994:	f47f af5c 	bne.w	8000850 <__aeabi_fmul+0x14c>
 8000998:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800099c:	f47f af3c 	bne.w	8000818 <__aeabi_fmul+0x114>
 80009a0:	e75f      	b.n	8000862 <__aeabi_fmul+0x15e>
 80009a2:	bf00      	nop

080009a4 <GPIO_Init_ht20>:
void delay_ms_ht20(volatile uint32_t ms) {
    for (volatile uint32_t i = 0; i < ms * 8000; i++) __NOP();
}

// --- Inicializa GPIO para I2C e USART ---
void GPIO_Init_ht20(void) {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
    // Habilita clocks GPIOB e GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPAEN;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <GPIO_Init_ht20+0x30>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a09      	ldr	r2, [pc, #36]	@ (80009d4 <GPIO_Init_ht20+0x30>)
 80009ae:	f043 030c 	orr.w	r3, r3, #12
 80009b2:	6193      	str	r3, [r2, #24]

    // PB6 (I2C1_SCL) e PB7 (I2C1_SDA) como AF Open Drain, 50MHz
    GPIOB->CRL &= ~((0xF << (6*4)) | (0xF << (7*4)));
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <GPIO_Init_ht20+0x34>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <GPIO_Init_ht20+0x34>)
 80009ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80009be:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |=  ((0xB << (6*4)) | (0xB << (7*4)));
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <GPIO_Init_ht20+0x34>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <GPIO_Init_ht20+0x34>)
 80009c6:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010c00 	.word	0x40010c00

080009dc <I2C1_Init>:

// --- Inicializa I2C1 ---
void I2C1_Init(void) {
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <I2C1_Init+0x38>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <I2C1_Init+0x38>)
 80009e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ea:	61d3      	str	r3, [r2, #28]
    // Frequência APB1 36MHz
    I2C1->CR2 = 36;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <I2C1_Init+0x3c>)
 80009ee:	2224      	movs	r2, #36	@ 0x24
 80009f0:	605a      	str	r2, [r3, #4]
    // Configura clock I2C para 100kHz
    I2C1->CCR = 180;
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <I2C1_Init+0x3c>)
 80009f4:	22b4      	movs	r2, #180	@ 0xb4
 80009f6:	61da      	str	r2, [r3, #28]
    // Configura TRISE
    I2C1->TRISE = 37;
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <I2C1_Init+0x3c>)
 80009fa:	2225      	movs	r2, #37	@ 0x25
 80009fc:	621a      	str	r2, [r3, #32]

    // Habilita I2C
    I2C1->CR1 |= I2C_CR1_PE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <I2C1_Init+0x3c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <I2C1_Init+0x3c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40005400 	.word	0x40005400

08000a1c <I2C1_Start>:

// --- Gerar condição START ---
void I2C1_Start(void) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <I2C1_Start+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <I2C1_Start+0x28>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000a2c:	bf00      	nop
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <I2C1_Start+0x28>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f9      	beq.n	8000a2e <I2C1_Start+0x12>
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40005400 	.word	0x40005400

08000a48 <I2C1_Stop>:

// --- Gerar condição STOP ---
void I2C1_Stop(void) {
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <I2C1_Stop+0x18>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a03      	ldr	r2, [pc, #12]	@ (8000a60 <I2C1_Stop+0x18>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40005400 	.word	0x40005400

08000a64 <I2C1_SendAddress>:

// --- Envia endereço (7 bits) + rw (0=write,1=read) ---
void I2C1_SendAddress(uint8_t addr, uint8_t rw) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	71bb      	strb	r3, [r7, #6]
    I2C1->DR = (addr << 1) | (rw & 0x1);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	005a      	lsls	r2, r3, #1
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <I2C1_SendAddress+0x3c>)
 8000a82:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000a84:	bf00      	nop
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <I2C1_SendAddress+0x3c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f9      	beq.n	8000a86 <I2C1_SendAddress+0x22>
    (void)I2C1->SR2; // limpa flag ADDR
 8000a92:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <I2C1_SendAddress+0x3c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40005400 	.word	0x40005400

08000aa4 <I2C1_WriteByte>:

// --- Envia byte ---
void I2C1_WriteByte(uint8_t byte) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000aae:	bf00      	nop
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <I2C1_WriteByte+0x28>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f9      	beq.n	8000ab0 <I2C1_WriteByte+0xc>
    I2C1->DR = byte;
 8000abc:	4a03      	ldr	r2, [pc, #12]	@ (8000acc <I2C1_WriteByte+0x28>)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	6113      	str	r3, [r2, #16]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40005400 	.word	0x40005400

08000ad0 <I2C1_ReadByte>:

// --- Recebe byte ---
uint8_t I2C1_ReadByte(int ack) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    if (ack)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <I2C1_ReadByte+0x1c>
        I2C1->CR1 |= I2C_CR1_ACK;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <I2C1_ReadByte+0x48>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <I2C1_ReadByte+0x48>)
 8000ae4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e005      	b.n	8000af8 <I2C1_ReadByte+0x28>
    else
        I2C1->CR1 &= ~I2C_CR1_ACK;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <I2C1_ReadByte+0x48>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <I2C1_ReadByte+0x48>)
 8000af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000af6:	6013      	str	r3, [r2, #0]

    while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000af8:	bf00      	nop
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <I2C1_ReadByte+0x48>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f9      	beq.n	8000afa <I2C1_ReadByte+0x2a>
    return I2C1->DR;
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <I2C1_ReadByte+0x48>)
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40005400 	.word	0x40005400

08000b1c <AHT20_WriteCmd>:

// --- Escreve comando para o sensor ---
void AHT20_WriteCmd(uint8_t *cmd, uint8_t len) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
    I2C1_Start();
 8000b28:	f7ff ff78 	bl	8000a1c <I2C1_Start>
    I2C1_SendAddress(0x38, 0); // write
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2038      	movs	r0, #56	@ 0x38
 8000b30:	f7ff ff98 	bl	8000a64 <I2C1_SendAddress>
    for (uint8_t i=0; i<len; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e009      	b.n	8000b4e <AHT20_WriteCmd+0x32>
        I2C1_WriteByte(cmd[i]);
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffae 	bl	8000aa4 <I2C1_WriteByte>
    for (uint8_t i=0; i<len; i++) {
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3f1      	bcc.n	8000b3a <AHT20_WriteCmd+0x1e>
    }
    I2C1_Stop();
 8000b56:	f7ff ff77 	bl	8000a48 <I2C1_Stop>
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <AHT20_ReadData>:

// --- Lê bytes do sensor ---
void AHT20_ReadData(uint8_t *buf, uint8_t len) {
 8000b62:	b590      	push	{r4, r7, lr}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	70fb      	strb	r3, [r7, #3]
    I2C1_Start();
 8000b6e:	f7ff ff55 	bl	8000a1c <I2C1_Start>
    I2C1_SendAddress(0x38, 1); // read
 8000b72:	2101      	movs	r1, #1
 8000b74:	2038      	movs	r0, #56	@ 0x38
 8000b76:	f7ff ff75 	bl	8000a64 <I2C1_SendAddress>
    for (uint8_t i=0; i<len; i++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
 8000b7e:	e013      	b.n	8000ba8 <AHT20_ReadData+0x46>
        buf[i] = I2C1_ReadByte(i < (len-1)); // ACK para todos exceto último
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	429a      	cmp	r2, r3
 8000b88:	bfb4      	ite	lt
 8000b8a:	2301      	movlt	r3, #1
 8000b8c:	2300      	movge	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	18d4      	adds	r4, r2, r3
 8000b98:	4608      	mov	r0, r1
 8000b9a:	f7ff ff99 	bl	8000ad0 <I2C1_ReadByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<len; i++) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	78fb      	ldrb	r3, [r7, #3]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d3e7      	bcc.n	8000b80 <AHT20_ReadData+0x1e>
    }
    I2C1_Stop();
 8000bb0:	f7ff ff4a 	bl	8000a48 <I2C1_Stop>
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <AHT20_ConvertData>:


// --- Conversão e cálculo temperatura/umidade ---
void AHT20_ConvertData(uint8_t *data, float *temp, float *hum) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
    uint32_t raw_humidity = ((data[1] << 12) | (data[2] << 4) | (data[3] >> 4));
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	031a      	lsls	r2, r3, #12
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	3203      	adds	r2, #3
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	0912      	lsrs	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	4313      	orrs	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
    uint32_t raw_temperature = (((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5]);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3303      	adds	r3, #3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	041b      	lsls	r3, r3, #16
 8000bf0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	3205      	adds	r2, #5
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]

    *hum = (raw_humidity * 100.0f) / 1048576.0f;
 8000c08:	6978      	ldr	r0, [r7, #20]
 8000c0a:	f7ff fd23 	bl	8000654 <__aeabi_ui2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4914      	ldr	r1, [pc, #80]	@ (8000c64 <AHT20_ConvertData+0xa8>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd76 	bl	8000704 <__aeabi_fmul>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe24 	bl	800086c <__aeabi_fdiv>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
    *temp = (raw_temperature * 200.0f / 1048576.0f) - 50.0f;
 8000c2c:	6938      	ldr	r0, [r7, #16]
 8000c2e:	f7ff fd11 	bl	8000654 <__aeabi_ui2f>
 8000c32:	4603      	mov	r3, r0
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <AHT20_ConvertData+0xac>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd64 	bl	8000704 <__aeabi_fmul>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fe12 	bl	800086c <__aeabi_fdiv>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <AHT20_ConvertData+0xb0>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc4f 	bl	80004f0 <__aeabi_fsub>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	42c80000 	.word	0x42c80000
 8000c68:	43480000 	.word	0x43480000
 8000c6c:	42480000 	.word	0x42480000

08000c70 <ADC_init>:
#include "ldr.h"

void ADC_init(void) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
    // Habilita clock GPIOA e ADC1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_ADC1EN;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <ADC_init+0x70>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <ADC_init+0x70>)
 8000c7c:	f443 7301 	orr.w	r3, r3, #516	@ 0x204
 8000c80:	6193      	str	r3, [r2, #24]

    // PA0 como entrada analogica (ADC_IN0)
    GPIOA->CRL &= ~GPIO_CRL_MODE0;
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <ADC_init+0x74>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <ADC_init+0x74>)
 8000c88:	f023 0303 	bic.w	r3, r3, #3
 8000c8c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF0;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <ADC_init+0x74>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <ADC_init+0x74>)
 8000c94:	f023 030c 	bic.w	r3, r3, #12
 8000c98:	6013      	str	r3, [r2, #0]

    // Ativa o ADC e calibra
    ADC1->CR2 |= ADC_CR2_ADON;      // Liga ADC
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <ADC_init+0x78>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <ADC_init+0x78>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 1000; i++); // delay
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e002      	b.n	8000cb2 <ADC_init+0x42>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cb8:	dbf8      	blt.n	8000cac <ADC_init+0x3c>

    ADC1->CR2 |= ADC_CR2_CAL;       // Inicia calibracao
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <ADC_init+0x78>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <ADC_init+0x78>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC_CR2_CAL); // espera calibrar
 8000cc6:	bf00      	nop
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <ADC_init+0x78>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f9      	bne.n	8000cc8 <ADC_init+0x58>
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40012400 	.word	0x40012400

08000cec <ADC_read>:

uint16_t ADC_read(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
    ADC1->SQR3 = 0; // Canal 0 (PA0)
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <ADC_read+0x34>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON; // Inicia conversao
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <ADC_read+0x34>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <ADC_read+0x34>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC)); // Espera terminar
 8000d02:	bf00      	nop
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <ADC_read+0x34>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f9      	beq.n	8000d04 <ADC_read+0x18>
    return ADC1->DR; // Retorna valor (0 a 4095)
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <ADC_read+0x34>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	b29b      	uxth	r3, r3
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40012400 	.word	0x40012400

08000d24 <LED_init>:

void LED_init(void) {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <LED_init+0x3c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <LED_init+0x3c>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]

    // PB9 como saida push-pull
    GPIOB->CRH &= ~GPIO_CRH_MODE9;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <LED_init+0x40>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LED_init+0x40>)
 8000d3a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d3e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF9;
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <LED_init+0x40>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <LED_init+0x40>)
 8000d46:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d4a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE9_1; // saida 2MHz
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <LED_init+0x40>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <LED_init+0x40>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6053      	str	r3, [r2, #4]
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <SystemClock_Config>:
#include <stdio.h>
#include "ldr.h"
#include "aht20.h"

void SystemClock_Config(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSEON;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY))
 8000d78:	bf00      	nop
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f9      	beq.n	8000d7a <SystemClock_Config+0x12>
        ;

    RCC->CFGR |= RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9;
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d8c:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000d90:	6053      	str	r3, [r2, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <SystemClock_Config+0x80>)
 8000d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d9c:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY))
 8000d9e:	bf00      	nop
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <SystemClock_Config+0x80>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f9      	beq.n	8000da0 <SystemClock_Config+0x38>
        ;

    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <SystemClock_Config+0x84>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0e      	ldr	r2, [pc, #56]	@ (8000dec <SystemClock_Config+0x84>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6013      	str	r3, [r2, #0]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <SystemClock_Config+0x80>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <SystemClock_Config+0x80>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8000dc4:	bf00      	nop
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <SystemClock_Config+0x80>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d1f9      	bne.n	8000dc6 <SystemClock_Config+0x5e>
        ;

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <SystemClock_Config+0x80>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <SystemClock_Config+0x80>)
 8000dd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ddc:	6053      	str	r3, [r2, #4]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40022000 	.word	0x40022000

08000df0 <led_init>:

//  (PC13)
void led_init(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <led_init+0x30>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <led_init+0x30>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	6193      	str	r3, [r2, #24]
    GPIOC->CRH &= ~(0xF << 20); // PC13
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <led_init+0x34>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <led_init+0x34>)
 8000e06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000e0a:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= (0x3 << 20);  // Output 50MHz
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <led_init+0x34>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <led_init+0x34>)
 8000e12:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000e16:	6053      	str	r3, [r2, #4]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40011000 	.word	0x40011000

08000e28 <led_toggle>:
{
    GPIOC->BSRR = GPIO_BSRR_BS13;
}

void led_toggle(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
    GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <led_toggle+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <led_toggle+0x18>)
 8000e32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40011000 	.word	0x40011000

08000e44 <nrf_test_connection>:

// basic test  NRF24L01
uint8_t nrf_test_connection(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
    // tests writing and reading a register
    uint8_t test_value = 0x55;
 8000e4a:	2355      	movs	r3, #85	@ 0x55
 8000e4c:	71fb      	strb	r3, [r7, #7]
    nrf_write_reg(RF_CH, test_value);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4619      	mov	r1, r3
 8000e52:	2005      	movs	r0, #5
 8000e54:	f000 fa6a 	bl	800132c <nrf_write_reg>
    delay_ms(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 f96b 	bl	8001134 <delay_ms>
    uint8_t read_value = nrf_read_reg(RF_CH);
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f000 fa86 	bl	8001370 <nrf_read_reg>
 8000e64:	4603      	mov	r3, r0
 8000e66:	71bb      	strb	r3, [r7, #6]

    return (read_value == test_value);
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <test_receiver>:
    }
}

// ==== RECEIVER MODE ====
void test_receiver(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
    printf("Iniciando modo RECEPTOR...\r\n");
 8000e86:	481b      	ldr	r0, [pc, #108]	@ (8000ef4 <test_receiver+0x74>)
 8000e88:	f000 fe36 	bl	8001af8 <puts>

    // init NRF an receiver
    nrf_init(NRF_MODE_RX);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 fadd 	bl	800144c <nrf_init>

    // setup reception adress
    uint8_t addr2[5] = {0x05, 0xDD, 0xCC, 0xAA, 0x00};
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <test_receiver+0x78>)
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	2300      	movs	r3, #0
 8000e98:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    nrf_set_rx_addr(0, addr2, 5);
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fb9d 	bl	80015e4 <nrf_set_rx_addr>

    printf("Receptor configurado!\r\n");
 8000eaa:	4814      	ldr	r0, [pc, #80]	@ (8000efc <test_receiver+0x7c>)
 8000eac:	f000 fe24 	bl	8001af8 <puts>
    printf("Aguardando dados...\r\n");
 8000eb0:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <test_receiver+0x80>)
 8000eb2:	f000 fe21 	bl	8001af8 <puts>

    while (1)
    {
        uint8_t buffer[32];

        if (nrf_data_available())
 8000eb6:	f000 fbc4 	bl	8001642 <nrf_data_available>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d015      	beq.n	8000eec <test_receiver+0x6c>
        {
            if (nrf_receive(buffer, 32))
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fb45 	bl	8001554 <nrf_receive>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00d      	beq.n	8000eec <test_receiver+0x6c>
            {
                buffer[31] = '\0';
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	77fb      	strb	r3, [r7, #31]

                printf("Recebido: ");
 8000ed4:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <test_receiver+0x84>)
 8000ed6:	f000 fda7 	bl	8001a28 <iprintf>
                printf((char *)buffer);
 8000eda:	463b      	mov	r3, r7
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fda3 	bl	8001a28 <iprintf>
                printf("\r\n");
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <test_receiver+0x88>)
 8000ee4:	f000 fe08 	bl	8001af8 <puts>

                led_toggle();
 8000ee8:	f7ff ff9e 	bl	8000e28 <led_toggle>
            }
        }

        delay_ms(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f000 f921 	bl	8001134 <delay_ms>
    {
 8000ef2:	e7e0      	b.n	8000eb6 <test_receiver+0x36>
 8000ef4:	08002c90 	.word	0x08002c90
 8000ef8:	aaccdd05 	.word	0xaaccdd05
 8000efc:	08002cac 	.word	0x08002cac
 8000f00:	08002cc4 	.word	0x08002cc4
 8000f04:	08002cdc 	.word	0x08002cdc
 8000f08:	08002c58 	.word	0x08002c58

08000f0c <nrf_diagnostic>:
    }
}

// ==== DIAGNOSIS ====
void nrf_diagnostic(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b092      	sub	sp, #72	@ 0x48
 8000f10:	af00      	add	r7, sp, #0
    printf("\n=== DIAGNÓSTICO NRF24L01 ===\r\n");
 8000f12:	482c      	ldr	r0, [pc, #176]	@ (8000fc4 <nrf_diagnostic+0xb8>)
 8000f14:	f000 fdf0 	bl	8001af8 <puts>

    // connection test
    if (nrf_test_connection())
 8000f18:	f7ff ff94 	bl	8000e44 <nrf_test_connection>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d04a      	beq.n	8000fb8 <nrf_diagnostic+0xac>
    {
        printf("✓ Conexao SPI OK\r\n");
 8000f22:	4829      	ldr	r0, [pc, #164]	@ (8000fc8 <nrf_diagnostic+0xbc>)
 8000f24:	f000 fde8 	bl	8001af8 <puts>
        printf("✗ ERRO na conexao SPI!\r\n");
        return;
    }

    // read important registers
    uint8_t config = nrf_read_reg(CONFIG);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fa21 	bl	8001370 <nrf_read_reg>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t status = nrf_read_reg(STATUS);
 8000f34:	2007      	movs	r0, #7
 8000f36:	f000 fa1b 	bl	8001370 <nrf_read_reg>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint8_t rf_ch = nrf_read_reg(RF_CH);
 8000f40:	2005      	movs	r0, #5
 8000f42:	f000 fa15 	bl	8001370 <nrf_read_reg>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t rf_setup = nrf_read_reg(RF_SETUP);
 8000f4c:	2006      	movs	r0, #6
 8000f4e:	f000 fa0f 	bl	8001370 <nrf_read_reg>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    char debug_msg[64];
    sprintf(debug_msg, "CONFIG: 0x%02X\r\n", config);
 8000f58:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	491b      	ldr	r1, [pc, #108]	@ (8000fcc <nrf_diagnostic+0xc0>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fe07 	bl	8001b74 <siprintf>
    printf(debug_msg);
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fd5d 	bl	8001a28 <iprintf>

    sprintf(debug_msg, "STATUS: 0x%02X\r\n", status);
 8000f6e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4916      	ldr	r1, [pc, #88]	@ (8000fd0 <nrf_diagnostic+0xc4>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fdfc 	bl	8001b74 <siprintf>
    printf(debug_msg);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd52 	bl	8001a28 <iprintf>

    sprintf(debug_msg, "RF_CH: %d\r\n", rf_ch);
 8000f84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4912      	ldr	r1, [pc, #72]	@ (8000fd4 <nrf_diagnostic+0xc8>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fdf1 	bl	8001b74 <siprintf>
    printf(debug_msg);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fd47 	bl	8001a28 <iprintf>

    sprintf(debug_msg, "RF_SETUP: 0x%02X\r\n", rf_setup);
 8000f9a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <nrf_diagnostic+0xcc>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fde6 	bl	8001b74 <siprintf>
    printf(debug_msg);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fd3c 	bl	8001a28 <iprintf>

    printf("=========================\r\n");
 8000fb0:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <nrf_diagnostic+0xd0>)
 8000fb2:	f000 fda1 	bl	8001af8 <puts>
 8000fb6:	e002      	b.n	8000fbe <nrf_diagnostic+0xb2>
        printf("✗ ERRO na conexao SPI!\r\n");
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <nrf_diagnostic+0xd4>)
 8000fba:	f000 fd9d 	bl	8001af8 <puts>
}
 8000fbe:	3748      	adds	r7, #72	@ 0x48
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08002d44 	.word	0x08002d44
 8000fc8:	08002d64 	.word	0x08002d64
 8000fcc:	08002d94 	.word	0x08002d94
 8000fd0:	08002da8 	.word	0x08002da8
 8000fd4:	08002dbc 	.word	0x08002dbc
 8000fd8:	08002dc8 	.word	0x08002dc8
 8000fdc:	08002ddc 	.word	0x08002ddc
 8000fe0:	08002d78 	.word	0x08002d78

08000fe4 <main>:

// ==== MAIN ====
int main(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b0a2      	sub	sp, #136	@ 0x88
 8000fe8:	af04      	add	r7, sp, #16
    SystemClock_Config();
 8000fea:	f7ff febd 	bl	8000d68 <SystemClock_Config>
    led_init();
 8000fee:	f7ff feff 	bl	8000df0 <led_init>
    USART1_Init();
 8000ff2:	f000 fbd5 	bl	80017a0 <USART1_Init>
    nrf_gpio_init();
 8000ff6:	f000 f8bb 	bl	8001170 <nrf_gpio_init>
    spi_init();
 8000ffa:	f000 f93d 	bl	8001278 <spi_init>
    ADC_init();
 8000ffe:	f7ff fe37 	bl	8000c70 <ADC_init>
    LED_init();
 8001002:	f7ff fe8f 	bl	8000d24 <LED_init>
    char buffer[100];

    GPIO_Init_ht20();
 8001006:	f7ff fccd 	bl	80009a4 <GPIO_Init_ht20>
    I2C1_Init();
 800100a:	f7ff fce7 	bl	80009dc <I2C1_Init>

    // Inicialização do sensor
    uint8_t init_cmd[3] = {0xBE, 0x08, 0x00};
 800100e:	4a40      	ldr	r2, [pc, #256]	@ (8001110 <main+0x12c>)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	8019      	strh	r1, [r3, #0]
 800101a:	3302      	adds	r3, #2
 800101c:	0c12      	lsrs	r2, r2, #16
 800101e:	701a      	strb	r2, [r3, #0]
    AHT20_WriteCmd(init_cmd, 3);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2103      	movs	r1, #3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd78 	bl	8000b1c <AHT20_WriteCmd>
    delay_ms(50);
 800102c:	2032      	movs	r0, #50	@ 0x32
 800102e:	f000 f881 	bl	8001134 <delay_ms>

    delay_ms(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001036:	f000 f87d 	bl	8001134 <delay_ms>
    printf("\n*** TESTE NRF24L01 ***\r\n");
 800103a:	4836      	ldr	r0, [pc, #216]	@ (8001114 <main+0x130>)
 800103c:	f000 fd5c 	bl	8001af8 <puts>

    // diagnostic
    nrf_diagnostic();
 8001040:	f7ff ff64 	bl	8000f0c <nrf_diagnostic>

    // tester an transmitter
    // test_transmitter();

    // tester an receptor
    test_receiver();
 8001044:	f7ff ff1c 	bl	8000e80 <test_receiver>
    // ping-pong test
    // test_ping_pong();

    while (1)
    {
        led_toggle();
 8001048:	f7ff feee 	bl	8000e28 <led_toggle>
        delay_ms(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001050:	f000 f870 	bl	8001134 <delay_ms>

        uint16_t valor_adc = ADC_read(); // leitura do LDR
 8001054:	f7ff fe4a 	bl	8000cec <ADC_read>
 8001058:	4603      	mov	r3, r0
 800105a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

        if (valor_adc < 1000)
 800105e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001066:	d206      	bcs.n	8001076 <main+0x92>
        { // escuro: acende LED
            GPIOB->ODR |= (1 << 9);
 8001068:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <main+0x134>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a2a      	ldr	r2, [pc, #168]	@ (8001118 <main+0x134>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	60d3      	str	r3, [r2, #12]
 8001074:	e005      	b.n	8001082 <main+0x9e>
        }
        else
        {
            GPIOB->ODR &= ~(1 << 9);
 8001076:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <main+0x134>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <main+0x134>)
 800107c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001080:	60d3      	str	r3, [r2, #12]
        }

        // Envia comando de medição
        uint8_t meas_cmd[3] = {0xAC, 0x33, 0x00};
 8001082:	4a26      	ldr	r2, [pc, #152]	@ (800111c <main+0x138>)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	4611      	mov	r1, r2
 800108a:	8019      	strh	r1, [r3, #0]
 800108c:	3302      	adds	r3, #2
 800108e:	0c12      	lsrs	r2, r2, #16
 8001090:	701a      	strb	r2, [r3, #0]
        AHT20_WriteCmd(meas_cmd, 3);
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2103      	movs	r1, #3
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fd40 	bl	8000b1c <AHT20_WriteCmd>
        delay_ms(80);
 800109c:	2050      	movs	r0, #80	@ 0x50
 800109e:	f000 f849 	bl	8001134 <delay_ms>

        // Lê 7 bytes de dados
        AHT20_ReadData(data, 7);
 80010a2:	2107      	movs	r1, #7
 80010a4:	481e      	ldr	r0, [pc, #120]	@ (8001120 <main+0x13c>)
 80010a6:	f7ff fd5c 	bl	8000b62 <AHT20_ReadData>

        // Converte dados para temperatura e umidade
        AHT20_ConvertData(data, &temperature, &humidity);
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <main+0x140>)
 80010ac:	491e      	ldr	r1, [pc, #120]	@ (8001128 <main+0x144>)
 80010ae:	481c      	ldr	r0, [pc, #112]	@ (8001120 <main+0x13c>)
 80010b0:	f7ff fd84 	bl	8000bbc <AHT20_ConvertData>

        // Envia via USART
        int len = snprintf(buffer, sizeof(buffer), "Temp: %.2f C, Hum: %.2f %%\r\n", temperature, humidity);
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <main+0x144>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f9bd 	bl	8000438 <__aeabi_f2d>
 80010be:	4604      	mov	r4, r0
 80010c0:	460d      	mov	r5, r1
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <main+0x140>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f9b6 	bl	8000438 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	f107 000c 	add.w	r0, r7, #12
 80010d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010d8:	e9cd 4500 	strd	r4, r5, [sp]
 80010dc:	4a13      	ldr	r2, [pc, #76]	@ (800112c <main+0x148>)
 80010de:	2164      	movs	r1, #100	@ 0x64
 80010e0:	f000 fd12 	bl	8001b08 <sniprintf>
 80010e4:	6738      	str	r0, [r7, #112]	@ 0x70
        printf(buffer);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fc9c 	bl	8001a28 <iprintf>

        delay_ms(2000);
 80010f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010f4:	f000 f81e 	bl	8001134 <delay_ms>

        for (volatile int i = 0; i < 100000; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	e002      	b.n	8001104 <main+0x120>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <main+0x14c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	ddf8      	ble.n	80010fe <main+0x11a>
    {
 800110c:	e79c      	b.n	8001048 <main+0x64>
 800110e:	bf00      	nop
 8001110:	08002e34 	.word	0x08002e34
 8001114:	08002df8 	.word	0x08002df8
 8001118:	40010c00 	.word	0x40010c00
 800111c:	08002e38 	.word	0x08002e38
 8001120:	20000078 	.word	0x20000078
 8001124:	20000084 	.word	0x20000084
 8001128:	20000080 	.word	0x20000080
 800112c:	08002e14 	.word	0x08002e14
 8001130:	0001869f 	.word	0x0001869f

08001134 <delay_ms>:
#include "nrfl2401.h"

// delays
void delay_ms(uint32_t ms) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e00c      	b.n	800115c <delay_ms+0x28>
        for (volatile uint32_t j = 0; j < 8000; j++);
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	e002      	b.n	800114e <delay_ms+0x1a>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001154:	d3f8      	bcc.n	8001148 <delay_ms+0x14>
    for (uint32_t i = 0; i < ms; i++) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3ee      	bcc.n	8001142 <delay_ms+0xe>
    }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <nrf_gpio_init>:
    for (uint32_t i = 0; i < us; i++) {
        for (volatile uint32_t j = 0; j < 8; j++);
    }
}

void nrf_gpio_init(void){
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    // Enable clocks
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001174:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <nrf_gpio_init+0xfc>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a3c      	ldr	r2, [pc, #240]	@ (800126c <nrf_gpio_init+0xfc>)
 800117a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800117e:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001180:	4b3a      	ldr	r3, [pc, #232]	@ (800126c <nrf_gpio_init+0xfc>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a39      	ldr	r2, [pc, #228]	@ (800126c <nrf_gpio_init+0xfc>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800118c:	4b37      	ldr	r3, [pc, #220]	@ (800126c <nrf_gpio_init+0xfc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a36      	ldr	r2, [pc, #216]	@ (800126c <nrf_gpio_init+0xfc>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6193      	str	r3, [r2, #24]
    
    // SPI1 pins configuration
    // PA5 SCK - Alternate Function Output Push-Pull
    GPIOA->CRL |= GPIO_CRL_MODE5_0 | GPIO_CRL_MODE5_1; 
 8001198:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <nrf_gpio_init+0x100>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a34      	ldr	r2, [pc, #208]	@ (8001270 <nrf_gpio_init+0x100>)
 800119e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80011a2:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF5_1;                     
 80011a4:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <nrf_gpio_init+0x100>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a31      	ldr	r2, [pc, #196]	@ (8001270 <nrf_gpio_init+0x100>)
 80011aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011ae:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(GPIO_CRL_CNF5_0);
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <nrf_gpio_init+0x100>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001270 <nrf_gpio_init+0x100>)
 80011b6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80011ba:	6013      	str	r3, [r2, #0]
    
    // PA7 MOSI - Alternate Function Output Push-Pull
    GPIOA->CRL |= GPIO_CRL_MODE7_0 | GPIO_CRL_MODE7_1; 
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <nrf_gpio_init+0x100>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001270 <nrf_gpio_init+0x100>)
 80011c2:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80011c6:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF7_1;                     
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <nrf_gpio_init+0x100>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <nrf_gpio_init+0x100>)
 80011ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011d2:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(GPIO_CRL_CNF7_0);
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <nrf_gpio_init+0x100>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a25      	ldr	r2, [pc, #148]	@ (8001270 <nrf_gpio_init+0x100>)
 80011da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80011de:	6013      	str	r3, [r2, #0]
    
    // PA6 MISO - Input Floating
    GPIOA->CRL &= ~(GPIO_CRL_MODE6_0 | GPIO_CRL_MODE6_1); 
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <nrf_gpio_init+0x100>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a22      	ldr	r2, [pc, #136]	@ (8001270 <nrf_gpio_init+0x100>)
 80011e6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80011ea:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF6_1;                       
 80011ec:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <nrf_gpio_init+0x100>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001270 <nrf_gpio_init+0x100>)
 80011f2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80011f6:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_CNF6_0);
 80011f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <nrf_gpio_init+0x100>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001270 <nrf_gpio_init+0x100>)
 80011fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001202:	6013      	str	r3, [r2, #0]
    
    // NRF24L01 control pins
    // CE pin (PB0) - Output Push-Pull
    GPIOB->CRL &= ~(0xF << (4 * 0));
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <nrf_gpio_init+0x104>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1a      	ldr	r2, [pc, #104]	@ (8001274 <nrf_gpio_init+0x104>)
 800120a:	f023 030f 	bic.w	r3, r3, #15
 800120e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (0x3 << (4 * 0));
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <nrf_gpio_init+0x104>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <nrf_gpio_init+0x104>)
 8001216:	f043 0303 	orr.w	r3, r3, #3
 800121a:	6013      	str	r3, [r2, #0]
    
    // CSN pin (PA1) - Output Push-Pull  
    GPIOA->CRL &= ~(0xF << (4 * 1));
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <nrf_gpio_init+0x100>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <nrf_gpio_init+0x100>)
 8001222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001226:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x3 << (4 * 1));
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <nrf_gpio_init+0x100>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <nrf_gpio_init+0x100>)
 800122e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001232:	6013      	str	r3, [r2, #0]
    
    // IRQ pin (PA2) - Input Pull-up
    GPIOA->CRL &= ~(0xF << (4 * 2));
 8001234:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <nrf_gpio_init+0x100>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <nrf_gpio_init+0x100>)
 800123a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800123e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8 << (4 * 2));
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <nrf_gpio_init+0x100>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <nrf_gpio_init+0x100>)
 8001246:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800124a:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= NRF_IRQ_PIN;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <nrf_gpio_init+0x100>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a07      	ldr	r2, [pc, #28]	@ (8001270 <nrf_gpio_init+0x100>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	60d3      	str	r3, [r2, #12]
    
    // Initial states
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <nrf_gpio_init+0x100>)
 800125a:	2202      	movs	r2, #2
 800125c:	611a      	str	r2, [r3, #16]
    NRF_CE_PORT->BRR = NRF_CE_PIN;    // CE low
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <nrf_gpio_init+0x104>)
 8001260:	2201      	movs	r2, #1
 8001262:	615a      	str	r2, [r3, #20]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00

08001278 <spi_init>:

// init spi
void spi_init(void){
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    SPI1->CR1 &= ~((1 << 0) | (1 << 1)); // CPOL=0, CPHA=0
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <spi_init+0x70>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <spi_init+0x70>)
 8001282:	f023 0303 	bic.w	r3, r3, #3
 8001286:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 2);             // Master Mode
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <spi_init+0x70>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a16      	ldr	r2, [pc, #88]	@ (80012e8 <spi_init+0x70>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (2 << 3);             // BR[2:0] = 010: fPCLK/8
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <spi_init+0x70>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a13      	ldr	r2, [pc, #76]	@ (80012e8 <spi_init+0x70>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 7);            // MSB first
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <spi_init+0x70>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <spi_init+0x70>)
 80012a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012aa:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 8) | (1 << 9);  // Software Slave Management
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <spi_init+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <spi_init+0x70>)
 80012b2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80012b6:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 10);           // Full-duplex
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <spi_init+0x70>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <spi_init+0x70>)
 80012be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012c2:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 11);           // 8 bit data
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <spi_init+0x70>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	@ (80012e8 <spi_init+0x70>)
 80012ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012ce:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 6);             // Enable SPI
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <spi_init+0x70>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <spi_init+0x70>)
 80012d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012da:	6013      	str	r3, [r2, #0]
    delay_ms(10);
 80012dc:	200a      	movs	r0, #10
 80012de:	f7ff ff29 	bl	8001134 <delay_ms>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013000 	.word	0x40013000

080012ec <spi_transfer>:

// basic spi transfer 
uint8_t spi_transfer(uint8_t data){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));   
 80012f6:	bf00      	nop
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <spi_transfer+0x3c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f9      	beq.n	80012f8 <spi_transfer+0xc>
    SPI1->DR = data;
 8001304:	4a08      	ldr	r2, [pc, #32]	@ (8001328 <spi_transfer+0x3c>)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	60d3      	str	r3, [r2, #12]
    while (!(SPI1->SR & SPI_SR_RXNE));  
 800130a:	bf00      	nop
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <spi_transfer+0x3c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f9      	beq.n	800130c <spi_transfer+0x20>
    return SPI1->DR;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <spi_transfer+0x3c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	b2db      	uxtb	r3, r3
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	40013000 	.word	0x40013000

0800132c <nrf_write_reg>:

// write in registers
void nrf_write_reg(uint8_t reg, uint8_t value){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
    NRF_CSN_PORT->BRR = NRF_CSN_PIN; // CSN low
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <nrf_write_reg+0x40>)
 800133e:	2202      	movs	r2, #2
 8001340:	615a      	str	r2, [r3, #20]
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0320 	orr.w	r3, r3, #32
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffcb 	bl	80012ec <spi_transfer>
    spi_transfer(value);
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ffc7 	bl	80012ec <spi_transfer>
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high 
 800135e:	4b03      	ldr	r3, [pc, #12]	@ (800136c <nrf_write_reg+0x40>)
 8001360:	2202      	movs	r2, #2
 8001362:	611a      	str	r2, [r3, #16]
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010800 	.word	0x40010800

08001370 <nrf_read_reg>:

// read registers
uint8_t nrf_read_reg(uint8_t reg){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
    NRF_CSN_PORT->BRR = NRF_CSN_PIN; // CSN low
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <nrf_read_reg+0x38>)
 800137c:	2202      	movs	r2, #2
 800137e:	615a      	str	r2, [r3, #20]
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ffaf 	bl	80012ec <spi_transfer>
    uint8_t value = spi_transfer(0xFF);
 800138e:	20ff      	movs	r0, #255	@ 0xff
 8001390:	f7ff ffac 	bl	80012ec <spi_transfer>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <nrf_read_reg+0x38>)
 800139a:	2202      	movs	r2, #2
 800139c:	611a      	str	r2, [r3, #16]
    return value;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010800 	.word	0x40010800

080013ac <nrf_write_buf>:

// buffer write
void nrf_write_buf(uint8_t reg, uint8_t *buf, uint8_t len){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
    NRF_CSN_PORT->BRR = NRF_CSN_PIN; // CSN low
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <nrf_write_buf+0x5c>)
 80013be:	2202      	movs	r2, #2
 80013c0:	615a      	str	r2, [r3, #20]
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff8b 	bl	80012ec <spi_transfer>
    for (uint8_t i = 0; i < len; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e009      	b.n	80013f0 <nrf_write_buf+0x44>
        spi_transfer(buf[i]);
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff81 	bl	80012ec <spi_transfer>
    for (uint8_t i = 0; i < len; i++) {
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3f1      	bcc.n	80013dc <nrf_write_buf+0x30>
    }
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <nrf_write_buf+0x5c>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	611a      	str	r2, [r3, #16]
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40010800 	.word	0x40010800

0800140c <nrf_flush_tx>:
    }
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN; // CSN high
}

// FUNÇÃO CORRIGIDA PARA FLUSH
void nrf_flush_tx(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    NRF_CSN_PORT->BRR = NRF_CSN_PIN;
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <nrf_flush_tx+0x1c>)
 8001412:	2202      	movs	r2, #2
 8001414:	615a      	str	r2, [r3, #20]
    spi_transfer(FLUSH_TX);
 8001416:	20e1      	movs	r0, #225	@ 0xe1
 8001418:	f7ff ff68 	bl	80012ec <spi_transfer>
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN;
 800141c:	4b02      	ldr	r3, [pc, #8]	@ (8001428 <nrf_flush_tx+0x1c>)
 800141e:	2202      	movs	r2, #2
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010800 	.word	0x40010800

0800142c <nrf_flush_rx>:

void nrf_flush_rx(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    NRF_CSN_PORT->BRR = NRF_CSN_PIN;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <nrf_flush_rx+0x1c>)
 8001432:	2202      	movs	r2, #2
 8001434:	615a      	str	r2, [r3, #20]
    spi_transfer(FLUSH_RX);
 8001436:	20e2      	movs	r0, #226	@ 0xe2
 8001438:	f7ff ff58 	bl	80012ec <spi_transfer>
    NRF_CSN_PORT->BSRR = NRF_CSN_PIN;
 800143c:	4b02      	ldr	r3, [pc, #8]	@ (8001448 <nrf_flush_rx+0x1c>)
 800143e:	2202      	movs	r2, #2
 8001440:	611a      	str	r2, [r3, #16]
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010800 	.word	0x40010800

0800144c <nrf_init>:

// init module
void nrf_init(uint8_t mode){
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
    nrf_gpio_init();
 8001456:	f7ff fe8b 	bl	8001170 <nrf_gpio_init>
    spi_init();
 800145a:	f7ff ff0d 	bl	8001278 <spi_init>
    
    // power down and wait
    nrf_write_reg(CONFIG, 0);
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff ff63 	bl	800132c <nrf_write_reg>
    delay_ms(5);
 8001466:	2005      	movs	r0, #5
 8001468:	f7ff fe64 	bl	8001134 <delay_ms>
    
    // basic setup
    nrf_write_reg(EN_AA, ENAA_P0);       
 800146c:	2101      	movs	r1, #1
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ff5c 	bl	800132c <nrf_write_reg>
    nrf_write_reg(EN_RXADDR, ERX_P0);    
 8001474:	2101      	movs	r1, #1
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff ff58 	bl	800132c <nrf_write_reg>
    nrf_write_reg(SETUP_AW, AW_5BYTES);  
 800147c:	2103      	movs	r1, #3
 800147e:	2003      	movs	r0, #3
 8001480:	f7ff ff54 	bl	800132c <nrf_write_reg>
    nrf_write_reg(SETUP_RETR, (ARD_250US<<4) | ARC_15RET); 
 8001484:	210f      	movs	r1, #15
 8001486:	2004      	movs	r0, #4
 8001488:	f7ff ff50 	bl	800132c <nrf_write_reg>
    nrf_write_reg(RF_CH, RF_CH_10);      
 800148c:	210a      	movs	r1, #10
 800148e:	2005      	movs	r0, #5
 8001490:	f7ff ff4c 	bl	800132c <nrf_write_reg>
    nrf_write_reg(RF_SETUP, RF_DR_2MBPS | RF_PWR_0DBM); 
 8001494:	210e      	movs	r1, #14
 8001496:	2006      	movs	r0, #6
 8001498:	f7ff ff48 	bl	800132c <nrf_write_reg>
    
    // enable CRC (2 bytes)
    uint8_t config = EN_CRC | CRCO;
 800149c:	230c      	movs	r3, #12
 800149e:	75fb      	strb	r3, [r7, #23]
    nrf_write_reg(CONFIG, config);
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	4619      	mov	r1, r3
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff ff41 	bl	800132c <nrf_write_reg>
    
    // default addresses
    uint8_t tx_addr[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80014aa:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <nrf_init+0xfc>)
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b4:	6018      	str	r0, [r3, #0]
 80014b6:	3304      	adds	r3, #4
 80014b8:	7019      	strb	r1, [r3, #0]
    uint8_t rx_addr[5] = {0xD7, 0xD7, 0xD7, 0xD7, 0xD7};
 80014ba:	4a24      	ldr	r2, [pc, #144]	@ (800154c <nrf_init+0x100>)
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014c4:	6018      	str	r0, [r3, #0]
 80014c6:	3304      	adds	r3, #4
 80014c8:	7019      	strb	r1, [r3, #0]
    
    nrf_set_tx_addr(tx_addr, 5);
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	2105      	movs	r1, #5
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f877 	bl	80015c4 <nrf_set_tx_addr>
    nrf_set_rx_addr(0, rx_addr, 5);
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2205      	movs	r2, #5
 80014dc:	4619      	mov	r1, r3
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f880 	bl	80015e4 <nrf_set_rx_addr>
    
    // payload length
    nrf_write_reg(RX_PW_P0, 32);
 80014e4:	2120      	movs	r1, #32
 80014e6:	2011      	movs	r0, #17
 80014e8:	f7ff ff20 	bl	800132c <nrf_write_reg>
    
    // enable features
    nrf_write_reg(FEATURE, EN_DPL | EN_ACK_PAY);
 80014ec:	2106      	movs	r1, #6
 80014ee:	201d      	movs	r0, #29
 80014f0:	f7ff ff1c 	bl	800132c <nrf_write_reg>
    nrf_write_reg(DYNPD, (1<<DPL_P0));
 80014f4:	2102      	movs	r1, #2
 80014f6:	201c      	movs	r0, #28
 80014f8:	f7ff ff18 	bl	800132c <nrf_write_reg>
    
    // clear FIFOs and status - CORRIGIDO
    nrf_flush_tx();
 80014fc:	f7ff ff86 	bl	800140c <nrf_flush_tx>
    nrf_flush_rx();
 8001500:	f7ff ff94 	bl	800142c <nrf_flush_rx>
    nrf_write_reg(STATUS, RX_DR | TX_DS | MAX_RT);
 8001504:	2170      	movs	r1, #112	@ 0x70
 8001506:	2007      	movs	r0, #7
 8001508:	f7ff ff10 	bl	800132c <nrf_write_reg>
    
    // setup mode
    if (mode == NRF_MODE_TX) {
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <nrf_init+0xd8>
        nrf_write_reg(CONFIG, config | PWR_UP);
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff ff05 	bl	800132c <nrf_write_reg>
 8001522:	e00a      	b.n	800153a <nrf_init+0xee>
    } else {
        nrf_write_reg(CONFIG, config | PWR_UP | PRIM_RX);
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	f043 0303 	orr.w	r3, r3, #3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff fefc 	bl	800132c <nrf_write_reg>
        NRF_CE_PORT->BSRR = NRF_CE_PIN; // start receive
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <nrf_init+0x104>)
 8001536:	2201      	movs	r2, #1
 8001538:	611a      	str	r2, [r3, #16]
    }
    delay_ms(5);
 800153a:	2005      	movs	r0, #5
 800153c:	f7ff fdfa 	bl	8001134 <delay_ms>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08002e3c 	.word	0x08002e3c
 800154c:	08002e44 	.word	0x08002e44
 8001550:	40010c00 	.word	0x40010c00

08001554 <nrf_receive>:
    
    return (status & TX_DS) ? 1 : 0;
}

// data reception
uint8_t nrf_receive(uint8_t *data, uint8_t len){
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
    uint8_t status = nrf_read_reg(STATUS);
 8001560:	2007      	movs	r0, #7
 8001562:	f7ff ff05 	bl	8001370 <nrf_read_reg>
 8001566:	4603      	mov	r3, r0
 8001568:	73bb      	strb	r3, [r7, #14]
    
    if (status & RX_DR) {
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <nrf_receive+0x62>
        NRF_CSN_PORT->BRR = NRF_CSN_PIN;
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <nrf_receive+0x6c>)
 8001576:	2202      	movs	r2, #2
 8001578:	615a      	str	r2, [r3, #20]
        spi_transfer(R_RX_PAYLOAD);
 800157a:	2061      	movs	r0, #97	@ 0x61
 800157c:	f7ff feb6 	bl	80012ec <spi_transfer>
        for (uint8_t i = 0; i < len; i++) {
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e00a      	b.n	800159c <nrf_receive+0x48>
            data[i] = spi_transfer(0xFF);
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	18d4      	adds	r4, r2, r3
 800158c:	20ff      	movs	r0, #255	@ 0xff
 800158e:	f7ff fead 	bl	80012ec <spi_transfer>
 8001592:	4603      	mov	r3, r0
 8001594:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < len; i++) {
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	3301      	adds	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3f0      	bcc.n	8001586 <nrf_receive+0x32>
        }
        NRF_CSN_PORT->BSRR = NRF_CSN_PIN;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <nrf_receive+0x6c>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	611a      	str	r2, [r3, #16]
        
        nrf_write_reg(STATUS, RX_DR);
 80015aa:	2140      	movs	r1, #64	@ 0x40
 80015ac:	2007      	movs	r0, #7
 80015ae:	f7ff febd 	bl	800132c <nrf_write_reg>
        return 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <nrf_receive+0x64>
    }
    return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}
 80015c0:	40010800 	.word	0x40010800

080015c4 <nrf_set_tx_addr>:

// setup transmission address
void nrf_set_tx_addr(uint8_t *addr, uint8_t len){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
    nrf_write_buf(TX_ADDR, addr, len);
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	461a      	mov	r2, r3
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	2010      	movs	r0, #16
 80015d8:	f7ff fee8 	bl	80013ac <nrf_write_buf>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <nrf_set_rx_addr>:

// setup reception address - CORRIGIDO
void nrf_set_rx_addr(uint8_t pipe, uint8_t *addr, uint8_t len){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
    if (pipe == 0) {
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <nrf_set_rx_addr+0x24>
        nrf_write_buf(RX_ADDR_P0, addr, len);
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	461a      	mov	r2, r3
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	200a      	movs	r0, #10
 8001602:	f7ff fed3 	bl	80013ac <nrf_write_buf>
        nrf_write_buf(RX_ADDR_P1, addr, len);
    } else if (pipe >= 2 && pipe <= 5) {
        // pipes 2-5 use only LSB
        nrf_write_reg(RX_ADDR_P2 + (pipe-2), addr[0]);
    }
}
 8001606:	e018      	b.n	800163a <nrf_set_rx_addr+0x56>
    } else if (pipe == 1) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d106      	bne.n	800161c <nrf_set_rx_addr+0x38>
        nrf_write_buf(RX_ADDR_P1, addr, len);
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	461a      	mov	r2, r3
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	200b      	movs	r0, #11
 8001616:	f7ff fec9 	bl	80013ac <nrf_write_buf>
}
 800161a:	e00e      	b.n	800163a <nrf_set_rx_addr+0x56>
    } else if (pipe >= 2 && pipe <= 5) {
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d90b      	bls.n	800163a <nrf_set_rx_addr+0x56>
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d808      	bhi.n	800163a <nrf_set_rx_addr+0x56>
        nrf_write_reg(RX_ADDR_P2 + (pipe-2), addr[0]);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	330a      	adds	r3, #10
 800162c:	b2da      	uxtb	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f7ff fe79 	bl	800132c <nrf_write_reg>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <nrf_data_available>:
    uint8_t config = nrf_read_reg(CONFIG);
    nrf_write_reg(CONFIG, config & ~PWR_UP);
}

// status functions
uint8_t nrf_data_available(void){
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
    uint8_t status = nrf_read_reg(STATUS);
 8001648:	2007      	movs	r0, #7
 800164a:	f7ff fe91 	bl	8001370 <nrf_read_reg>
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
    return (status & RX_DR);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001658:	b2db      	uxtb	r3, r3
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e00a      	b.n	800168a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001674:	f3af 8000 	nop.w
 8001678:	4601      	mov	r1, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	60ba      	str	r2, [r7, #8]
 8001680:	b2ca      	uxtb	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf0      	blt.n	8001674 <_read+0x12>
  }

  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e009      	b.n	80016c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	60ba      	str	r2, [r7, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f8bc 	bl	8001834 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbf1      	blt.n	80016ae <_write+0x12>
  }
  return len;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_close>:

int _close(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <_isatty>:

int _isatty(int file)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	@ (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f000 fb4e 	bl	8001e04 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20005000 	.word	0x20005000
 8001794:	00000400 	.word	0x00000400
 8001798:	20000088 	.word	0x20000088
 800179c:	200001d8 	.word	0x200001d8

080017a0 <USART1_Init>:
#include "uart.h"

void USART1_Init(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <USART1_Init+0x5c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <USART1_Init+0x5c>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6193      	str	r3, [r2, #24]

    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <USART1_Init+0x60>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a11      	ldr	r2, [pc, #68]	@ (8001800 <USART1_Init+0x60>)
 80017ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017be:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0) | GPIO_CRH_CNF9_1;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <USART1_Init+0x60>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <USART1_Init+0x60>)
 80017c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80017ca:	6053      	str	r3, [r2, #4]

    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <USART1_Init+0x60>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <USART1_Init+0x60>)
 80017d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017d6:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  GPIO_CRH_CNF10_0;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <USART1_Init+0x60>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <USART1_Init+0x60>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e2:	6053      	str	r3, [r2, #4]

    USART1->BRR = 72000000UL / 9600UL;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <USART1_Init+0x64>)
 80017e6:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80017ea:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <USART1_Init+0x64>)
 80017ee:	f242 020c 	movw	r2, #8204	@ 0x200c
 80017f2:	60da      	str	r2, [r3, #12]
}   
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800
 8001804:	40013800 	.word	0x40013800

08001808 <USART1_SendChar>:
    while (!(USART1->SR & USART_SR_RXNE));
    return (char)USART1->DR;
}

void USART1_SendChar(char c)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 8001812:	bf00      	nop
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <USART1_SendChar+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f9      	beq.n	8001814 <USART1_SendChar+0xc>
    USART1->DR = (uint16_t)c;
 8001820:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <USART1_SendChar+0x28>)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	6053      	str	r3, [r2, #4]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40013800 	.word	0x40013800

08001834 <__io_putchar>:

int __io_putchar(int ch)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    USART1_SendChar((char)ch);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ffe1 	bl	8001808 <USART1_SendChar>
    return ch;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001850:	480d      	ldr	r0, [pc, #52]	@ (8001888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001852:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001854:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopForever+0x6>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopForever+0xe>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopForever+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800187e:	f000 fac7 	bl	8001e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001882:	f7ff fbaf 	bl	8000fe4 <main>

08001886 <LoopForever>:

LoopForever:
  b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   r0, =_estack
 8001888:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001894:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 8001898:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800189c:	200001d8 	.word	0x200001d8

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>
	...

080018a4 <std>:
 80018a4:	2300      	movs	r3, #0
 80018a6:	b510      	push	{r4, lr}
 80018a8:	4604      	mov	r4, r0
 80018aa:	e9c0 3300 	strd	r3, r3, [r0]
 80018ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018b2:	6083      	str	r3, [r0, #8]
 80018b4:	8181      	strh	r1, [r0, #12]
 80018b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80018b8:	81c2      	strh	r2, [r0, #14]
 80018ba:	6183      	str	r3, [r0, #24]
 80018bc:	4619      	mov	r1, r3
 80018be:	2208      	movs	r2, #8
 80018c0:	305c      	adds	r0, #92	@ 0x5c
 80018c2:	f000 fa51 	bl	8001d68 <memset>
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <std+0x58>)
 80018c8:	6224      	str	r4, [r4, #32]
 80018ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <std+0x5c>)
 80018ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <std+0x60>)
 80018d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <std+0x64>)
 80018d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <std+0x68>)
 80018da:	429c      	cmp	r4, r3
 80018dc:	d006      	beq.n	80018ec <std+0x48>
 80018de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80018e2:	4294      	cmp	r4, r2
 80018e4:	d002      	beq.n	80018ec <std+0x48>
 80018e6:	33d0      	adds	r3, #208	@ 0xd0
 80018e8:	429c      	cmp	r4, r3
 80018ea:	d105      	bne.n	80018f8 <std+0x54>
 80018ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80018f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018f4:	f000 bab0 	b.w	8001e58 <__retarget_lock_init_recursive>
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	bf00      	nop
 80018fc:	08001bb9 	.word	0x08001bb9
 8001900:	08001bdb 	.word	0x08001bdb
 8001904:	08001c13 	.word	0x08001c13
 8001908:	08001c37 	.word	0x08001c37
 800190c:	2000008c 	.word	0x2000008c

08001910 <stdio_exit_handler>:
 8001910:	4a02      	ldr	r2, [pc, #8]	@ (800191c <stdio_exit_handler+0xc>)
 8001912:	4903      	ldr	r1, [pc, #12]	@ (8001920 <stdio_exit_handler+0x10>)
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <stdio_exit_handler+0x14>)
 8001916:	f000 b869 	b.w	80019ec <_fwalk_sglue>
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000
 8001920:	0800299d 	.word	0x0800299d
 8001924:	20000010 	.word	0x20000010

08001928 <cleanup_stdio>:
 8001928:	6841      	ldr	r1, [r0, #4]
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <cleanup_stdio+0x34>)
 800192c:	b510      	push	{r4, lr}
 800192e:	4299      	cmp	r1, r3
 8001930:	4604      	mov	r4, r0
 8001932:	d001      	beq.n	8001938 <cleanup_stdio+0x10>
 8001934:	f001 f832 	bl	800299c <_fflush_r>
 8001938:	68a1      	ldr	r1, [r4, #8]
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <cleanup_stdio+0x38>)
 800193c:	4299      	cmp	r1, r3
 800193e:	d002      	beq.n	8001946 <cleanup_stdio+0x1e>
 8001940:	4620      	mov	r0, r4
 8001942:	f001 f82b 	bl	800299c <_fflush_r>
 8001946:	68e1      	ldr	r1, [r4, #12]
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <cleanup_stdio+0x3c>)
 800194a:	4299      	cmp	r1, r3
 800194c:	d004      	beq.n	8001958 <cleanup_stdio+0x30>
 800194e:	4620      	mov	r0, r4
 8001950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001954:	f001 b822 	b.w	800299c <_fflush_r>
 8001958:	bd10      	pop	{r4, pc}
 800195a:	bf00      	nop
 800195c:	2000008c 	.word	0x2000008c
 8001960:	200000f4 	.word	0x200000f4
 8001964:	2000015c 	.word	0x2000015c

08001968 <global_stdio_init.part.0>:
 8001968:	b510      	push	{r4, lr}
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <global_stdio_init.part.0+0x30>)
 800196c:	4c0b      	ldr	r4, [pc, #44]	@ (800199c <global_stdio_init.part.0+0x34>)
 800196e:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <global_stdio_init.part.0+0x38>)
 8001970:	4620      	mov	r0, r4
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	2104      	movs	r1, #4
 8001976:	2200      	movs	r2, #0
 8001978:	f7ff ff94 	bl	80018a4 <std>
 800197c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001980:	2201      	movs	r2, #1
 8001982:	2109      	movs	r1, #9
 8001984:	f7ff ff8e 	bl	80018a4 <std>
 8001988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800198c:	2202      	movs	r2, #2
 800198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001992:	2112      	movs	r1, #18
 8001994:	f7ff bf86 	b.w	80018a4 <std>
 8001998:	200001c4 	.word	0x200001c4
 800199c:	2000008c 	.word	0x2000008c
 80019a0:	08001911 	.word	0x08001911

080019a4 <__sfp_lock_acquire>:
 80019a4:	4801      	ldr	r0, [pc, #4]	@ (80019ac <__sfp_lock_acquire+0x8>)
 80019a6:	f000 ba58 	b.w	8001e5a <__retarget_lock_acquire_recursive>
 80019aa:	bf00      	nop
 80019ac:	200001cd 	.word	0x200001cd

080019b0 <__sfp_lock_release>:
 80019b0:	4801      	ldr	r0, [pc, #4]	@ (80019b8 <__sfp_lock_release+0x8>)
 80019b2:	f000 ba53 	b.w	8001e5c <__retarget_lock_release_recursive>
 80019b6:	bf00      	nop
 80019b8:	200001cd 	.word	0x200001cd

080019bc <__sinit>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	4604      	mov	r4, r0
 80019c0:	f7ff fff0 	bl	80019a4 <__sfp_lock_acquire>
 80019c4:	6a23      	ldr	r3, [r4, #32]
 80019c6:	b11b      	cbz	r3, 80019d0 <__sinit+0x14>
 80019c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019cc:	f7ff bff0 	b.w	80019b0 <__sfp_lock_release>
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <__sinit+0x28>)
 80019d2:	6223      	str	r3, [r4, #32]
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__sinit+0x2c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f5      	bne.n	80019c8 <__sinit+0xc>
 80019dc:	f7ff ffc4 	bl	8001968 <global_stdio_init.part.0>
 80019e0:	e7f2      	b.n	80019c8 <__sinit+0xc>
 80019e2:	bf00      	nop
 80019e4:	08001929 	.word	0x08001929
 80019e8:	200001c4 	.word	0x200001c4

080019ec <_fwalk_sglue>:
 80019ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019f0:	4607      	mov	r7, r0
 80019f2:	4688      	mov	r8, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	2600      	movs	r6, #0
 80019f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019fc:	f1b9 0901 	subs.w	r9, r9, #1
 8001a00:	d505      	bpl.n	8001a0e <_fwalk_sglue+0x22>
 8001a02:	6824      	ldr	r4, [r4, #0]
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d1f7      	bne.n	80019f8 <_fwalk_sglue+0xc>
 8001a08:	4630      	mov	r0, r6
 8001a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a0e:	89ab      	ldrh	r3, [r5, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d907      	bls.n	8001a24 <_fwalk_sglue+0x38>
 8001a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	d003      	beq.n	8001a24 <_fwalk_sglue+0x38>
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	4638      	mov	r0, r7
 8001a20:	47c0      	blx	r8
 8001a22:	4306      	orrs	r6, r0
 8001a24:	3568      	adds	r5, #104	@ 0x68
 8001a26:	e7e9      	b.n	80019fc <_fwalk_sglue+0x10>

08001a28 <iprintf>:
 8001a28:	b40f      	push	{r0, r1, r2, r3}
 8001a2a:	b507      	push	{r0, r1, r2, lr}
 8001a2c:	4906      	ldr	r1, [pc, #24]	@ (8001a48 <iprintf+0x20>)
 8001a2e:	ab04      	add	r3, sp, #16
 8001a30:	6808      	ldr	r0, [r1, #0]
 8001a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a36:	6881      	ldr	r1, [r0, #8]
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	f000 fc87 	bl	800234c <_vfiprintf_r>
 8001a3e:	b003      	add	sp, #12
 8001a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a44:	b004      	add	sp, #16
 8001a46:	4770      	bx	lr
 8001a48:	2000000c 	.word	0x2000000c

08001a4c <_puts_r>:
 8001a4c:	6a03      	ldr	r3, [r0, #32]
 8001a4e:	b570      	push	{r4, r5, r6, lr}
 8001a50:	4605      	mov	r5, r0
 8001a52:	460e      	mov	r6, r1
 8001a54:	6884      	ldr	r4, [r0, #8]
 8001a56:	b90b      	cbnz	r3, 8001a5c <_puts_r+0x10>
 8001a58:	f7ff ffb0 	bl	80019bc <__sinit>
 8001a5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a5e:	07db      	lsls	r3, r3, #31
 8001a60:	d405      	bmi.n	8001a6e <_puts_r+0x22>
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	0598      	lsls	r0, r3, #22
 8001a66:	d402      	bmi.n	8001a6e <_puts_r+0x22>
 8001a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a6a:	f000 f9f6 	bl	8001e5a <__retarget_lock_acquire_recursive>
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	0719      	lsls	r1, r3, #28
 8001a72:	d502      	bpl.n	8001a7a <_puts_r+0x2e>
 8001a74:	6923      	ldr	r3, [r4, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d135      	bne.n	8001ae6 <_puts_r+0x9a>
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f000 f91d 	bl	8001cbc <__swsetup_r>
 8001a82:	b380      	cbz	r0, 8001ae6 <_puts_r+0x9a>
 8001a84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001a88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a8a:	07da      	lsls	r2, r3, #31
 8001a8c:	d405      	bmi.n	8001a9a <_puts_r+0x4e>
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	059b      	lsls	r3, r3, #22
 8001a92:	d402      	bmi.n	8001a9a <_puts_r+0x4e>
 8001a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a96:	f000 f9e1 	bl	8001e5c <__retarget_lock_release_recursive>
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da04      	bge.n	8001aac <_puts_r+0x60>
 8001aa2:	69a2      	ldr	r2, [r4, #24]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dc17      	bgt.n	8001ad8 <_puts_r+0x8c>
 8001aa8:	290a      	cmp	r1, #10
 8001aaa:	d015      	beq.n	8001ad8 <_puts_r+0x8c>
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	6022      	str	r2, [r4, #0]
 8001ab2:	7019      	strb	r1, [r3, #0]
 8001ab4:	68a3      	ldr	r3, [r4, #8]
 8001ab6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001aba:	3b01      	subs	r3, #1
 8001abc:	60a3      	str	r3, [r4, #8]
 8001abe:	2900      	cmp	r1, #0
 8001ac0:	d1ed      	bne.n	8001a9e <_puts_r+0x52>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da11      	bge.n	8001aea <_puts_r+0x9e>
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	210a      	movs	r1, #10
 8001aca:	4628      	mov	r0, r5
 8001acc:	f000 f8b7 	bl	8001c3e <__swbuf_r>
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	d0d7      	beq.n	8001a84 <_puts_r+0x38>
 8001ad4:	250a      	movs	r5, #10
 8001ad6:	e7d7      	b.n	8001a88 <_puts_r+0x3c>
 8001ad8:	4622      	mov	r2, r4
 8001ada:	4628      	mov	r0, r5
 8001adc:	f000 f8af 	bl	8001c3e <__swbuf_r>
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d1e7      	bne.n	8001ab4 <_puts_r+0x68>
 8001ae4:	e7ce      	b.n	8001a84 <_puts_r+0x38>
 8001ae6:	3e01      	subs	r6, #1
 8001ae8:	e7e4      	b.n	8001ab4 <_puts_r+0x68>
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	6022      	str	r2, [r4, #0]
 8001af0:	220a      	movs	r2, #10
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e7ee      	b.n	8001ad4 <_puts_r+0x88>
	...

08001af8 <puts>:
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <puts+0xc>)
 8001afa:	4601      	mov	r1, r0
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f7ff bfa5 	b.w	8001a4c <_puts_r>
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c

08001b08 <sniprintf>:
 8001b08:	b40c      	push	{r2, r3}
 8001b0a:	b530      	push	{r4, r5, lr}
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <sniprintf+0x68>)
 8001b0e:	1e0c      	subs	r4, r1, #0
 8001b10:	681d      	ldr	r5, [r3, #0]
 8001b12:	b09d      	sub	sp, #116	@ 0x74
 8001b14:	da08      	bge.n	8001b28 <sniprintf+0x20>
 8001b16:	238b      	movs	r3, #139	@ 0x8b
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b1c:	602b      	str	r3, [r5, #0]
 8001b1e:	b01d      	add	sp, #116	@ 0x74
 8001b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b24:	b002      	add	sp, #8
 8001b26:	4770      	bx	lr
 8001b28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001b2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001b36:	bf0c      	ite	eq
 8001b38:	4623      	moveq	r3, r4
 8001b3a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8001b3e:	9304      	str	r3, [sp, #16]
 8001b40:	9307      	str	r3, [sp, #28]
 8001b42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b46:	9002      	str	r0, [sp, #8]
 8001b48:	9006      	str	r0, [sp, #24]
 8001b4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001b4e:	4628      	mov	r0, r5
 8001b50:	ab21      	add	r3, sp, #132	@ 0x84
 8001b52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001b54:	a902      	add	r1, sp, #8
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	f000 fad4 	bl	8002104 <_svfiprintf_r>
 8001b5c:	1c43      	adds	r3, r0, #1
 8001b5e:	bfbc      	itt	lt
 8001b60:	238b      	movlt	r3, #139	@ 0x8b
 8001b62:	602b      	strlt	r3, [r5, #0]
 8001b64:	2c00      	cmp	r4, #0
 8001b66:	d0da      	beq.n	8001b1e <sniprintf+0x16>
 8001b68:	2200      	movs	r2, #0
 8001b6a:	9b02      	ldr	r3, [sp, #8]
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e7d6      	b.n	8001b1e <sniprintf+0x16>
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <siprintf>:
 8001b74:	b40e      	push	{r1, r2, r3}
 8001b76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001b7a:	b510      	push	{r4, lr}
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	b09d      	sub	sp, #116	@ 0x74
 8001b80:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001b82:	9002      	str	r0, [sp, #8]
 8001b84:	9006      	str	r0, [sp, #24]
 8001b86:	9107      	str	r1, [sp, #28]
 8001b88:	9104      	str	r1, [sp, #16]
 8001b8a:	4809      	ldr	r0, [pc, #36]	@ (8001bb0 <siprintf+0x3c>)
 8001b8c:	4909      	ldr	r1, [pc, #36]	@ (8001bb4 <siprintf+0x40>)
 8001b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b92:	9105      	str	r1, [sp, #20]
 8001b94:	6800      	ldr	r0, [r0, #0]
 8001b96:	a902      	add	r1, sp, #8
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001b9c:	f000 fab2 	bl	8002104 <_svfiprintf_r>
 8001ba0:	9b02      	ldr	r3, [sp, #8]
 8001ba2:	701c      	strb	r4, [r3, #0]
 8001ba4:	b01d      	add	sp, #116	@ 0x74
 8001ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001baa:	b003      	add	sp, #12
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	ffff0208 	.word	0xffff0208

08001bb8 <__sread>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	460c      	mov	r4, r1
 8001bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bc0:	f000 f8fc 	bl	8001dbc <_read_r>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	bfab      	itete	ge
 8001bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001bca:	89a3      	ldrhlt	r3, [r4, #12]
 8001bcc:	181b      	addge	r3, r3, r0
 8001bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001bd2:	bfac      	ite	ge
 8001bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001bd6:	81a3      	strhlt	r3, [r4, #12]
 8001bd8:	bd10      	pop	{r4, pc}

08001bda <__swrite>:
 8001bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bde:	461f      	mov	r7, r3
 8001be0:	898b      	ldrh	r3, [r1, #12]
 8001be2:	4605      	mov	r5, r0
 8001be4:	05db      	lsls	r3, r3, #23
 8001be6:	460c      	mov	r4, r1
 8001be8:	4616      	mov	r6, r2
 8001bea:	d505      	bpl.n	8001bf8 <__swrite+0x1e>
 8001bec:	2302      	movs	r3, #2
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf4:	f000 f8d0 	bl	8001d98 <_lseek_r>
 8001bf8:	89a3      	ldrh	r3, [r4, #12]
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c00:	81a3      	strh	r3, [r4, #12]
 8001c02:	4628      	mov	r0, r5
 8001c04:	463b      	mov	r3, r7
 8001c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0e:	f000 b8e7 	b.w	8001de0 <_write_r>

08001c12 <__sseek>:
 8001c12:	b510      	push	{r4, lr}
 8001c14:	460c      	mov	r4, r1
 8001c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c1a:	f000 f8bd 	bl	8001d98 <_lseek_r>
 8001c1e:	1c43      	adds	r3, r0, #1
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	bf15      	itete	ne
 8001c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001c2e:	81a3      	strheq	r3, [r4, #12]
 8001c30:	bf18      	it	ne
 8001c32:	81a3      	strhne	r3, [r4, #12]
 8001c34:	bd10      	pop	{r4, pc}

08001c36 <__sclose>:
 8001c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c3a:	f000 b89d 	b.w	8001d78 <_close_r>

08001c3e <__swbuf_r>:
 8001c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c40:	460e      	mov	r6, r1
 8001c42:	4614      	mov	r4, r2
 8001c44:	4605      	mov	r5, r0
 8001c46:	b118      	cbz	r0, 8001c50 <__swbuf_r+0x12>
 8001c48:	6a03      	ldr	r3, [r0, #32]
 8001c4a:	b90b      	cbnz	r3, 8001c50 <__swbuf_r+0x12>
 8001c4c:	f7ff feb6 	bl	80019bc <__sinit>
 8001c50:	69a3      	ldr	r3, [r4, #24]
 8001c52:	60a3      	str	r3, [r4, #8]
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	071a      	lsls	r2, r3, #28
 8001c58:	d501      	bpl.n	8001c5e <__swbuf_r+0x20>
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	b943      	cbnz	r3, 8001c70 <__swbuf_r+0x32>
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4628      	mov	r0, r5
 8001c62:	f000 f82b 	bl	8001cbc <__swsetup_r>
 8001c66:	b118      	cbz	r0, 8001c70 <__swbuf_r+0x32>
 8001c68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	6922      	ldr	r2, [r4, #16]
 8001c74:	b2f6      	uxtb	r6, r6
 8001c76:	1a98      	subs	r0, r3, r2
 8001c78:	6963      	ldr	r3, [r4, #20]
 8001c7a:	4637      	mov	r7, r6
 8001c7c:	4283      	cmp	r3, r0
 8001c7e:	dc05      	bgt.n	8001c8c <__swbuf_r+0x4e>
 8001c80:	4621      	mov	r1, r4
 8001c82:	4628      	mov	r0, r5
 8001c84:	f000 fe8a 	bl	800299c <_fflush_r>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1ed      	bne.n	8001c68 <__swbuf_r+0x2a>
 8001c8c:	68a3      	ldr	r3, [r4, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60a3      	str	r3, [r4, #8]
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	6022      	str	r2, [r4, #0]
 8001c98:	701e      	strb	r6, [r3, #0]
 8001c9a:	6962      	ldr	r2, [r4, #20]
 8001c9c:	1c43      	adds	r3, r0, #1
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d004      	beq.n	8001cac <__swbuf_r+0x6e>
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	07db      	lsls	r3, r3, #31
 8001ca6:	d5e1      	bpl.n	8001c6c <__swbuf_r+0x2e>
 8001ca8:	2e0a      	cmp	r6, #10
 8001caa:	d1df      	bne.n	8001c6c <__swbuf_r+0x2e>
 8001cac:	4621      	mov	r1, r4
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f000 fe74 	bl	800299c <_fflush_r>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d0d9      	beq.n	8001c6c <__swbuf_r+0x2e>
 8001cb8:	e7d6      	b.n	8001c68 <__swbuf_r+0x2a>
	...

08001cbc <__swsetup_r>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <__swsetup_r+0xa8>)
 8001cc0:	4605      	mov	r5, r0
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	b118      	cbz	r0, 8001cd0 <__swsetup_r+0x14>
 8001cc8:	6a03      	ldr	r3, [r0, #32]
 8001cca:	b90b      	cbnz	r3, 8001cd0 <__swsetup_r+0x14>
 8001ccc:	f7ff fe76 	bl	80019bc <__sinit>
 8001cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cd4:	0719      	lsls	r1, r3, #28
 8001cd6:	d422      	bmi.n	8001d1e <__swsetup_r+0x62>
 8001cd8:	06da      	lsls	r2, r3, #27
 8001cda:	d407      	bmi.n	8001cec <__swsetup_r+0x30>
 8001cdc:	2209      	movs	r2, #9
 8001cde:	602a      	str	r2, [r5, #0]
 8001ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	e033      	b.n	8001d54 <__swsetup_r+0x98>
 8001cec:	0758      	lsls	r0, r3, #29
 8001cee:	d512      	bpl.n	8001d16 <__swsetup_r+0x5a>
 8001cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001cf2:	b141      	cbz	r1, 8001d06 <__swsetup_r+0x4a>
 8001cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cf8:	4299      	cmp	r1, r3
 8001cfa:	d002      	beq.n	8001d02 <__swsetup_r+0x46>
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f000 f8af 	bl	8001e60 <_free_r>
 8001d02:	2300      	movs	r3, #0
 8001d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d0c:	81a3      	strh	r3, [r4, #12]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	6063      	str	r3, [r4, #4]
 8001d12:	6923      	ldr	r3, [r4, #16]
 8001d14:	6023      	str	r3, [r4, #0]
 8001d16:	89a3      	ldrh	r3, [r4, #12]
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	81a3      	strh	r3, [r4, #12]
 8001d1e:	6923      	ldr	r3, [r4, #16]
 8001d20:	b94b      	cbnz	r3, 8001d36 <__swsetup_r+0x7a>
 8001d22:	89a3      	ldrh	r3, [r4, #12]
 8001d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d2c:	d003      	beq.n	8001d36 <__swsetup_r+0x7a>
 8001d2e:	4621      	mov	r1, r4
 8001d30:	4628      	mov	r0, r5
 8001d32:	f000 fe80 	bl	8002a36 <__smakebuf_r>
 8001d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d3a:	f013 0201 	ands.w	r2, r3, #1
 8001d3e:	d00a      	beq.n	8001d56 <__swsetup_r+0x9a>
 8001d40:	2200      	movs	r2, #0
 8001d42:	60a2      	str	r2, [r4, #8]
 8001d44:	6962      	ldr	r2, [r4, #20]
 8001d46:	4252      	negs	r2, r2
 8001d48:	61a2      	str	r2, [r4, #24]
 8001d4a:	6922      	ldr	r2, [r4, #16]
 8001d4c:	b942      	cbnz	r2, 8001d60 <__swsetup_r+0xa4>
 8001d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001d52:	d1c5      	bne.n	8001ce0 <__swsetup_r+0x24>
 8001d54:	bd38      	pop	{r3, r4, r5, pc}
 8001d56:	0799      	lsls	r1, r3, #30
 8001d58:	bf58      	it	pl
 8001d5a:	6962      	ldrpl	r2, [r4, #20]
 8001d5c:	60a2      	str	r2, [r4, #8]
 8001d5e:	e7f4      	b.n	8001d4a <__swsetup_r+0x8e>
 8001d60:	2000      	movs	r0, #0
 8001d62:	e7f7      	b.n	8001d54 <__swsetup_r+0x98>
 8001d64:	2000000c 	.word	0x2000000c

08001d68 <memset>:
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4402      	add	r2, r0
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <memset+0xa>
 8001d70:	4770      	bx	lr
 8001d72:	f803 1b01 	strb.w	r1, [r3], #1
 8001d76:	e7f9      	b.n	8001d6c <memset+0x4>

08001d78 <_close_r>:
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	4d05      	ldr	r5, [pc, #20]	@ (8001d94 <_close_r+0x1c>)
 8001d7e:	4604      	mov	r4, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	602b      	str	r3, [r5, #0]
 8001d84:	f7ff fca6 	bl	80016d4 <_close>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	d102      	bne.n	8001d92 <_close_r+0x1a>
 8001d8c:	682b      	ldr	r3, [r5, #0]
 8001d8e:	b103      	cbz	r3, 8001d92 <_close_r+0x1a>
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
 8001d94:	200001c8 	.word	0x200001c8

08001d98 <_lseek_r>:
 8001d98:	b538      	push	{r3, r4, r5, lr}
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	2200      	movs	r2, #0
 8001da2:	4d05      	ldr	r5, [pc, #20]	@ (8001db8 <_lseek_r+0x20>)
 8001da4:	602a      	str	r2, [r5, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f7ff fcb8 	bl	800171c <_lseek>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	d102      	bne.n	8001db6 <_lseek_r+0x1e>
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	b103      	cbz	r3, 8001db6 <_lseek_r+0x1e>
 8001db4:	6023      	str	r3, [r4, #0]
 8001db6:	bd38      	pop	{r3, r4, r5, pc}
 8001db8:	200001c8 	.word	0x200001c8

08001dbc <_read_r>:
 8001dbc:	b538      	push	{r3, r4, r5, lr}
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4d05      	ldr	r5, [pc, #20]	@ (8001ddc <_read_r+0x20>)
 8001dc8:	602a      	str	r2, [r5, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff fc49 	bl	8001662 <_read>
 8001dd0:	1c43      	adds	r3, r0, #1
 8001dd2:	d102      	bne.n	8001dda <_read_r+0x1e>
 8001dd4:	682b      	ldr	r3, [r5, #0]
 8001dd6:	b103      	cbz	r3, 8001dda <_read_r+0x1e>
 8001dd8:	6023      	str	r3, [r4, #0]
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
 8001ddc:	200001c8 	.word	0x200001c8

08001de0 <_write_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4604      	mov	r4, r0
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	2200      	movs	r2, #0
 8001dea:	4d05      	ldr	r5, [pc, #20]	@ (8001e00 <_write_r+0x20>)
 8001dec:	602a      	str	r2, [r5, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f7ff fc54 	bl	800169c <_write>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_write_r+0x1e>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_write_r+0x1e>
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	200001c8 	.word	0x200001c8

08001e04 <__errno>:
 8001e04:	4b01      	ldr	r3, [pc, #4]	@ (8001e0c <__errno+0x8>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <__libc_init_array>:
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	2600      	movs	r6, #0
 8001e14:	4d0c      	ldr	r5, [pc, #48]	@ (8001e48 <__libc_init_array+0x38>)
 8001e16:	4c0d      	ldr	r4, [pc, #52]	@ (8001e4c <__libc_init_array+0x3c>)
 8001e18:	1b64      	subs	r4, r4, r5
 8001e1a:	10a4      	asrs	r4, r4, #2
 8001e1c:	42a6      	cmp	r6, r4
 8001e1e:	d109      	bne.n	8001e34 <__libc_init_array+0x24>
 8001e20:	f000 fee4 	bl	8002bec <_init>
 8001e24:	2600      	movs	r6, #0
 8001e26:	4d0a      	ldr	r5, [pc, #40]	@ (8001e50 <__libc_init_array+0x40>)
 8001e28:	4c0a      	ldr	r4, [pc, #40]	@ (8001e54 <__libc_init_array+0x44>)
 8001e2a:	1b64      	subs	r4, r4, r5
 8001e2c:	10a4      	asrs	r4, r4, #2
 8001e2e:	42a6      	cmp	r6, r4
 8001e30:	d105      	bne.n	8001e3e <__libc_init_array+0x2e>
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e38:	4798      	blx	r3
 8001e3a:	3601      	adds	r6, #1
 8001e3c:	e7ee      	b.n	8001e1c <__libc_init_array+0xc>
 8001e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e42:	4798      	blx	r3
 8001e44:	3601      	adds	r6, #1
 8001e46:	e7f2      	b.n	8001e2e <__libc_init_array+0x1e>
 8001e48:	08002e7c 	.word	0x08002e7c
 8001e4c:	08002e7c 	.word	0x08002e7c
 8001e50:	08002e7c 	.word	0x08002e7c
 8001e54:	08002e80 	.word	0x08002e80

08001e58 <__retarget_lock_init_recursive>:
 8001e58:	4770      	bx	lr

08001e5a <__retarget_lock_acquire_recursive>:
 8001e5a:	4770      	bx	lr

08001e5c <__retarget_lock_release_recursive>:
 8001e5c:	4770      	bx	lr
	...

08001e60 <_free_r>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	4605      	mov	r5, r0
 8001e64:	2900      	cmp	r1, #0
 8001e66:	d040      	beq.n	8001eea <_free_r+0x8a>
 8001e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e6c:	1f0c      	subs	r4, r1, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bfb8      	it	lt
 8001e72:	18e4      	addlt	r4, r4, r3
 8001e74:	f000 f8de 	bl	8002034 <__malloc_lock>
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <_free_r+0x8c>)
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	b933      	cbnz	r3, 8001e8c <_free_r+0x2c>
 8001e7e:	6063      	str	r3, [r4, #4]
 8001e80:	6014      	str	r4, [r2, #0]
 8001e82:	4628      	mov	r0, r5
 8001e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e88:	f000 b8da 	b.w	8002040 <__malloc_unlock>
 8001e8c:	42a3      	cmp	r3, r4
 8001e8e:	d908      	bls.n	8001ea2 <_free_r+0x42>
 8001e90:	6820      	ldr	r0, [r4, #0]
 8001e92:	1821      	adds	r1, r4, r0
 8001e94:	428b      	cmp	r3, r1
 8001e96:	bf01      	itttt	eq
 8001e98:	6819      	ldreq	r1, [r3, #0]
 8001e9a:	685b      	ldreq	r3, [r3, #4]
 8001e9c:	1809      	addeq	r1, r1, r0
 8001e9e:	6021      	streq	r1, [r4, #0]
 8001ea0:	e7ed      	b.n	8001e7e <_free_r+0x1e>
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	b10b      	cbz	r3, 8001eac <_free_r+0x4c>
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	d9fa      	bls.n	8001ea2 <_free_r+0x42>
 8001eac:	6811      	ldr	r1, [r2, #0]
 8001eae:	1850      	adds	r0, r2, r1
 8001eb0:	42a0      	cmp	r0, r4
 8001eb2:	d10b      	bne.n	8001ecc <_free_r+0x6c>
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	4401      	add	r1, r0
 8001eb8:	1850      	adds	r0, r2, r1
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	6011      	str	r1, [r2, #0]
 8001ebe:	d1e0      	bne.n	8001e82 <_free_r+0x22>
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4408      	add	r0, r1
 8001ec6:	6010      	str	r0, [r2, #0]
 8001ec8:	6053      	str	r3, [r2, #4]
 8001eca:	e7da      	b.n	8001e82 <_free_r+0x22>
 8001ecc:	d902      	bls.n	8001ed4 <_free_r+0x74>
 8001ece:	230c      	movs	r3, #12
 8001ed0:	602b      	str	r3, [r5, #0]
 8001ed2:	e7d6      	b.n	8001e82 <_free_r+0x22>
 8001ed4:	6820      	ldr	r0, [r4, #0]
 8001ed6:	1821      	adds	r1, r4, r0
 8001ed8:	428b      	cmp	r3, r1
 8001eda:	bf01      	itttt	eq
 8001edc:	6819      	ldreq	r1, [r3, #0]
 8001ede:	685b      	ldreq	r3, [r3, #4]
 8001ee0:	1809      	addeq	r1, r1, r0
 8001ee2:	6021      	streq	r1, [r4, #0]
 8001ee4:	6063      	str	r3, [r4, #4]
 8001ee6:	6054      	str	r4, [r2, #4]
 8001ee8:	e7cb      	b.n	8001e82 <_free_r+0x22>
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	200001d4 	.word	0x200001d4

08001ef0 <sbrk_aligned>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8001f30 <sbrk_aligned+0x40>)
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	6831      	ldr	r1, [r6, #0]
 8001ef8:	4605      	mov	r5, r0
 8001efa:	b911      	cbnz	r1, 8001f02 <sbrk_aligned+0x12>
 8001efc:	f000 fe14 	bl	8002b28 <_sbrk_r>
 8001f00:	6030      	str	r0, [r6, #0]
 8001f02:	4621      	mov	r1, r4
 8001f04:	4628      	mov	r0, r5
 8001f06:	f000 fe0f 	bl	8002b28 <_sbrk_r>
 8001f0a:	1c43      	adds	r3, r0, #1
 8001f0c:	d103      	bne.n	8001f16 <sbrk_aligned+0x26>
 8001f0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001f12:	4620      	mov	r0, r4
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
 8001f16:	1cc4      	adds	r4, r0, #3
 8001f18:	f024 0403 	bic.w	r4, r4, #3
 8001f1c:	42a0      	cmp	r0, r4
 8001f1e:	d0f8      	beq.n	8001f12 <sbrk_aligned+0x22>
 8001f20:	1a21      	subs	r1, r4, r0
 8001f22:	4628      	mov	r0, r5
 8001f24:	f000 fe00 	bl	8002b28 <_sbrk_r>
 8001f28:	3001      	adds	r0, #1
 8001f2a:	d1f2      	bne.n	8001f12 <sbrk_aligned+0x22>
 8001f2c:	e7ef      	b.n	8001f0e <sbrk_aligned+0x1e>
 8001f2e:	bf00      	nop
 8001f30:	200001d0 	.word	0x200001d0

08001f34 <_malloc_r>:
 8001f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f38:	1ccd      	adds	r5, r1, #3
 8001f3a:	f025 0503 	bic.w	r5, r5, #3
 8001f3e:	3508      	adds	r5, #8
 8001f40:	2d0c      	cmp	r5, #12
 8001f42:	bf38      	it	cc
 8001f44:	250c      	movcc	r5, #12
 8001f46:	2d00      	cmp	r5, #0
 8001f48:	4606      	mov	r6, r0
 8001f4a:	db01      	blt.n	8001f50 <_malloc_r+0x1c>
 8001f4c:	42a9      	cmp	r1, r5
 8001f4e:	d904      	bls.n	8001f5a <_malloc_r+0x26>
 8001f50:	230c      	movs	r3, #12
 8001f52:	6033      	str	r3, [r6, #0]
 8001f54:	2000      	movs	r0, #0
 8001f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002030 <_malloc_r+0xfc>
 8001f5e:	f000 f869 	bl	8002034 <__malloc_lock>
 8001f62:	f8d8 3000 	ldr.w	r3, [r8]
 8001f66:	461c      	mov	r4, r3
 8001f68:	bb44      	cbnz	r4, 8001fbc <_malloc_r+0x88>
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f7ff ffbf 	bl	8001ef0 <sbrk_aligned>
 8001f72:	1c43      	adds	r3, r0, #1
 8001f74:	4604      	mov	r4, r0
 8001f76:	d158      	bne.n	800202a <_malloc_r+0xf6>
 8001f78:	f8d8 4000 	ldr.w	r4, [r8]
 8001f7c:	4627      	mov	r7, r4
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d143      	bne.n	800200a <_malloc_r+0xd6>
 8001f82:	2c00      	cmp	r4, #0
 8001f84:	d04b      	beq.n	800201e <_malloc_r+0xea>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	4639      	mov	r1, r7
 8001f8a:	4630      	mov	r0, r6
 8001f8c:	eb04 0903 	add.w	r9, r4, r3
 8001f90:	f000 fdca 	bl	8002b28 <_sbrk_r>
 8001f94:	4581      	cmp	r9, r0
 8001f96:	d142      	bne.n	800201e <_malloc_r+0xea>
 8001f98:	6821      	ldr	r1, [r4, #0]
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	1a6d      	subs	r5, r5, r1
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7ff ffa6 	bl	8001ef0 <sbrk_aligned>
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	d03a      	beq.n	800201e <_malloc_r+0xea>
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	442b      	add	r3, r5
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	f8d8 3000 	ldr.w	r3, [r8]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	bb62      	cbnz	r2, 8002010 <_malloc_r+0xdc>
 8001fb6:	f8c8 7000 	str.w	r7, [r8]
 8001fba:	e00f      	b.n	8001fdc <_malloc_r+0xa8>
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	1b52      	subs	r2, r2, r5
 8001fc0:	d420      	bmi.n	8002004 <_malloc_r+0xd0>
 8001fc2:	2a0b      	cmp	r2, #11
 8001fc4:	d917      	bls.n	8001ff6 <_malloc_r+0xc2>
 8001fc6:	1961      	adds	r1, r4, r5
 8001fc8:	42a3      	cmp	r3, r4
 8001fca:	6025      	str	r5, [r4, #0]
 8001fcc:	bf18      	it	ne
 8001fce:	6059      	strne	r1, [r3, #4]
 8001fd0:	6863      	ldr	r3, [r4, #4]
 8001fd2:	bf08      	it	eq
 8001fd4:	f8c8 1000 	streq.w	r1, [r8]
 8001fd8:	5162      	str	r2, [r4, r5]
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	4630      	mov	r0, r6
 8001fde:	f000 f82f 	bl	8002040 <__malloc_unlock>
 8001fe2:	f104 000b 	add.w	r0, r4, #11
 8001fe6:	1d23      	adds	r3, r4, #4
 8001fe8:	f020 0007 	bic.w	r0, r0, #7
 8001fec:	1ac2      	subs	r2, r0, r3
 8001fee:	bf1c      	itt	ne
 8001ff0:	1a1b      	subne	r3, r3, r0
 8001ff2:	50a3      	strne	r3, [r4, r2]
 8001ff4:	e7af      	b.n	8001f56 <_malloc_r+0x22>
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	42a3      	cmp	r3, r4
 8001ffa:	bf0c      	ite	eq
 8001ffc:	f8c8 2000 	streq.w	r2, [r8]
 8002000:	605a      	strne	r2, [r3, #4]
 8002002:	e7eb      	b.n	8001fdc <_malloc_r+0xa8>
 8002004:	4623      	mov	r3, r4
 8002006:	6864      	ldr	r4, [r4, #4]
 8002008:	e7ae      	b.n	8001f68 <_malloc_r+0x34>
 800200a:	463c      	mov	r4, r7
 800200c:	687f      	ldr	r7, [r7, #4]
 800200e:	e7b6      	b.n	8001f7e <_malloc_r+0x4a>
 8002010:	461a      	mov	r2, r3
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	42a3      	cmp	r3, r4
 8002016:	d1fb      	bne.n	8002010 <_malloc_r+0xdc>
 8002018:	2300      	movs	r3, #0
 800201a:	6053      	str	r3, [r2, #4]
 800201c:	e7de      	b.n	8001fdc <_malloc_r+0xa8>
 800201e:	230c      	movs	r3, #12
 8002020:	4630      	mov	r0, r6
 8002022:	6033      	str	r3, [r6, #0]
 8002024:	f000 f80c 	bl	8002040 <__malloc_unlock>
 8002028:	e794      	b.n	8001f54 <_malloc_r+0x20>
 800202a:	6005      	str	r5, [r0, #0]
 800202c:	e7d6      	b.n	8001fdc <_malloc_r+0xa8>
 800202e:	bf00      	nop
 8002030:	200001d4 	.word	0x200001d4

08002034 <__malloc_lock>:
 8002034:	4801      	ldr	r0, [pc, #4]	@ (800203c <__malloc_lock+0x8>)
 8002036:	f7ff bf10 	b.w	8001e5a <__retarget_lock_acquire_recursive>
 800203a:	bf00      	nop
 800203c:	200001cc 	.word	0x200001cc

08002040 <__malloc_unlock>:
 8002040:	4801      	ldr	r0, [pc, #4]	@ (8002048 <__malloc_unlock+0x8>)
 8002042:	f7ff bf0b 	b.w	8001e5c <__retarget_lock_release_recursive>
 8002046:	bf00      	nop
 8002048:	200001cc 	.word	0x200001cc

0800204c <__ssputs_r>:
 800204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002050:	461f      	mov	r7, r3
 8002052:	688e      	ldr	r6, [r1, #8]
 8002054:	4682      	mov	sl, r0
 8002056:	42be      	cmp	r6, r7
 8002058:	460c      	mov	r4, r1
 800205a:	4690      	mov	r8, r2
 800205c:	680b      	ldr	r3, [r1, #0]
 800205e:	d82d      	bhi.n	80020bc <__ssputs_r+0x70>
 8002060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002068:	d026      	beq.n	80020b8 <__ssputs_r+0x6c>
 800206a:	6965      	ldr	r5, [r4, #20]
 800206c:	6909      	ldr	r1, [r1, #16]
 800206e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002072:	eba3 0901 	sub.w	r9, r3, r1
 8002076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800207a:	1c7b      	adds	r3, r7, #1
 800207c:	444b      	add	r3, r9
 800207e:	106d      	asrs	r5, r5, #1
 8002080:	429d      	cmp	r5, r3
 8002082:	bf38      	it	cc
 8002084:	461d      	movcc	r5, r3
 8002086:	0553      	lsls	r3, r2, #21
 8002088:	d527      	bpl.n	80020da <__ssputs_r+0x8e>
 800208a:	4629      	mov	r1, r5
 800208c:	f7ff ff52 	bl	8001f34 <_malloc_r>
 8002090:	4606      	mov	r6, r0
 8002092:	b360      	cbz	r0, 80020ee <__ssputs_r+0xa2>
 8002094:	464a      	mov	r2, r9
 8002096:	6921      	ldr	r1, [r4, #16]
 8002098:	f000 fd64 	bl	8002b64 <memcpy>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80020a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	6126      	str	r6, [r4, #16]
 80020aa:	444e      	add	r6, r9
 80020ac:	6026      	str	r6, [r4, #0]
 80020ae:	463e      	mov	r6, r7
 80020b0:	6165      	str	r5, [r4, #20]
 80020b2:	eba5 0509 	sub.w	r5, r5, r9
 80020b6:	60a5      	str	r5, [r4, #8]
 80020b8:	42be      	cmp	r6, r7
 80020ba:	d900      	bls.n	80020be <__ssputs_r+0x72>
 80020bc:	463e      	mov	r6, r7
 80020be:	4632      	mov	r2, r6
 80020c0:	4641      	mov	r1, r8
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	f000 fcf3 	bl	8002aae <memmove>
 80020c8:	2000      	movs	r0, #0
 80020ca:	68a3      	ldr	r3, [r4, #8]
 80020cc:	1b9b      	subs	r3, r3, r6
 80020ce:	60a3      	str	r3, [r4, #8]
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	4433      	add	r3, r6
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020da:	462a      	mov	r2, r5
 80020dc:	f000 fd50 	bl	8002b80 <_realloc_r>
 80020e0:	4606      	mov	r6, r0
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d1e0      	bne.n	80020a8 <__ssputs_r+0x5c>
 80020e6:	4650      	mov	r0, sl
 80020e8:	6921      	ldr	r1, [r4, #16]
 80020ea:	f7ff feb9 	bl	8001e60 <_free_r>
 80020ee:	230c      	movs	r3, #12
 80020f0:	f8ca 3000 	str.w	r3, [sl]
 80020f4:	89a3      	ldrh	r3, [r4, #12]
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020fe:	81a3      	strh	r3, [r4, #12]
 8002100:	e7e9      	b.n	80020d6 <__ssputs_r+0x8a>
	...

08002104 <_svfiprintf_r>:
 8002104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002108:	4698      	mov	r8, r3
 800210a:	898b      	ldrh	r3, [r1, #12]
 800210c:	4607      	mov	r7, r0
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	460d      	mov	r5, r1
 8002112:	4614      	mov	r4, r2
 8002114:	b09d      	sub	sp, #116	@ 0x74
 8002116:	d510      	bpl.n	800213a <_svfiprintf_r+0x36>
 8002118:	690b      	ldr	r3, [r1, #16]
 800211a:	b973      	cbnz	r3, 800213a <_svfiprintf_r+0x36>
 800211c:	2140      	movs	r1, #64	@ 0x40
 800211e:	f7ff ff09 	bl	8001f34 <_malloc_r>
 8002122:	6028      	str	r0, [r5, #0]
 8002124:	6128      	str	r0, [r5, #16]
 8002126:	b930      	cbnz	r0, 8002136 <_svfiprintf_r+0x32>
 8002128:	230c      	movs	r3, #12
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002130:	b01d      	add	sp, #116	@ 0x74
 8002132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002136:	2340      	movs	r3, #64	@ 0x40
 8002138:	616b      	str	r3, [r5, #20]
 800213a:	2300      	movs	r3, #0
 800213c:	9309      	str	r3, [sp, #36]	@ 0x24
 800213e:	2320      	movs	r3, #32
 8002140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002144:	2330      	movs	r3, #48	@ 0x30
 8002146:	f04f 0901 	mov.w	r9, #1
 800214a:	f8cd 800c 	str.w	r8, [sp, #12]
 800214e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80022e8 <_svfiprintf_r+0x1e4>
 8002152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002156:	4623      	mov	r3, r4
 8002158:	469a      	mov	sl, r3
 800215a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800215e:	b10a      	cbz	r2, 8002164 <_svfiprintf_r+0x60>
 8002160:	2a25      	cmp	r2, #37	@ 0x25
 8002162:	d1f9      	bne.n	8002158 <_svfiprintf_r+0x54>
 8002164:	ebba 0b04 	subs.w	fp, sl, r4
 8002168:	d00b      	beq.n	8002182 <_svfiprintf_r+0x7e>
 800216a:	465b      	mov	r3, fp
 800216c:	4622      	mov	r2, r4
 800216e:	4629      	mov	r1, r5
 8002170:	4638      	mov	r0, r7
 8002172:	f7ff ff6b 	bl	800204c <__ssputs_r>
 8002176:	3001      	adds	r0, #1
 8002178:	f000 80a7 	beq.w	80022ca <_svfiprintf_r+0x1c6>
 800217c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800217e:	445a      	add	r2, fp
 8002180:	9209      	str	r2, [sp, #36]	@ 0x24
 8002182:	f89a 3000 	ldrb.w	r3, [sl]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 809f 	beq.w	80022ca <_svfiprintf_r+0x1c6>
 800218c:	2300      	movs	r3, #0
 800218e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002196:	f10a 0a01 	add.w	sl, sl, #1
 800219a:	9304      	str	r3, [sp, #16]
 800219c:	9307      	str	r3, [sp, #28]
 800219e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80021a4:	4654      	mov	r4, sl
 80021a6:	2205      	movs	r2, #5
 80021a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021ac:	484e      	ldr	r0, [pc, #312]	@ (80022e8 <_svfiprintf_r+0x1e4>)
 80021ae:	f000 fccb 	bl	8002b48 <memchr>
 80021b2:	9a04      	ldr	r2, [sp, #16]
 80021b4:	b9d8      	cbnz	r0, 80021ee <_svfiprintf_r+0xea>
 80021b6:	06d0      	lsls	r0, r2, #27
 80021b8:	bf44      	itt	mi
 80021ba:	2320      	movmi	r3, #32
 80021bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021c0:	0711      	lsls	r1, r2, #28
 80021c2:	bf44      	itt	mi
 80021c4:	232b      	movmi	r3, #43	@ 0x2b
 80021c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021ca:	f89a 3000 	ldrb.w	r3, [sl]
 80021ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80021d0:	d015      	beq.n	80021fe <_svfiprintf_r+0xfa>
 80021d2:	4654      	mov	r4, sl
 80021d4:	2000      	movs	r0, #0
 80021d6:	f04f 0c0a 	mov.w	ip, #10
 80021da:	9a07      	ldr	r2, [sp, #28]
 80021dc:	4621      	mov	r1, r4
 80021de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021e2:	3b30      	subs	r3, #48	@ 0x30
 80021e4:	2b09      	cmp	r3, #9
 80021e6:	d94b      	bls.n	8002280 <_svfiprintf_r+0x17c>
 80021e8:	b1b0      	cbz	r0, 8002218 <_svfiprintf_r+0x114>
 80021ea:	9207      	str	r2, [sp, #28]
 80021ec:	e014      	b.n	8002218 <_svfiprintf_r+0x114>
 80021ee:	eba0 0308 	sub.w	r3, r0, r8
 80021f2:	fa09 f303 	lsl.w	r3, r9, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	46a2      	mov	sl, r4
 80021fa:	9304      	str	r3, [sp, #16]
 80021fc:	e7d2      	b.n	80021a4 <_svfiprintf_r+0xa0>
 80021fe:	9b03      	ldr	r3, [sp, #12]
 8002200:	1d19      	adds	r1, r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	9103      	str	r1, [sp, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	bfbb      	ittet	lt
 800220a:	425b      	neglt	r3, r3
 800220c:	f042 0202 	orrlt.w	r2, r2, #2
 8002210:	9307      	strge	r3, [sp, #28]
 8002212:	9307      	strlt	r3, [sp, #28]
 8002214:	bfb8      	it	lt
 8002216:	9204      	strlt	r2, [sp, #16]
 8002218:	7823      	ldrb	r3, [r4, #0]
 800221a:	2b2e      	cmp	r3, #46	@ 0x2e
 800221c:	d10a      	bne.n	8002234 <_svfiprintf_r+0x130>
 800221e:	7863      	ldrb	r3, [r4, #1]
 8002220:	2b2a      	cmp	r3, #42	@ 0x2a
 8002222:	d132      	bne.n	800228a <_svfiprintf_r+0x186>
 8002224:	9b03      	ldr	r3, [sp, #12]
 8002226:	3402      	adds	r4, #2
 8002228:	1d1a      	adds	r2, r3, #4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	9203      	str	r2, [sp, #12]
 800222e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002232:	9305      	str	r3, [sp, #20]
 8002234:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80022ec <_svfiprintf_r+0x1e8>
 8002238:	2203      	movs	r2, #3
 800223a:	4650      	mov	r0, sl
 800223c:	7821      	ldrb	r1, [r4, #0]
 800223e:	f000 fc83 	bl	8002b48 <memchr>
 8002242:	b138      	cbz	r0, 8002254 <_svfiprintf_r+0x150>
 8002244:	2240      	movs	r2, #64	@ 0x40
 8002246:	9b04      	ldr	r3, [sp, #16]
 8002248:	eba0 000a 	sub.w	r0, r0, sl
 800224c:	4082      	lsls	r2, r0
 800224e:	4313      	orrs	r3, r2
 8002250:	3401      	adds	r4, #1
 8002252:	9304      	str	r3, [sp, #16]
 8002254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002258:	2206      	movs	r2, #6
 800225a:	4825      	ldr	r0, [pc, #148]	@ (80022f0 <_svfiprintf_r+0x1ec>)
 800225c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002260:	f000 fc72 	bl	8002b48 <memchr>
 8002264:	2800      	cmp	r0, #0
 8002266:	d036      	beq.n	80022d6 <_svfiprintf_r+0x1d2>
 8002268:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <_svfiprintf_r+0x1f0>)
 800226a:	bb1b      	cbnz	r3, 80022b4 <_svfiprintf_r+0x1b0>
 800226c:	9b03      	ldr	r3, [sp, #12]
 800226e:	3307      	adds	r3, #7
 8002270:	f023 0307 	bic.w	r3, r3, #7
 8002274:	3308      	adds	r3, #8
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800227a:	4433      	add	r3, r6
 800227c:	9309      	str	r3, [sp, #36]	@ 0x24
 800227e:	e76a      	b.n	8002156 <_svfiprintf_r+0x52>
 8002280:	460c      	mov	r4, r1
 8002282:	2001      	movs	r0, #1
 8002284:	fb0c 3202 	mla	r2, ip, r2, r3
 8002288:	e7a8      	b.n	80021dc <_svfiprintf_r+0xd8>
 800228a:	2300      	movs	r3, #0
 800228c:	f04f 0c0a 	mov.w	ip, #10
 8002290:	4619      	mov	r1, r3
 8002292:	3401      	adds	r4, #1
 8002294:	9305      	str	r3, [sp, #20]
 8002296:	4620      	mov	r0, r4
 8002298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800229c:	3a30      	subs	r2, #48	@ 0x30
 800229e:	2a09      	cmp	r2, #9
 80022a0:	d903      	bls.n	80022aa <_svfiprintf_r+0x1a6>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0c6      	beq.n	8002234 <_svfiprintf_r+0x130>
 80022a6:	9105      	str	r1, [sp, #20]
 80022a8:	e7c4      	b.n	8002234 <_svfiprintf_r+0x130>
 80022aa:	4604      	mov	r4, r0
 80022ac:	2301      	movs	r3, #1
 80022ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80022b2:	e7f0      	b.n	8002296 <_svfiprintf_r+0x192>
 80022b4:	ab03      	add	r3, sp, #12
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	462a      	mov	r2, r5
 80022ba:	4638      	mov	r0, r7
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <_svfiprintf_r+0x1f4>)
 80022be:	a904      	add	r1, sp, #16
 80022c0:	f3af 8000 	nop.w
 80022c4:	1c42      	adds	r2, r0, #1
 80022c6:	4606      	mov	r6, r0
 80022c8:	d1d6      	bne.n	8002278 <_svfiprintf_r+0x174>
 80022ca:	89ab      	ldrh	r3, [r5, #12]
 80022cc:	065b      	lsls	r3, r3, #25
 80022ce:	f53f af2d 	bmi.w	800212c <_svfiprintf_r+0x28>
 80022d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022d4:	e72c      	b.n	8002130 <_svfiprintf_r+0x2c>
 80022d6:	ab03      	add	r3, sp, #12
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	462a      	mov	r2, r5
 80022dc:	4638      	mov	r0, r7
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <_svfiprintf_r+0x1f4>)
 80022e0:	a904      	add	r1, sp, #16
 80022e2:	f000 f9bd 	bl	8002660 <_printf_i>
 80022e6:	e7ed      	b.n	80022c4 <_svfiprintf_r+0x1c0>
 80022e8:	08002e49 	.word	0x08002e49
 80022ec:	08002e4f 	.word	0x08002e4f
 80022f0:	08002e53 	.word	0x08002e53
 80022f4:	00000000 	.word	0x00000000
 80022f8:	0800204d 	.word	0x0800204d

080022fc <__sfputc_r>:
 80022fc:	6893      	ldr	r3, [r2, #8]
 80022fe:	b410      	push	{r4}
 8002300:	3b01      	subs	r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	6093      	str	r3, [r2, #8]
 8002306:	da07      	bge.n	8002318 <__sfputc_r+0x1c>
 8002308:	6994      	ldr	r4, [r2, #24]
 800230a:	42a3      	cmp	r3, r4
 800230c:	db01      	blt.n	8002312 <__sfputc_r+0x16>
 800230e:	290a      	cmp	r1, #10
 8002310:	d102      	bne.n	8002318 <__sfputc_r+0x1c>
 8002312:	bc10      	pop	{r4}
 8002314:	f7ff bc93 	b.w	8001c3e <__swbuf_r>
 8002318:	6813      	ldr	r3, [r2, #0]
 800231a:	1c58      	adds	r0, r3, #1
 800231c:	6010      	str	r0, [r2, #0]
 800231e:	7019      	strb	r1, [r3, #0]
 8002320:	4608      	mov	r0, r1
 8002322:	bc10      	pop	{r4}
 8002324:	4770      	bx	lr

08002326 <__sfputs_r>:
 8002326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002328:	4606      	mov	r6, r0
 800232a:	460f      	mov	r7, r1
 800232c:	4614      	mov	r4, r2
 800232e:	18d5      	adds	r5, r2, r3
 8002330:	42ac      	cmp	r4, r5
 8002332:	d101      	bne.n	8002338 <__sfputs_r+0x12>
 8002334:	2000      	movs	r0, #0
 8002336:	e007      	b.n	8002348 <__sfputs_r+0x22>
 8002338:	463a      	mov	r2, r7
 800233a:	4630      	mov	r0, r6
 800233c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002340:	f7ff ffdc 	bl	80022fc <__sfputc_r>
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	d1f3      	bne.n	8002330 <__sfputs_r+0xa>
 8002348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800234c <_vfiprintf_r>:
 800234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002350:	460d      	mov	r5, r1
 8002352:	4614      	mov	r4, r2
 8002354:	4698      	mov	r8, r3
 8002356:	4606      	mov	r6, r0
 8002358:	b09d      	sub	sp, #116	@ 0x74
 800235a:	b118      	cbz	r0, 8002364 <_vfiprintf_r+0x18>
 800235c:	6a03      	ldr	r3, [r0, #32]
 800235e:	b90b      	cbnz	r3, 8002364 <_vfiprintf_r+0x18>
 8002360:	f7ff fb2c 	bl	80019bc <__sinit>
 8002364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002366:	07d9      	lsls	r1, r3, #31
 8002368:	d405      	bmi.n	8002376 <_vfiprintf_r+0x2a>
 800236a:	89ab      	ldrh	r3, [r5, #12]
 800236c:	059a      	lsls	r2, r3, #22
 800236e:	d402      	bmi.n	8002376 <_vfiprintf_r+0x2a>
 8002370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002372:	f7ff fd72 	bl	8001e5a <__retarget_lock_acquire_recursive>
 8002376:	89ab      	ldrh	r3, [r5, #12]
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	d501      	bpl.n	8002380 <_vfiprintf_r+0x34>
 800237c:	692b      	ldr	r3, [r5, #16]
 800237e:	b99b      	cbnz	r3, 80023a8 <_vfiprintf_r+0x5c>
 8002380:	4629      	mov	r1, r5
 8002382:	4630      	mov	r0, r6
 8002384:	f7ff fc9a 	bl	8001cbc <__swsetup_r>
 8002388:	b170      	cbz	r0, 80023a8 <_vfiprintf_r+0x5c>
 800238a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800238c:	07dc      	lsls	r4, r3, #31
 800238e:	d504      	bpl.n	800239a <_vfiprintf_r+0x4e>
 8002390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002394:	b01d      	add	sp, #116	@ 0x74
 8002396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239a:	89ab      	ldrh	r3, [r5, #12]
 800239c:	0598      	lsls	r0, r3, #22
 800239e:	d4f7      	bmi.n	8002390 <_vfiprintf_r+0x44>
 80023a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80023a2:	f7ff fd5b 	bl	8001e5c <__retarget_lock_release_recursive>
 80023a6:	e7f3      	b.n	8002390 <_vfiprintf_r+0x44>
 80023a8:	2300      	movs	r3, #0
 80023aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80023ac:	2320      	movs	r3, #32
 80023ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80023b2:	2330      	movs	r3, #48	@ 0x30
 80023b4:	f04f 0901 	mov.w	r9, #1
 80023b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80023bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002568 <_vfiprintf_r+0x21c>
 80023c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023c4:	4623      	mov	r3, r4
 80023c6:	469a      	mov	sl, r3
 80023c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023cc:	b10a      	cbz	r2, 80023d2 <_vfiprintf_r+0x86>
 80023ce:	2a25      	cmp	r2, #37	@ 0x25
 80023d0:	d1f9      	bne.n	80023c6 <_vfiprintf_r+0x7a>
 80023d2:	ebba 0b04 	subs.w	fp, sl, r4
 80023d6:	d00b      	beq.n	80023f0 <_vfiprintf_r+0xa4>
 80023d8:	465b      	mov	r3, fp
 80023da:	4622      	mov	r2, r4
 80023dc:	4629      	mov	r1, r5
 80023de:	4630      	mov	r0, r6
 80023e0:	f7ff ffa1 	bl	8002326 <__sfputs_r>
 80023e4:	3001      	adds	r0, #1
 80023e6:	f000 80a7 	beq.w	8002538 <_vfiprintf_r+0x1ec>
 80023ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023ec:	445a      	add	r2, fp
 80023ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80023f0:	f89a 3000 	ldrb.w	r3, [sl]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 809f 	beq.w	8002538 <_vfiprintf_r+0x1ec>
 80023fa:	2300      	movs	r3, #0
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002404:	f10a 0a01 	add.w	sl, sl, #1
 8002408:	9304      	str	r3, [sp, #16]
 800240a:	9307      	str	r3, [sp, #28]
 800240c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002410:	931a      	str	r3, [sp, #104]	@ 0x68
 8002412:	4654      	mov	r4, sl
 8002414:	2205      	movs	r2, #5
 8002416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800241a:	4853      	ldr	r0, [pc, #332]	@ (8002568 <_vfiprintf_r+0x21c>)
 800241c:	f000 fb94 	bl	8002b48 <memchr>
 8002420:	9a04      	ldr	r2, [sp, #16]
 8002422:	b9d8      	cbnz	r0, 800245c <_vfiprintf_r+0x110>
 8002424:	06d1      	lsls	r1, r2, #27
 8002426:	bf44      	itt	mi
 8002428:	2320      	movmi	r3, #32
 800242a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800242e:	0713      	lsls	r3, r2, #28
 8002430:	bf44      	itt	mi
 8002432:	232b      	movmi	r3, #43	@ 0x2b
 8002434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002438:	f89a 3000 	ldrb.w	r3, [sl]
 800243c:	2b2a      	cmp	r3, #42	@ 0x2a
 800243e:	d015      	beq.n	800246c <_vfiprintf_r+0x120>
 8002440:	4654      	mov	r4, sl
 8002442:	2000      	movs	r0, #0
 8002444:	f04f 0c0a 	mov.w	ip, #10
 8002448:	9a07      	ldr	r2, [sp, #28]
 800244a:	4621      	mov	r1, r4
 800244c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002450:	3b30      	subs	r3, #48	@ 0x30
 8002452:	2b09      	cmp	r3, #9
 8002454:	d94b      	bls.n	80024ee <_vfiprintf_r+0x1a2>
 8002456:	b1b0      	cbz	r0, 8002486 <_vfiprintf_r+0x13a>
 8002458:	9207      	str	r2, [sp, #28]
 800245a:	e014      	b.n	8002486 <_vfiprintf_r+0x13a>
 800245c:	eba0 0308 	sub.w	r3, r0, r8
 8002460:	fa09 f303 	lsl.w	r3, r9, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	46a2      	mov	sl, r4
 8002468:	9304      	str	r3, [sp, #16]
 800246a:	e7d2      	b.n	8002412 <_vfiprintf_r+0xc6>
 800246c:	9b03      	ldr	r3, [sp, #12]
 800246e:	1d19      	adds	r1, r3, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	9103      	str	r1, [sp, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	bfbb      	ittet	lt
 8002478:	425b      	neglt	r3, r3
 800247a:	f042 0202 	orrlt.w	r2, r2, #2
 800247e:	9307      	strge	r3, [sp, #28]
 8002480:	9307      	strlt	r3, [sp, #28]
 8002482:	bfb8      	it	lt
 8002484:	9204      	strlt	r2, [sp, #16]
 8002486:	7823      	ldrb	r3, [r4, #0]
 8002488:	2b2e      	cmp	r3, #46	@ 0x2e
 800248a:	d10a      	bne.n	80024a2 <_vfiprintf_r+0x156>
 800248c:	7863      	ldrb	r3, [r4, #1]
 800248e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002490:	d132      	bne.n	80024f8 <_vfiprintf_r+0x1ac>
 8002492:	9b03      	ldr	r3, [sp, #12]
 8002494:	3402      	adds	r4, #2
 8002496:	1d1a      	adds	r2, r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	9203      	str	r2, [sp, #12]
 800249c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80024a0:	9305      	str	r3, [sp, #20]
 80024a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800256c <_vfiprintf_r+0x220>
 80024a6:	2203      	movs	r2, #3
 80024a8:	4650      	mov	r0, sl
 80024aa:	7821      	ldrb	r1, [r4, #0]
 80024ac:	f000 fb4c 	bl	8002b48 <memchr>
 80024b0:	b138      	cbz	r0, 80024c2 <_vfiprintf_r+0x176>
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	9b04      	ldr	r3, [sp, #16]
 80024b6:	eba0 000a 	sub.w	r0, r0, sl
 80024ba:	4082      	lsls	r2, r0
 80024bc:	4313      	orrs	r3, r2
 80024be:	3401      	adds	r4, #1
 80024c0:	9304      	str	r3, [sp, #16]
 80024c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024c6:	2206      	movs	r2, #6
 80024c8:	4829      	ldr	r0, [pc, #164]	@ (8002570 <_vfiprintf_r+0x224>)
 80024ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024ce:	f000 fb3b 	bl	8002b48 <memchr>
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d03f      	beq.n	8002556 <_vfiprintf_r+0x20a>
 80024d6:	4b27      	ldr	r3, [pc, #156]	@ (8002574 <_vfiprintf_r+0x228>)
 80024d8:	bb1b      	cbnz	r3, 8002522 <_vfiprintf_r+0x1d6>
 80024da:	9b03      	ldr	r3, [sp, #12]
 80024dc:	3307      	adds	r3, #7
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	3308      	adds	r3, #8
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024e8:	443b      	add	r3, r7
 80024ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80024ec:	e76a      	b.n	80023c4 <_vfiprintf_r+0x78>
 80024ee:	460c      	mov	r4, r1
 80024f0:	2001      	movs	r0, #1
 80024f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80024f6:	e7a8      	b.n	800244a <_vfiprintf_r+0xfe>
 80024f8:	2300      	movs	r3, #0
 80024fa:	f04f 0c0a 	mov.w	ip, #10
 80024fe:	4619      	mov	r1, r3
 8002500:	3401      	adds	r4, #1
 8002502:	9305      	str	r3, [sp, #20]
 8002504:	4620      	mov	r0, r4
 8002506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800250a:	3a30      	subs	r2, #48	@ 0x30
 800250c:	2a09      	cmp	r2, #9
 800250e:	d903      	bls.n	8002518 <_vfiprintf_r+0x1cc>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0c6      	beq.n	80024a2 <_vfiprintf_r+0x156>
 8002514:	9105      	str	r1, [sp, #20]
 8002516:	e7c4      	b.n	80024a2 <_vfiprintf_r+0x156>
 8002518:	4604      	mov	r4, r0
 800251a:	2301      	movs	r3, #1
 800251c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002520:	e7f0      	b.n	8002504 <_vfiprintf_r+0x1b8>
 8002522:	ab03      	add	r3, sp, #12
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	462a      	mov	r2, r5
 8002528:	4630      	mov	r0, r6
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <_vfiprintf_r+0x22c>)
 800252c:	a904      	add	r1, sp, #16
 800252e:	f3af 8000 	nop.w
 8002532:	4607      	mov	r7, r0
 8002534:	1c78      	adds	r0, r7, #1
 8002536:	d1d6      	bne.n	80024e6 <_vfiprintf_r+0x19a>
 8002538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800253a:	07d9      	lsls	r1, r3, #31
 800253c:	d405      	bmi.n	800254a <_vfiprintf_r+0x1fe>
 800253e:	89ab      	ldrh	r3, [r5, #12]
 8002540:	059a      	lsls	r2, r3, #22
 8002542:	d402      	bmi.n	800254a <_vfiprintf_r+0x1fe>
 8002544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002546:	f7ff fc89 	bl	8001e5c <__retarget_lock_release_recursive>
 800254a:	89ab      	ldrh	r3, [r5, #12]
 800254c:	065b      	lsls	r3, r3, #25
 800254e:	f53f af1f 	bmi.w	8002390 <_vfiprintf_r+0x44>
 8002552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002554:	e71e      	b.n	8002394 <_vfiprintf_r+0x48>
 8002556:	ab03      	add	r3, sp, #12
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	462a      	mov	r2, r5
 800255c:	4630      	mov	r0, r6
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <_vfiprintf_r+0x22c>)
 8002560:	a904      	add	r1, sp, #16
 8002562:	f000 f87d 	bl	8002660 <_printf_i>
 8002566:	e7e4      	b.n	8002532 <_vfiprintf_r+0x1e6>
 8002568:	08002e49 	.word	0x08002e49
 800256c:	08002e4f 	.word	0x08002e4f
 8002570:	08002e53 	.word	0x08002e53
 8002574:	00000000 	.word	0x00000000
 8002578:	08002327 	.word	0x08002327

0800257c <_printf_common>:
 800257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002580:	4616      	mov	r6, r2
 8002582:	4698      	mov	r8, r3
 8002584:	688a      	ldr	r2, [r1, #8]
 8002586:	690b      	ldr	r3, [r1, #16]
 8002588:	4607      	mov	r7, r0
 800258a:	4293      	cmp	r3, r2
 800258c:	bfb8      	it	lt
 800258e:	4613      	movlt	r3, r2
 8002590:	6033      	str	r3, [r6, #0]
 8002592:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002596:	460c      	mov	r4, r1
 8002598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800259c:	b10a      	cbz	r2, 80025a2 <_printf_common+0x26>
 800259e:	3301      	adds	r3, #1
 80025a0:	6033      	str	r3, [r6, #0]
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	0699      	lsls	r1, r3, #26
 80025a6:	bf42      	ittt	mi
 80025a8:	6833      	ldrmi	r3, [r6, #0]
 80025aa:	3302      	addmi	r3, #2
 80025ac:	6033      	strmi	r3, [r6, #0]
 80025ae:	6825      	ldr	r5, [r4, #0]
 80025b0:	f015 0506 	ands.w	r5, r5, #6
 80025b4:	d106      	bne.n	80025c4 <_printf_common+0x48>
 80025b6:	f104 0a19 	add.w	sl, r4, #25
 80025ba:	68e3      	ldr	r3, [r4, #12]
 80025bc:	6832      	ldr	r2, [r6, #0]
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	42ab      	cmp	r3, r5
 80025c2:	dc2b      	bgt.n	800261c <_printf_common+0xa0>
 80025c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025c8:	6822      	ldr	r2, [r4, #0]
 80025ca:	3b00      	subs	r3, #0
 80025cc:	bf18      	it	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	0692      	lsls	r2, r2, #26
 80025d2:	d430      	bmi.n	8002636 <_printf_common+0xba>
 80025d4:	4641      	mov	r1, r8
 80025d6:	4638      	mov	r0, r7
 80025d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025dc:	47c8      	blx	r9
 80025de:	3001      	adds	r0, #1
 80025e0:	d023      	beq.n	800262a <_printf_common+0xae>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	6922      	ldr	r2, [r4, #16]
 80025e6:	f003 0306 	and.w	r3, r3, #6
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf14      	ite	ne
 80025ee:	2500      	movne	r5, #0
 80025f0:	6833      	ldreq	r3, [r6, #0]
 80025f2:	f04f 0600 	mov.w	r6, #0
 80025f6:	bf08      	it	eq
 80025f8:	68e5      	ldreq	r5, [r4, #12]
 80025fa:	f104 041a 	add.w	r4, r4, #26
 80025fe:	bf08      	it	eq
 8002600:	1aed      	subeq	r5, r5, r3
 8002602:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002606:	bf08      	it	eq
 8002608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800260c:	4293      	cmp	r3, r2
 800260e:	bfc4      	itt	gt
 8002610:	1a9b      	subgt	r3, r3, r2
 8002612:	18ed      	addgt	r5, r5, r3
 8002614:	42b5      	cmp	r5, r6
 8002616:	d11a      	bne.n	800264e <_printf_common+0xd2>
 8002618:	2000      	movs	r0, #0
 800261a:	e008      	b.n	800262e <_printf_common+0xb2>
 800261c:	2301      	movs	r3, #1
 800261e:	4652      	mov	r2, sl
 8002620:	4641      	mov	r1, r8
 8002622:	4638      	mov	r0, r7
 8002624:	47c8      	blx	r9
 8002626:	3001      	adds	r0, #1
 8002628:	d103      	bne.n	8002632 <_printf_common+0xb6>
 800262a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800262e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002632:	3501      	adds	r5, #1
 8002634:	e7c1      	b.n	80025ba <_printf_common+0x3e>
 8002636:	2030      	movs	r0, #48	@ 0x30
 8002638:	18e1      	adds	r1, r4, r3
 800263a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002644:	4422      	add	r2, r4
 8002646:	3302      	adds	r3, #2
 8002648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800264c:	e7c2      	b.n	80025d4 <_printf_common+0x58>
 800264e:	2301      	movs	r3, #1
 8002650:	4622      	mov	r2, r4
 8002652:	4641      	mov	r1, r8
 8002654:	4638      	mov	r0, r7
 8002656:	47c8      	blx	r9
 8002658:	3001      	adds	r0, #1
 800265a:	d0e6      	beq.n	800262a <_printf_common+0xae>
 800265c:	3601      	adds	r6, #1
 800265e:	e7d9      	b.n	8002614 <_printf_common+0x98>

08002660 <_printf_i>:
 8002660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002664:	7e0f      	ldrb	r7, [r1, #24]
 8002666:	4691      	mov	r9, r2
 8002668:	2f78      	cmp	r7, #120	@ 0x78
 800266a:	4680      	mov	r8, r0
 800266c:	460c      	mov	r4, r1
 800266e:	469a      	mov	sl, r3
 8002670:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002676:	d807      	bhi.n	8002688 <_printf_i+0x28>
 8002678:	2f62      	cmp	r7, #98	@ 0x62
 800267a:	d80a      	bhi.n	8002692 <_printf_i+0x32>
 800267c:	2f00      	cmp	r7, #0
 800267e:	f000 80d1 	beq.w	8002824 <_printf_i+0x1c4>
 8002682:	2f58      	cmp	r7, #88	@ 0x58
 8002684:	f000 80b8 	beq.w	80027f8 <_printf_i+0x198>
 8002688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800268c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002690:	e03a      	b.n	8002708 <_printf_i+0xa8>
 8002692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002696:	2b15      	cmp	r3, #21
 8002698:	d8f6      	bhi.n	8002688 <_printf_i+0x28>
 800269a:	a101      	add	r1, pc, #4	@ (adr r1, 80026a0 <_printf_i+0x40>)
 800269c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026a0:	080026f9 	.word	0x080026f9
 80026a4:	0800270d 	.word	0x0800270d
 80026a8:	08002689 	.word	0x08002689
 80026ac:	08002689 	.word	0x08002689
 80026b0:	08002689 	.word	0x08002689
 80026b4:	08002689 	.word	0x08002689
 80026b8:	0800270d 	.word	0x0800270d
 80026bc:	08002689 	.word	0x08002689
 80026c0:	08002689 	.word	0x08002689
 80026c4:	08002689 	.word	0x08002689
 80026c8:	08002689 	.word	0x08002689
 80026cc:	0800280b 	.word	0x0800280b
 80026d0:	08002737 	.word	0x08002737
 80026d4:	080027c5 	.word	0x080027c5
 80026d8:	08002689 	.word	0x08002689
 80026dc:	08002689 	.word	0x08002689
 80026e0:	0800282d 	.word	0x0800282d
 80026e4:	08002689 	.word	0x08002689
 80026e8:	08002737 	.word	0x08002737
 80026ec:	08002689 	.word	0x08002689
 80026f0:	08002689 	.word	0x08002689
 80026f4:	080027cd 	.word	0x080027cd
 80026f8:	6833      	ldr	r3, [r6, #0]
 80026fa:	1d1a      	adds	r2, r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6032      	str	r2, [r6, #0]
 8002700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002708:	2301      	movs	r3, #1
 800270a:	e09c      	b.n	8002846 <_printf_i+0x1e6>
 800270c:	6833      	ldr	r3, [r6, #0]
 800270e:	6820      	ldr	r0, [r4, #0]
 8002710:	1d19      	adds	r1, r3, #4
 8002712:	6031      	str	r1, [r6, #0]
 8002714:	0606      	lsls	r6, r0, #24
 8002716:	d501      	bpl.n	800271c <_printf_i+0xbc>
 8002718:	681d      	ldr	r5, [r3, #0]
 800271a:	e003      	b.n	8002724 <_printf_i+0xc4>
 800271c:	0645      	lsls	r5, r0, #25
 800271e:	d5fb      	bpl.n	8002718 <_printf_i+0xb8>
 8002720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002724:	2d00      	cmp	r5, #0
 8002726:	da03      	bge.n	8002730 <_printf_i+0xd0>
 8002728:	232d      	movs	r3, #45	@ 0x2d
 800272a:	426d      	negs	r5, r5
 800272c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002730:	230a      	movs	r3, #10
 8002732:	4858      	ldr	r0, [pc, #352]	@ (8002894 <_printf_i+0x234>)
 8002734:	e011      	b.n	800275a <_printf_i+0xfa>
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	6833      	ldr	r3, [r6, #0]
 800273a:	0608      	lsls	r0, r1, #24
 800273c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002740:	d402      	bmi.n	8002748 <_printf_i+0xe8>
 8002742:	0649      	lsls	r1, r1, #25
 8002744:	bf48      	it	mi
 8002746:	b2ad      	uxthmi	r5, r5
 8002748:	2f6f      	cmp	r7, #111	@ 0x6f
 800274a:	6033      	str	r3, [r6, #0]
 800274c:	bf14      	ite	ne
 800274e:	230a      	movne	r3, #10
 8002750:	2308      	moveq	r3, #8
 8002752:	4850      	ldr	r0, [pc, #320]	@ (8002894 <_printf_i+0x234>)
 8002754:	2100      	movs	r1, #0
 8002756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800275a:	6866      	ldr	r6, [r4, #4]
 800275c:	2e00      	cmp	r6, #0
 800275e:	60a6      	str	r6, [r4, #8]
 8002760:	db05      	blt.n	800276e <_printf_i+0x10e>
 8002762:	6821      	ldr	r1, [r4, #0]
 8002764:	432e      	orrs	r6, r5
 8002766:	f021 0104 	bic.w	r1, r1, #4
 800276a:	6021      	str	r1, [r4, #0]
 800276c:	d04b      	beq.n	8002806 <_printf_i+0x1a6>
 800276e:	4616      	mov	r6, r2
 8002770:	fbb5 f1f3 	udiv	r1, r5, r3
 8002774:	fb03 5711 	mls	r7, r3, r1, r5
 8002778:	5dc7      	ldrb	r7, [r0, r7]
 800277a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800277e:	462f      	mov	r7, r5
 8002780:	42bb      	cmp	r3, r7
 8002782:	460d      	mov	r5, r1
 8002784:	d9f4      	bls.n	8002770 <_printf_i+0x110>
 8002786:	2b08      	cmp	r3, #8
 8002788:	d10b      	bne.n	80027a2 <_printf_i+0x142>
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	07df      	lsls	r7, r3, #31
 800278e:	d508      	bpl.n	80027a2 <_printf_i+0x142>
 8002790:	6923      	ldr	r3, [r4, #16]
 8002792:	6861      	ldr	r1, [r4, #4]
 8002794:	4299      	cmp	r1, r3
 8002796:	bfde      	ittt	le
 8002798:	2330      	movle	r3, #48	@ 0x30
 800279a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800279e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80027a2:	1b92      	subs	r2, r2, r6
 80027a4:	6122      	str	r2, [r4, #16]
 80027a6:	464b      	mov	r3, r9
 80027a8:	4621      	mov	r1, r4
 80027aa:	4640      	mov	r0, r8
 80027ac:	f8cd a000 	str.w	sl, [sp]
 80027b0:	aa03      	add	r2, sp, #12
 80027b2:	f7ff fee3 	bl	800257c <_printf_common>
 80027b6:	3001      	adds	r0, #1
 80027b8:	d14a      	bne.n	8002850 <_printf_i+0x1f0>
 80027ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027be:	b004      	add	sp, #16
 80027c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f043 0320 	orr.w	r3, r3, #32
 80027ca:	6023      	str	r3, [r4, #0]
 80027cc:	2778      	movs	r7, #120	@ 0x78
 80027ce:	4832      	ldr	r0, [pc, #200]	@ (8002898 <_printf_i+0x238>)
 80027d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	6831      	ldr	r1, [r6, #0]
 80027d8:	061f      	lsls	r7, r3, #24
 80027da:	f851 5b04 	ldr.w	r5, [r1], #4
 80027de:	d402      	bmi.n	80027e6 <_printf_i+0x186>
 80027e0:	065f      	lsls	r7, r3, #25
 80027e2:	bf48      	it	mi
 80027e4:	b2ad      	uxthmi	r5, r5
 80027e6:	6031      	str	r1, [r6, #0]
 80027e8:	07d9      	lsls	r1, r3, #31
 80027ea:	bf44      	itt	mi
 80027ec:	f043 0320 	orrmi.w	r3, r3, #32
 80027f0:	6023      	strmi	r3, [r4, #0]
 80027f2:	b11d      	cbz	r5, 80027fc <_printf_i+0x19c>
 80027f4:	2310      	movs	r3, #16
 80027f6:	e7ad      	b.n	8002754 <_printf_i+0xf4>
 80027f8:	4826      	ldr	r0, [pc, #152]	@ (8002894 <_printf_i+0x234>)
 80027fa:	e7e9      	b.n	80027d0 <_printf_i+0x170>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	f023 0320 	bic.w	r3, r3, #32
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	e7f6      	b.n	80027f4 <_printf_i+0x194>
 8002806:	4616      	mov	r6, r2
 8002808:	e7bd      	b.n	8002786 <_printf_i+0x126>
 800280a:	6833      	ldr	r3, [r6, #0]
 800280c:	6825      	ldr	r5, [r4, #0]
 800280e:	1d18      	adds	r0, r3, #4
 8002810:	6961      	ldr	r1, [r4, #20]
 8002812:	6030      	str	r0, [r6, #0]
 8002814:	062e      	lsls	r6, r5, #24
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	d501      	bpl.n	800281e <_printf_i+0x1be>
 800281a:	6019      	str	r1, [r3, #0]
 800281c:	e002      	b.n	8002824 <_printf_i+0x1c4>
 800281e:	0668      	lsls	r0, r5, #25
 8002820:	d5fb      	bpl.n	800281a <_printf_i+0x1ba>
 8002822:	8019      	strh	r1, [r3, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	4616      	mov	r6, r2
 8002828:	6123      	str	r3, [r4, #16]
 800282a:	e7bc      	b.n	80027a6 <_printf_i+0x146>
 800282c:	6833      	ldr	r3, [r6, #0]
 800282e:	2100      	movs	r1, #0
 8002830:	1d1a      	adds	r2, r3, #4
 8002832:	6032      	str	r2, [r6, #0]
 8002834:	681e      	ldr	r6, [r3, #0]
 8002836:	6862      	ldr	r2, [r4, #4]
 8002838:	4630      	mov	r0, r6
 800283a:	f000 f985 	bl	8002b48 <memchr>
 800283e:	b108      	cbz	r0, 8002844 <_printf_i+0x1e4>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	6060      	str	r0, [r4, #4]
 8002844:	6863      	ldr	r3, [r4, #4]
 8002846:	6123      	str	r3, [r4, #16]
 8002848:	2300      	movs	r3, #0
 800284a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800284e:	e7aa      	b.n	80027a6 <_printf_i+0x146>
 8002850:	4632      	mov	r2, r6
 8002852:	4649      	mov	r1, r9
 8002854:	4640      	mov	r0, r8
 8002856:	6923      	ldr	r3, [r4, #16]
 8002858:	47d0      	blx	sl
 800285a:	3001      	adds	r0, #1
 800285c:	d0ad      	beq.n	80027ba <_printf_i+0x15a>
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	079b      	lsls	r3, r3, #30
 8002862:	d413      	bmi.n	800288c <_printf_i+0x22c>
 8002864:	68e0      	ldr	r0, [r4, #12]
 8002866:	9b03      	ldr	r3, [sp, #12]
 8002868:	4298      	cmp	r0, r3
 800286a:	bfb8      	it	lt
 800286c:	4618      	movlt	r0, r3
 800286e:	e7a6      	b.n	80027be <_printf_i+0x15e>
 8002870:	2301      	movs	r3, #1
 8002872:	4632      	mov	r2, r6
 8002874:	4649      	mov	r1, r9
 8002876:	4640      	mov	r0, r8
 8002878:	47d0      	blx	sl
 800287a:	3001      	adds	r0, #1
 800287c:	d09d      	beq.n	80027ba <_printf_i+0x15a>
 800287e:	3501      	adds	r5, #1
 8002880:	68e3      	ldr	r3, [r4, #12]
 8002882:	9903      	ldr	r1, [sp, #12]
 8002884:	1a5b      	subs	r3, r3, r1
 8002886:	42ab      	cmp	r3, r5
 8002888:	dcf2      	bgt.n	8002870 <_printf_i+0x210>
 800288a:	e7eb      	b.n	8002864 <_printf_i+0x204>
 800288c:	2500      	movs	r5, #0
 800288e:	f104 0619 	add.w	r6, r4, #25
 8002892:	e7f5      	b.n	8002880 <_printf_i+0x220>
 8002894:	08002e5a 	.word	0x08002e5a
 8002898:	08002e6b 	.word	0x08002e6b

0800289c <__sflush_r>:
 800289c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	0716      	lsls	r6, r2, #28
 80028a4:	4605      	mov	r5, r0
 80028a6:	460c      	mov	r4, r1
 80028a8:	d454      	bmi.n	8002954 <__sflush_r+0xb8>
 80028aa:	684b      	ldr	r3, [r1, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	dc02      	bgt.n	80028b6 <__sflush_r+0x1a>
 80028b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dd48      	ble.n	8002948 <__sflush_r+0xac>
 80028b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80028b8:	2e00      	cmp	r6, #0
 80028ba:	d045      	beq.n	8002948 <__sflush_r+0xac>
 80028bc:	2300      	movs	r3, #0
 80028be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80028c2:	682f      	ldr	r7, [r5, #0]
 80028c4:	6a21      	ldr	r1, [r4, #32]
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	d030      	beq.n	800292c <__sflush_r+0x90>
 80028ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	0759      	lsls	r1, r3, #29
 80028d0:	d505      	bpl.n	80028de <__sflush_r+0x42>
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	1ad2      	subs	r2, r2, r3
 80028d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80028d8:	b10b      	cbz	r3, 80028de <__sflush_r+0x42>
 80028da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	4628      	mov	r0, r5
 80028e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80028e4:	6a21      	ldr	r1, [r4, #32]
 80028e6:	47b0      	blx	r6
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	d106      	bne.n	80028fc <__sflush_r+0x60>
 80028ee:	6829      	ldr	r1, [r5, #0]
 80028f0:	291d      	cmp	r1, #29
 80028f2:	d82b      	bhi.n	800294c <__sflush_r+0xb0>
 80028f4:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <__sflush_r+0xfc>)
 80028f6:	40ca      	lsrs	r2, r1
 80028f8:	07d6      	lsls	r6, r2, #31
 80028fa:	d527      	bpl.n	800294c <__sflush_r+0xb0>
 80028fc:	2200      	movs	r2, #0
 80028fe:	6062      	str	r2, [r4, #4]
 8002900:	6922      	ldr	r2, [r4, #16]
 8002902:	04d9      	lsls	r1, r3, #19
 8002904:	6022      	str	r2, [r4, #0]
 8002906:	d504      	bpl.n	8002912 <__sflush_r+0x76>
 8002908:	1c42      	adds	r2, r0, #1
 800290a:	d101      	bne.n	8002910 <__sflush_r+0x74>
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	b903      	cbnz	r3, 8002912 <__sflush_r+0x76>
 8002910:	6560      	str	r0, [r4, #84]	@ 0x54
 8002912:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002914:	602f      	str	r7, [r5, #0]
 8002916:	b1b9      	cbz	r1, 8002948 <__sflush_r+0xac>
 8002918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800291c:	4299      	cmp	r1, r3
 800291e:	d002      	beq.n	8002926 <__sflush_r+0x8a>
 8002920:	4628      	mov	r0, r5
 8002922:	f7ff fa9d 	bl	8001e60 <_free_r>
 8002926:	2300      	movs	r3, #0
 8002928:	6363      	str	r3, [r4, #52]	@ 0x34
 800292a:	e00d      	b.n	8002948 <__sflush_r+0xac>
 800292c:	2301      	movs	r3, #1
 800292e:	4628      	mov	r0, r5
 8002930:	47b0      	blx	r6
 8002932:	4602      	mov	r2, r0
 8002934:	1c50      	adds	r0, r2, #1
 8002936:	d1c9      	bne.n	80028cc <__sflush_r+0x30>
 8002938:	682b      	ldr	r3, [r5, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0c6      	beq.n	80028cc <__sflush_r+0x30>
 800293e:	2b1d      	cmp	r3, #29
 8002940:	d001      	beq.n	8002946 <__sflush_r+0xaa>
 8002942:	2b16      	cmp	r3, #22
 8002944:	d11d      	bne.n	8002982 <__sflush_r+0xe6>
 8002946:	602f      	str	r7, [r5, #0]
 8002948:	2000      	movs	r0, #0
 800294a:	e021      	b.n	8002990 <__sflush_r+0xf4>
 800294c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002950:	b21b      	sxth	r3, r3
 8002952:	e01a      	b.n	800298a <__sflush_r+0xee>
 8002954:	690f      	ldr	r7, [r1, #16]
 8002956:	2f00      	cmp	r7, #0
 8002958:	d0f6      	beq.n	8002948 <__sflush_r+0xac>
 800295a:	0793      	lsls	r3, r2, #30
 800295c:	bf18      	it	ne
 800295e:	2300      	movne	r3, #0
 8002960:	680e      	ldr	r6, [r1, #0]
 8002962:	bf08      	it	eq
 8002964:	694b      	ldreq	r3, [r1, #20]
 8002966:	1bf6      	subs	r6, r6, r7
 8002968:	600f      	str	r7, [r1, #0]
 800296a:	608b      	str	r3, [r1, #8]
 800296c:	2e00      	cmp	r6, #0
 800296e:	ddeb      	ble.n	8002948 <__sflush_r+0xac>
 8002970:	4633      	mov	r3, r6
 8002972:	463a      	mov	r2, r7
 8002974:	4628      	mov	r0, r5
 8002976:	6a21      	ldr	r1, [r4, #32]
 8002978:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800297c:	47e0      	blx	ip
 800297e:	2800      	cmp	r0, #0
 8002980:	dc07      	bgt.n	8002992 <__sflush_r+0xf6>
 8002982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800298a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002992:	4407      	add	r7, r0
 8002994:	1a36      	subs	r6, r6, r0
 8002996:	e7e9      	b.n	800296c <__sflush_r+0xd0>
 8002998:	20400001 	.word	0x20400001

0800299c <_fflush_r>:
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	690b      	ldr	r3, [r1, #16]
 80029a0:	4605      	mov	r5, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	b913      	cbnz	r3, 80029ac <_fflush_r+0x10>
 80029a6:	2500      	movs	r5, #0
 80029a8:	4628      	mov	r0, r5
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
 80029ac:	b118      	cbz	r0, 80029b6 <_fflush_r+0x1a>
 80029ae:	6a03      	ldr	r3, [r0, #32]
 80029b0:	b90b      	cbnz	r3, 80029b6 <_fflush_r+0x1a>
 80029b2:	f7ff f803 	bl	80019bc <__sinit>
 80029b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f3      	beq.n	80029a6 <_fflush_r+0xa>
 80029be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80029c0:	07d0      	lsls	r0, r2, #31
 80029c2:	d404      	bmi.n	80029ce <_fflush_r+0x32>
 80029c4:	0599      	lsls	r1, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_fflush_r+0x32>
 80029c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029ca:	f7ff fa46 	bl	8001e5a <__retarget_lock_acquire_recursive>
 80029ce:	4628      	mov	r0, r5
 80029d0:	4621      	mov	r1, r4
 80029d2:	f7ff ff63 	bl	800289c <__sflush_r>
 80029d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029d8:	4605      	mov	r5, r0
 80029da:	07da      	lsls	r2, r3, #31
 80029dc:	d4e4      	bmi.n	80029a8 <_fflush_r+0xc>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	059b      	lsls	r3, r3, #22
 80029e2:	d4e1      	bmi.n	80029a8 <_fflush_r+0xc>
 80029e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029e6:	f7ff fa39 	bl	8001e5c <__retarget_lock_release_recursive>
 80029ea:	e7dd      	b.n	80029a8 <_fflush_r+0xc>

080029ec <__swhatbuf_r>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	460c      	mov	r4, r1
 80029f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f4:	4615      	mov	r5, r2
 80029f6:	2900      	cmp	r1, #0
 80029f8:	461e      	mov	r6, r3
 80029fa:	b096      	sub	sp, #88	@ 0x58
 80029fc:	da0c      	bge.n	8002a18 <__swhatbuf_r+0x2c>
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	2100      	movs	r1, #0
 8002a02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a06:	bf14      	ite	ne
 8002a08:	2340      	movne	r3, #64	@ 0x40
 8002a0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002a0e:	2000      	movs	r0, #0
 8002a10:	6031      	str	r1, [r6, #0]
 8002a12:	602b      	str	r3, [r5, #0]
 8002a14:	b016      	add	sp, #88	@ 0x58
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	466a      	mov	r2, sp
 8002a1a:	f000 f863 	bl	8002ae4 <_fstat_r>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	dbed      	blt.n	80029fe <__swhatbuf_r+0x12>
 8002a22:	9901      	ldr	r1, [sp, #4]
 8002a24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002a28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002a2c:	4259      	negs	r1, r3
 8002a2e:	4159      	adcs	r1, r3
 8002a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a34:	e7eb      	b.n	8002a0e <__swhatbuf_r+0x22>

08002a36 <__smakebuf_r>:
 8002a36:	898b      	ldrh	r3, [r1, #12]
 8002a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3a:	079d      	lsls	r5, r3, #30
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	d507      	bpl.n	8002a52 <__smakebuf_r+0x1c>
 8002a42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	6123      	str	r3, [r4, #16]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	6163      	str	r3, [r4, #20]
 8002a4e:	b003      	add	sp, #12
 8002a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a52:	466a      	mov	r2, sp
 8002a54:	ab01      	add	r3, sp, #4
 8002a56:	f7ff ffc9 	bl	80029ec <__swhatbuf_r>
 8002a5a:	9f00      	ldr	r7, [sp, #0]
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	4639      	mov	r1, r7
 8002a60:	4630      	mov	r0, r6
 8002a62:	f7ff fa67 	bl	8001f34 <_malloc_r>
 8002a66:	b948      	cbnz	r0, 8002a7c <__smakebuf_r+0x46>
 8002a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a6c:	059a      	lsls	r2, r3, #22
 8002a6e:	d4ee      	bmi.n	8002a4e <__smakebuf_r+0x18>
 8002a70:	f023 0303 	bic.w	r3, r3, #3
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	81a3      	strh	r3, [r4, #12]
 8002a7a:	e7e2      	b.n	8002a42 <__smakebuf_r+0xc>
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a86:	81a3      	strh	r3, [r4, #12]
 8002a88:	9b01      	ldr	r3, [sp, #4]
 8002a8a:	6020      	str	r0, [r4, #0]
 8002a8c:	b15b      	cbz	r3, 8002aa6 <__smakebuf_r+0x70>
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a94:	f000 f838 	bl	8002b08 <_isatty_r>
 8002a98:	b128      	cbz	r0, 8002aa6 <__smakebuf_r+0x70>
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	f023 0303 	bic.w	r3, r3, #3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	81a3      	strh	r3, [r4, #12]
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	431d      	orrs	r5, r3
 8002aaa:	81a5      	strh	r5, [r4, #12]
 8002aac:	e7cf      	b.n	8002a4e <__smakebuf_r+0x18>

08002aae <memmove>:
 8002aae:	4288      	cmp	r0, r1
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	eb01 0402 	add.w	r4, r1, r2
 8002ab6:	d902      	bls.n	8002abe <memmove+0x10>
 8002ab8:	4284      	cmp	r4, r0
 8002aba:	4623      	mov	r3, r4
 8002abc:	d807      	bhi.n	8002ace <memmove+0x20>
 8002abe:	1e43      	subs	r3, r0, #1
 8002ac0:	42a1      	cmp	r1, r4
 8002ac2:	d008      	beq.n	8002ad6 <memmove+0x28>
 8002ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ac8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002acc:	e7f8      	b.n	8002ac0 <memmove+0x12>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4402      	add	r2, r0
 8002ad2:	428a      	cmp	r2, r1
 8002ad4:	d100      	bne.n	8002ad8 <memmove+0x2a>
 8002ad6:	bd10      	pop	{r4, pc}
 8002ad8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002adc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ae0:	e7f7      	b.n	8002ad2 <memmove+0x24>
	...

08002ae4 <_fstat_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	4d06      	ldr	r5, [pc, #24]	@ (8002b04 <_fstat_r+0x20>)
 8002aea:	4604      	mov	r4, r0
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	602b      	str	r3, [r5, #0]
 8002af2:	f7fe fdfa 	bl	80016ea <_fstat>
 8002af6:	1c43      	adds	r3, r0, #1
 8002af8:	d102      	bne.n	8002b00 <_fstat_r+0x1c>
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	b103      	cbz	r3, 8002b00 <_fstat_r+0x1c>
 8002afe:	6023      	str	r3, [r4, #0]
 8002b00:	bd38      	pop	{r3, r4, r5, pc}
 8002b02:	bf00      	nop
 8002b04:	200001c8 	.word	0x200001c8

08002b08 <_isatty_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	4d05      	ldr	r5, [pc, #20]	@ (8002b24 <_isatty_r+0x1c>)
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	602b      	str	r3, [r5, #0]
 8002b14:	f7fe fdf8 	bl	8001708 <_isatty>
 8002b18:	1c43      	adds	r3, r0, #1
 8002b1a:	d102      	bne.n	8002b22 <_isatty_r+0x1a>
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	b103      	cbz	r3, 8002b22 <_isatty_r+0x1a>
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	bd38      	pop	{r3, r4, r5, pc}
 8002b24:	200001c8 	.word	0x200001c8

08002b28 <_sbrk_r>:
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4d05      	ldr	r5, [pc, #20]	@ (8002b44 <_sbrk_r+0x1c>)
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4608      	mov	r0, r1
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	f7fe fdfe 	bl	8001734 <_sbrk>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	d102      	bne.n	8002b42 <_sbrk_r+0x1a>
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	b103      	cbz	r3, 8002b42 <_sbrk_r+0x1a>
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	bd38      	pop	{r3, r4, r5, pc}
 8002b44:	200001c8 	.word	0x200001c8

08002b48 <memchr>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	b2c9      	uxtb	r1, r1
 8002b4e:	4402      	add	r2, r0
 8002b50:	4293      	cmp	r3, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	d101      	bne.n	8002b5a <memchr+0x12>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e003      	b.n	8002b62 <memchr+0x1a>
 8002b5a:	7804      	ldrb	r4, [r0, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	428c      	cmp	r4, r1
 8002b60:	d1f6      	bne.n	8002b50 <memchr+0x8>
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <memcpy>:
 8002b64:	440a      	add	r2, r1
 8002b66:	4291      	cmp	r1, r2
 8002b68:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002b6c:	d100      	bne.n	8002b70 <memcpy+0xc>
 8002b6e:	4770      	bx	lr
 8002b70:	b510      	push	{r4, lr}
 8002b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b76:	4291      	cmp	r1, r2
 8002b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b7c:	d1f9      	bne.n	8002b72 <memcpy+0xe>
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <_realloc_r>:
 8002b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b84:	4607      	mov	r7, r0
 8002b86:	4614      	mov	r4, r2
 8002b88:	460d      	mov	r5, r1
 8002b8a:	b921      	cbnz	r1, 8002b96 <_realloc_r+0x16>
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b92:	f7ff b9cf 	b.w	8001f34 <_malloc_r>
 8002b96:	b92a      	cbnz	r2, 8002ba4 <_realloc_r+0x24>
 8002b98:	f7ff f962 	bl	8001e60 <_free_r>
 8002b9c:	4625      	mov	r5, r4
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ba4:	f000 f81a 	bl	8002bdc <_malloc_usable_size_r>
 8002ba8:	4284      	cmp	r4, r0
 8002baa:	4606      	mov	r6, r0
 8002bac:	d802      	bhi.n	8002bb4 <_realloc_r+0x34>
 8002bae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bb2:	d8f4      	bhi.n	8002b9e <_realloc_r+0x1e>
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	f7ff f9bc 	bl	8001f34 <_malloc_r>
 8002bbc:	4680      	mov	r8, r0
 8002bbe:	b908      	cbnz	r0, 8002bc4 <_realloc_r+0x44>
 8002bc0:	4645      	mov	r5, r8
 8002bc2:	e7ec      	b.n	8002b9e <_realloc_r+0x1e>
 8002bc4:	42b4      	cmp	r4, r6
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	bf28      	it	cs
 8002bcc:	4632      	movcs	r2, r6
 8002bce:	f7ff ffc9 	bl	8002b64 <memcpy>
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	f7ff f943 	bl	8001e60 <_free_r>
 8002bda:	e7f1      	b.n	8002bc0 <_realloc_r+0x40>

08002bdc <_malloc_usable_size_r>:
 8002bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be0:	1f18      	subs	r0, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bfbc      	itt	lt
 8002be6:	580b      	ldrlt	r3, [r1, r0]
 8002be8:	18c0      	addlt	r0, r0, r3
 8002bea:	4770      	bx	lr

08002bec <_init>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr

08002bf8 <_fini>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr
